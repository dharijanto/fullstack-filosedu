"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),path=require("path"),crud_service_neo_1=require("./crud-service-neo"),Formatter=require(path.join(__dirname,"../lib/utils/formatter"));let log=require("npmlog"),Sequelize=require("sequelize");const TAG="CourseService";class CourseService extends crud_service_neo_1.default{getTopicDetails(e=-1){return super.rawReadQuery(`\nSELECT\n  topics.id AS \`topics.id\`, topics.topicNo AS \`topics.topicNo\`, topics.topic AS \`topics.topic\`,\n  IFNULL(starBadge.\`count\`, 0) AS \`topics.starBadge\`,\n  IFNULL(timeBadge.\`count\`, 0) AS \`topics.timeBadge\`,\n  subtopicsView.id AS \`topics.subtopics.id\`, subtopicsView.subtopicNo AS \`topics.subtopics.subtopicNo\`,\n  subtopicsView.subtopic AS \`topics.subtopics.subtopic\`,\n  IFNULL(subtopicsView.starBadge, 0) AS \`topics.subtopics.starBadge\`,\n  IFNULL(subtopicsView.timeBadge, 0) AS \`topics.subtopics.timeBadge\`,\n  IFNULL(subtopicsView.watchBadge, 0) AS \`topics.subtopics.watchBadge\`\nFROM topics\nLEFT OUTER JOIN (\n  SELECT COUNT(*) AS count, topicId\n  FROM generatedTopicExercises\n  WHERE userId = ${e} AND submitted = 1 AND score >= 80\n  GROUP BY topicId\n) AS starBadge ON starBadge.topicId = topics.id\nLEFT OUTER JOIN (\n  SELECT COUNT(*) AS count, topicId\n  FROM generatedTopicExercises\n  WHERE submitted = 1 AND userId = ${e} AND timeFinish < idealTime AND score = 100\n  GROUP BY topicId\n) AS timeBadge ON timeBadge.topicId = topics.id\nINNER JOIN (\n  SELECT\n    subtopics.id AS id, subtopics.topicId AS topicId, subtopics.subtopic AS subtopic, subtopics.subtopicNo AS subtopicNo,\n    (starBadge.\`count\` / exercisesView.count) AS starBadge,\n    (timeBadge.\`count\` / exercisesView.count) AS timeBadge,\n    watchBadge.\`count\` AS watchBadge\n  FROM subtopics\n  LEFT OUTER JOIN (\n    SELECT\n      exercises.subtopicId AS subtopicId,\n      COUNT(*) AS count,\n      COUNT(distinct exercises.id) AS test\n    FROM generatedExercises\n    INNER JOIN exercises ON exercises.id = generatedExercises.exerciseId\n        AND generatedExercises.submitted = 1 AND generatedExercises.score >= 80\n        AND generatedExercises.userId = ${e}\n    GROUP BY exercises.subtopicId, generatedExercises.userId\n  ) AS starBadge ON starBadge.subtopicId = subtopics.id\n  LEFT OUTER JOIN (\n    SELECT\n      exercises.subtopicId AS subtopicId,\n      COUNT(*) AS count\n    FROM generatedExercises\n    INNER JOIN exercises ON exercises.id = generatedExercises.exerciseId\n        AND generatedExercises.submitted = 1 AND generatedExercises.score = 100 AND timeFinish < idealTime\n        AND generatedExercises.userId = ${e}\n    GROUP BY exercises.subtopicId, generatedExercises.userId\n  ) AS timeBadge ON timeBadge.subtopicId = subtopics.id\n  LEFT OUTER JOIN (\n    SELECT videos.subtopicId AS subtopicId, 1 AS count\n    FROM videos\n    INNER JOIN watchedVideos on watchedVideos.videoId = videos.id AND watchedVideos.userId = ${e}\n    LIMIT 1\n  ) AS watchBadge ON watchBadge.subtopicId = subtopics.id\n  LEFT OUTER JOIN (\n    SELECT subtopicId, COUNT(id) AS count\n    FROM exercises\n    GROUP BY subtopicId\n  ) AS exercisesView ON exercisesView.subtopicId = subtopics.id\n) AS subtopicsView ON subtopicsView.topicId = topics.id\nORDER BY topicNo, subtopicNo ASC\n`).then(e=>e.status?{status:!0,data:Formatter.objectify(e.data)[0]}:{status:!1,errMessage:e.errMessage})}getAllTopics(){return this.getModels("Topic").findAll({order:[["topicNo","ASC"]]}).then(e=>({status:!0,data:e}))}getAllSubtopics(){return this.getModels("Subtopic").findAll({order:[["subtopicNo","ASC"]]}).then(e=>({status:!0,data:e}))}getTopicDependencies(e){return this.getSequelize().query(`SELECT topicDependencies.id, topicDependencies.description, topicDependencies.updatedAt, topics.topic as dependencyName FROM topicDependencies INNER JOIN topics ON topics.id = topicDependencies.dependencyId WHERE topicDependencies.topicId=${e}`,{type:Sequelize.QueryTypes.SELECT}).then(e=>({status:!0,data:e}))}addTopicDependency(e,t,i){return this.read({modelName:"Topic",searchClause:{topic:t}}).then(s=>{if(s.status&&s.data){const t=s.data[0];return t.id===parseInt(e,10)?{status:!1,errMessage:"A topic could not depend on itself!"}:this.create({modelName:"TopicDependency",data:{topicId:e,dependencyId:t.id,description:i}})}return{status:!1,errMessage:`Could not find topic with name "${t}"`}})}getSubtopicByTopicId(e){return this.getModels("Subtopic").findAll({where:{topicId:e},order:[["subtopicNo","ASC"]]}).then(e=>({status:!0,data:e}))}getExerciseBySubtopicId(e){return this.getModels("Exercise").findAll({where:{subtopicId:e},order:[["id","ASC"]]}).then(e=>({status:!0,data:e}))}getSubtopic(e){return this.readOne({modelName:"Subtopic",searchClause:{id:e},include:[{model:this.getModels("Topic")}]})}getTopic(e){return this.readOne({modelName:"Topic",searchClause:{id:e}})}getExercises(e){return this.read({modelName:"Exercise",searchClause:{subtopicId:e},order:[["id","ASC"]]})}getPreviousAndNextExercise(e,t){return Promise.join(this.readOne({modelName:"Exercise",searchClause:{[Sequelize.Op.and]:{id:{[Sequelize.Op.lt]:t},subtopicId:e}},order:[["id","DESC"]],include:[{model:this.getModels("Subtopic"),include:[{model:this.getModels("Topic")}]}]}),this.readOne({modelName:"Exercise",searchClause:{[Sequelize.Op.and]:{id:{[Sequelize.Op.gt]:t},subtopicId:e}},order:[["id","ASC"]],include:[{model:this.getModels("Subtopic"),include:[{model:this.getModels("Topic")}]}]})).spread((e,t)=>({status:!0,data:{prev:e.data,next:t.data}}))}getPreviousAndNextSubtopic(e){return this.getSubtopic(e).then(e=>{if(e.status&&e.data){const t=e.data.subtopicNo;return Promise.join(this.readOne({modelName:"Subtopic",searchClause:{subtopicNo:{[Sequelize.Op.lt]:t}},include:[{model:this.getModels("Topic")}],order:[["subtopicNo","DESC"]],limit:1}),this.readOne({modelName:"Subtopic",searchClause:{subtopicNo:{[Sequelize.Op.gt]:t}},include:[{model:this.getModels("Topic")}],order:[["subtopicNo","ASC"]],limit:1})).spread((e,t)=>({status:!0,data:{prev:e.data,next:t.data}}))}return{status:!1,errMessage:e.errMessage}})}isSubtopicVideoWatched(e,t){return this.getSequelize().query(`\n  SELECT subtopics.id AS subtopicId, true AS watched\n   FROM subtopics\n   INNER JOIN videos ON videos.subtopicId = subtopics.id\n   INNER JOIN watchedVideos on watchedVideos.videoId = videos.id\n   WHERE subtopics.id = ${e} AND watchedVideos.userId = ${t}\n   LIMIT 1;\n`,{type:this.getSequelize().QueryTypes.SELECT}).then(e=>{let t=!1;return e.length>0&&(t=!0),{status:!0,data:{watched:t}}})}}exports.default=new CourseService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
