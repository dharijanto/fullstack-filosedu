"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const sequelize_service_1=require("./sequelize-service");let _=require("lodash"),log=require("npmlog");const TAG="CRUDService";class CRUDService{getModels(e){return sequelize_service_1.default.getInstance().models[e]}getSequelize(){return sequelize_service_1.default.getInstance().sequelize}rawReadQuery(e){return this.getSequelize().query(e,{type:this.getSequelize().QueryTypes.SELECT}).then(e=>({status:!0,data:e}))}rawReadOneQuery(e){return this.rawReadQuery(e).then(e=>e.status?e.data.length?e:{status:!1,errMessage:"Data not found!"}:e)}create({modelName:e,data:r,trx:t}){if(log.verbose(TAG,`create(): modelName=${e} data=${JSON.stringify(r)}`),!(r=_.omit(r,"id")))throw new Error("Data has to be specified!");return this.getModels(e).create(r,{transaction:t}).then(e=>({status:!0,data:e.get({plain:!0})})).catch(e=>{if("SequelizeUniqueConstraintError"===e.name)return{status:!1,errMessage:"Unique Constraint Error"};if("SequelizeForeignKeyConstraintError"===e.name)return{status:!1,errMessage:"Foreign Key Constraint Error!"};throw e})}read({modelName:e,searchClause:r,order:t=[],include:a,limit:s,trx:i}){if(!r)throw new Error("searchClause has to be specified!");return log.verbose(TAG,`read(): modelName=${e} searchClause=${JSON.stringify(r)}`),this.getModels(e).findAll({where:r,order:t,include:a,limit:s,transaction:i}).then(e=>e.length>0?{status:!0,data:e.map(e=>e.get({plain:!0}))}:{status:!1,errMessage:"Data not found"})}readOne({modelName:e,searchClause:r,order:t,include:a,trx:s}){return this.read({modelName:e,searchClause:r,order:t,include:a,trx:s}).then(e=>e.status&&e.data?{status:!0,data:e.data[0]}:{status:!1,errMessage:e.errMessage})}update({modelName:e,data:r,trx:t}){if(log.verbose(TAG,`update(): modelName=${e} data=${JSON.stringify(r)}`),r.id)return this.getModels(e).update(r,{where:{id:r.id},transaction:t}).spread(e=>({status:!0})).catch(e=>{if("SequelizeUniqueConstraintError"===e.name)return{status:!1,errMessage:"Unique Constraint Error"};if("SequelizeForeignKeyConstraintError"===e.name)return{status:!1,errMessage:"Foreign Key Constraint Error!"};throw e});throw new Error("Data needs to have id!")}delete({modelName:e,data:r}){if(log.verbose(TAG,`delete(): modelName=${e} data=${JSON.stringify(r)}`),r.id)return this.getModels(e).destroy({where:{id:r.id}}).then(e=>e>0?{status:!0}:{status:!1,errMessage:"Data Not Found!"}).catch(e=>{if("SequelizeUniqueConstraintError"===e.name)return{status:!1,errMessage:"Unique Constraint Error"};if("SequelizeForeignKeyConstraintError"===e.name)return{status:!1,errMessage:"Foreign Key Constraint Error!"};throw e});throw new Error("Data needs to have id!")}}exports.default=CRUDService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
