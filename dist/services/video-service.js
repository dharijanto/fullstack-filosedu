var path=require("path"),AWS=require("aws-sdk"),fs=require("fs"),log=require("npmlog"),multer=require("multer"),Promise=require("bluebird"),url=require("url");const AppConfig=require(path.join(__dirname,"../app-config"));var CRUDService=require(path.join(__dirname,"crud-service"));const TAG="VideoService";class VideoService extends CRUDService{addVideo(e,r=null,i){return this.create({modelName:"Videos",data:{filename:e,sourceLink:r,subtopicId:i}}).then(r=>r.status?{status:!0,data:{selfHostedURL:url.resolve(AppConfig.VIDEO_MOUNT_PATH,e)}}:r)}addFeedback(e,r,i){return this.create({modelName:"Feedbacks",data:{videoId:e,userId:r,value:i}})}getVideo(e){return this._models.Videos.findOne({where:{subtopicId:e},order:[["createdAt","DESC"]]}).then(e=>e?{status:!0,data:{id:e.id,selfHostedURL:url.resolve(AppConfig.VIDEO_MOUNT_PATH,e.filename),filename:e.filename,remoteHostedURL:JSON.parse(e.sourceLink)}}:{status:!1,errCode:0,errMessage:"Data not found"})}getAllVideos(){return this.read({modelName:"Videos",searchClause:{}})}static getUploadMiddleware(){return multer({storage:multer.diskStorage({destination:(e,r,i)=>{i(null,AppConfig.VIDEO_PATH)},filename:(e,r,i)=>{var t=r.originalname.split(" ").join("_");i(null,Date.now()+"_"+t)}}),limits:{files:1}}).single("video")}uploadVideoToS3(e){return new Promise((r,i)=>{fs.readFile(path.join(AppConfig.VIDEO_PATH,e),(t,o)=>{t&&i(t);var s=new AWS.S3;AWS.config.update({region:AppConfig.AWS_REGION});var a=Buffer.from(o,"binary"),n={Bucket:AppConfig.AWS_VIDEO_CONF.AWS_BUCKET_NAME,Key:e,Body:a,ACL:"public-read"};s.putObject(n,function(t,o){if(t)fs.unlink(path.join(AppConfig.VIDEO_PATH,e),(e,r)=>{i(t)});else{var s=new AWS.ElasticTranscoder,a={PipelineId:AppConfig.AWS_VIDEO_CONF.AWS_PIPELINE_ID,Input:{Key:e},OutputKeyPrefix:AppConfig.AWS_VIDEO_CONF.AWS_PREFIX_FOLDER_VIDEO_NAME,Outputs:[{Key:url.resolve(AppConfig.AWS_VIDEO_CONF.AWS_360P_FOLDER,e),PresetId:AppConfig.AWS_VIDEO_CONF.AWS_360P_PRESET_ID},{Key:url.resolve(AppConfig.AWS_VIDEO_CONF.AWS_720P_FOLDER,e),PresetId:AppConfig.AWS_VIDEO_CONF.AWS_720P_PRESET_ID}]};log.verbose(TAG,"uploadVideoToS3(): paramElastic="+JSON.stringify(a)),s.createJob(a,function(t,o){if(t)fs.unlink(path.join(AppConfig.VIDEO_PATH,e),(e,r)=>{i(t)});else{log.verbose(TAG,"uploadVideoToS3(): data3="+JSON.stringify(o));const e=o.Job.Outputs;if(!e||e.length<2)log.error(TAG,"uploadVideoToS3(): ElasticTranscoder result is less than expected!"),r({status:!1,errMessage:"ElasticTranscoder returns unexpected response"});else{const i=url.resolve(AppConfig.AWS_VIDEO_CONF.AWS_LINK,path.join(AppConfig.AWS_VIDEO_CONF.AWS_BUCKET_NAME,o.Job.OutputKeyPrefix||"")),t=url.resolve(i,e[0].Key),s=url.resolve(i,e[1].Key);r({status:!0,data:{URL:{nonHD:t,HD:s}}})}}})}})})})}uploadAndSaveVideoToDB(e,r){return new Promise((i,t)=>{if(!AppConfig.CLOUD_SERVER)return this.addVideo(e,null,r).then(e=>{e.status?i(e):i({status:!1})}).catch(e=>{t(e)});this.uploadVideoToS3(e).then(t=>{if(t.status)return this.addVideo(e,JSON.stringify(t.data.URL),r).then(e=>{e.status?i(e):i({status:!1})});i({status:!1})}).catch(e=>{t(e)})})}addFinishedWatching(e,r){return e&&r?this.create({modelName:"WatchedVideo",data:{videoId:e,userId:r,onCloud:AppConfig.CLOUD_SERVER}}):Promise.resolve({status:!1,errMessage:"videoId and userId are required!"})}}module.exports=VideoService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
