const path=require("path"),Promise=require("bluebird"),log=require("npmlog"),AppConfig=require(path.join(__dirname,"../app-config")),CRUDService=require(path.join(__dirname,"crud-service")),TAG="AnalyticsService";class AnalyticsService extends CRUDService{addVideoData(e,s,a,r=null){return new Promise((t,i)=>{"feedback"!==e&&"view"!==e&&"skip"!==e&&"viewDuration"!==e?t({status:!1,errMessage:"Invalid analytics key!"}):this.create({modelName:"Analytics",data:{key:e,value:s,type:"video",userId:r,videoId:a,onCloud:AppConfig.CLOUD_SERVER}}).then(e=>{t(e)}).catch(e=>{i(e)})})}addExerciseSubmissionStats(e,s,a,r){return log.debug(TAG,`addExerciseSubmissionStats(): scorePercentage=${e} attemptsPercentage=${s} exerciseId=${a} userId=${r}`),Promise.join(this.addExerciseData("correctAnswers",e,a,r),this.addExerciseData("attemptedAnswers",s,a,r)).spread((e,s)=>e.status&&s.status?{status:!0}:{stauts:!1,errMessage:e.errMessage||s.errMessage})}addExerciseData(e,s,a,r=null){return new Promise((t,i)=>{"backToVideo"!==e&&"questionTime"!==e&&"setTime"!==e&&"correctAnswers"!==e&&"attemptedAnswers"!==e?t({status:!1,errMessage:"Invalid analytics key!"}):this.create({modelName:"Analytics",data:{key:e,value:s,type:"exercise",userId:r,exerciseId:a,onCloud:AppConfig.CLOUD_SERVER}}).then(e=>{t(e)}).catch(e=>{i(e)})})}}module.exports=AnalyticsService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXJ2aWNlcy9hbmFseXRpY3Mtc2VydmljZS5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIlByb21pc2UiLCJsb2ciLCJBcHBDb25maWciLCJqb2luIiwiX19kaXJuYW1lIiwiQ1JVRFNlcnZpY2UiLCJUQUciLCJBbmFseXRpY3NTZXJ2aWNlIiwiW29iamVjdCBPYmplY3RdIiwia2V5IiwidmFsdWUiLCJ2aWRlb0lkIiwidXNlcklkIiwicmVzb2x2ZSIsInJlamVjdCIsInN0YXR1cyIsImVyck1lc3NhZ2UiLCJ0aGlzIiwiY3JlYXRlIiwibW9kZWxOYW1lIiwiZGF0YSIsInR5cGUiLCJvbkNsb3VkIiwiQ0xPVURfU0VSVkVSIiwidGhlbiIsInJlc3AiLCJjYXRjaCIsImVyciIsInNjb3JlUGVyY2VudGFnZSIsImF0dGVtcHRzUGVyY2VudGFnZSIsImV4ZXJjaXNlSWQiLCJkZWJ1ZyIsImFkZEV4ZXJjaXNlRGF0YSIsInNwcmVhZCIsInJlc3AyIiwic3RhdXRzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBT0MsUUFBUSxRQUVmQyxRQUFVRCxRQUFRLFlBQ2xCRSxJQUFNRixRQUFRLFVBRWRHLFVBQVlILFFBQVFELEtBQUtLLEtBQUtDLFVBQVcsa0JBQ3pDQyxZQUFjTixRQUFRRCxLQUFLSyxLQUFLQyxVQUFXLGlCQUUzQ0UsSUFBTSx5QkFVWkMseUJBQStCRixZQXVCN0JHLGFBQWNDLEVBQUtDLEVBQU9DLEVBQVNDLEVBQVMsTUFDMUMsT0FBTyxJQUFJWixRQUFRLENBQUNhLEVBQVNDLEtBQ2YsYUFBUkwsR0FBOEIsU0FBUkEsR0FBMEIsU0FBUkEsR0FBMEIsaUJBQVJBLEVBQzVESSxHQUFTRSxRQUFRLEVBQU9DLFdBQVksMkJBRXBDQyxLQUFLQyxRQUNIQyxVQUFXLFlBQ1hDLE1BQ0VYLElBQUFBLEVBQ0FDLE1BQUFBLEVBQ0FXLEtBQU0sUUFDTlQsT0FBQUEsRUFDQUQsUUFBQUEsRUFDQVcsUUFBU3BCLFVBQVVxQixnQkFFcEJDLEtBQUtDLElBQ05aLEVBQVFZLEtBQ1BDLE1BQU1DLElBQ1BiLEVBQU9hLE9BTWZuQiwyQkFBNEJvQixFQUFpQkMsRUFBb0JDLEVBQVlsQixHQUczRSxPQURBWCxJQUFJOEIsTUFBTXpCLHFEQUFzRHNCLHdCQUFzQ0MsZ0JBQWlDQyxZQUFxQmxCLEtBQ3JKWixRQUFRRyxLQUNiYyxLQUFLZSxnQkFBZ0IsaUJBQWtCSixFQUFpQkUsRUFBWWxCLEdBQ3BFSyxLQUFLZSxnQkFBZ0IsbUJBQW9CSCxFQUFvQkMsRUFBWWxCLElBQ3pFcUIsT0FBTyxDQUFDUixFQUFNUyxJQUNWVCxFQUFLVixRQUFVbUIsRUFBTW5CLFFBQ2RBLFFBQVEsSUFFUm9CLFFBQVEsRUFBT25CLFdBQVlTLEVBQUtULFlBQWNrQixFQUFNbEIsYUEyQm5FUixnQkFBaUJDLEVBQUtDLEVBQU9vQixFQUFZbEIsRUFBUyxNQUNoRCxPQUFPLElBQUlaLFFBQVEsQ0FBQ2EsRUFBU0MsS0FDZixnQkFBUkwsR0FBaUMsaUJBQVJBLEdBQ2pCLFlBQVJBLEdBQTZCLG1CQUFSQSxHQUFvQyxxQkFBUkEsRUFDbkRJLEdBQVNFLFFBQVEsRUFBT0MsV0FBWSwyQkFFcENDLEtBQUtDLFFBQ0hDLFVBQVcsWUFDWEMsTUFDRVgsSUFBQUEsRUFDQUMsTUFBQUEsRUFDQVcsS0FBTSxXQUNOVCxPQUFBQSxFQUNBa0IsV0FBQUEsRUFDQVIsUUFBU3BCLFVBQVVxQixnQkFFcEJDLEtBQUtDLElBQ05aLEVBQVFZLEtBQ1BDLE1BQU1DLElBQ1BiLEVBQU9hLFFBT2pCUyxPQUFPQyxRQUFVOUIiLCJmaWxlIjoic2VydmljZXMvYW5hbHl0aWNzLXNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG5cbmNvbnN0IFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpXG5jb25zdCBsb2cgPSByZXF1aXJlKCducG1sb2cnKVxuXG5jb25zdCBBcHBDb25maWcgPSByZXF1aXJlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9hcHAtY29uZmlnJykpXG5jb25zdCBDUlVEU2VydmljZSA9IHJlcXVpcmUocGF0aC5qb2luKF9fZGlybmFtZSwgJ2NydWQtc2VydmljZScpKVxuXG5jb25zdCBUQUcgPSAnQW5hbHl0aWNzU2VydmljZSdcblxuLypcbiAgSW1wb3J0YW50IE5vdGU6XG4gICAgYW5hbHl0aWNzIGhhcyAnb25DbG91ZCcgY29sdW1uXG4gICAgd2hpY2ggaW5kaWNhdGUgdGhhdCB0aGUgZGF0YSBpcyBhbHJlYWR5IG9uIHRoZSBjbG91ZCBhbmQgd2UgZG9uJ3QgbmVlZCB0b1xuICAgIHNlbmQgdGhlbSBhZ2FpbiB3aGVuIHN5bmNpbmcuXG5cbiAgICBSZW1lbWJlciB0byBzZXQgdGhlIHZhbHVlIHByb3Blcmx5IVxuKi9cbmNsYXNzIEFuYWx5dGljc1NlcnZpY2UgZXh0ZW5kcyBDUlVEU2VydmljZSB7XG4gIC8qXG4gICAgdHlwZTogJ2ZlZWRiYWNrJzpcbiAgICAgIFNtaWxleSBmYWNlIGF0IHRoZSBlbmQgb2YgdmlkZW9cbiAgICAgIFZhbHVlOiAtMSAtPiBEaXNsaWtlLCAxIC0+IExpa2VcbiAgICAgIEFnZ3JlZ2F0ZSB0aGUgcmV2aWV3IGJ5IHN1bW1pbmcgdGhlbVxuXG4gICAgdHlwZTogJ3ZpZXcnOlxuICAgICAgdmlkZW8ub25lKCdwbGF5JylcbiAgICAgIFdoZW4gcGFnZSBpcyBsb2FkZWQsIGZpcnN0IHByZXNzIHRvIHBsYXkgYnV0dG9uIGlzIGNvbnNpZGVyZWQgJ3ZpZXcnXG4gICAgICBWYWx1ZTogMVxuXG4gICAgdHlwZTogJ3ZpZXdEdXJhdGlvbic6XG4gICAgICBzdGFydDogdmlkZW8ub24oJ3BsYXknKVxuICAgICAgc3RvcDogdmlkZW8ub24oJ3BhdXNlJykgb3IgYnJvd3NlciBjbG9zZWRcbiAgICAgIFZhbHVlOiBbc2Vjb25kc11cblxuICAgIHR5cGU6ICdza2lwJzpcbiAgICAgIE5ldyB2aWV3IGlzIGEgbmV3IGVudHJ5IGluIHRoZSB0YWJsZSBzbyB3ZSBjYW4gc2VlIGEgc3R1ZGVudCdzIHRyZW5kXG4gICAgICBTdHVkZW50IGRvZXNuJ3QgcGxheSB0aGUgdmlkZW8sIGJ1dCBpbW1lZGlhdGVseSBnb2VzIHRvIGV4ZXJjaXNlIHBhZ2VcbiAgICAgIHZpZGVvLm9uZSgncGxheScpIGRvZXNuJ3QgdHJpZ2dlciwgZXhlcmNpc2UgYnV0dG9uIGlzIHByZXNzZWRcbiAgICAgIFZhbHVlOiAxXG4gICovXG4gIGFkZFZpZGVvRGF0YSAoa2V5LCB2YWx1ZSwgdmlkZW9JZCwgdXNlcklkID0gbnVsbCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAoa2V5ICE9PSAnZmVlZGJhY2snICYmIGtleSAhPT0gJ3ZpZXcnICYmIGtleSAhPT0gJ3NraXAnICYmIGtleSAhPT0gJ3ZpZXdEdXJhdGlvbicpIHtcbiAgICAgICAgcmVzb2x2ZSh7c3RhdHVzOiBmYWxzZSwgZXJyTWVzc2FnZTogJ0ludmFsaWQgYW5hbHl0aWNzIGtleSEnfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY3JlYXRlKHtcbiAgICAgICAgICBtb2RlbE5hbWU6ICdBbmFseXRpY3MnLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgdHlwZTogJ3ZpZGVvJyxcbiAgICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICAgIHZpZGVvSWQsXG4gICAgICAgICAgICBvbkNsb3VkOiBBcHBDb25maWcuQ0xPVURfU0VSVkVSXG4gICAgICAgICAgfVxuICAgICAgICB9KS50aGVuKHJlc3AgPT4ge1xuICAgICAgICAgIHJlc29sdmUocmVzcClcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBhZGRFeGVyY2lzZVN1Ym1pc3Npb25TdGF0cyAoc2NvcmVQZXJjZW50YWdlLCBhdHRlbXB0c1BlcmNlbnRhZ2UsIGV4ZXJjaXNlSWQsIHVzZXJJZCkge1xuICAgIC8vIHRlc3RcbiAgICBsb2cuZGVidWcoVEFHLCBgYWRkRXhlcmNpc2VTdWJtaXNzaW9uU3RhdHMoKTogc2NvcmVQZXJjZW50YWdlPSR7c2NvcmVQZXJjZW50YWdlfSBhdHRlbXB0c1BlcmNlbnRhZ2U9JHthdHRlbXB0c1BlcmNlbnRhZ2V9IGV4ZXJjaXNlSWQ9JHtleGVyY2lzZUlkfSB1c2VySWQ9JHt1c2VySWR9YClcbiAgICByZXR1cm4gUHJvbWlzZS5qb2luKFxuICAgICAgdGhpcy5hZGRFeGVyY2lzZURhdGEoJ2NvcnJlY3RBbnN3ZXJzJywgc2NvcmVQZXJjZW50YWdlLCBleGVyY2lzZUlkLCB1c2VySWQpLFxuICAgICAgdGhpcy5hZGRFeGVyY2lzZURhdGEoJ2F0dGVtcHRlZEFuc3dlcnMnLCBhdHRlbXB0c1BlcmNlbnRhZ2UsIGV4ZXJjaXNlSWQsIHVzZXJJZClcbiAgICApLnNwcmVhZCgocmVzcCwgcmVzcDIpID0+IHtcbiAgICAgIGlmIChyZXNwLnN0YXR1cyAmJiByZXNwMi5zdGF0dXMpIHtcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiB0cnVlIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7IHN0YXV0czogZmFsc2UsIGVyck1lc3NhZ2U6IHJlc3AuZXJyTWVzc2FnZSB8fCByZXNwMi5lcnJNZXNzYWdlfVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKlxuICAgIHR5cGU6ICdiYWNrVG9WaWRlbyc6XG4gICAgICBVc2VyIGdvZXMgYmFjayB0byBUaW1ldmlkZW8gZnJvbSBleGVyY2lzZSwgYnkgY2xpY2tpbmcgJ0JhY2sgdG8gVmlkZW8nXG4gICAgICBWYWx1ZTogMVxuXG4gICAgdHlwZTogJ3F1ZXN0aW9uVGltZSc6XG4gICAgICBUaW1lIHNwZW5kIGJldHdlZW4gcXVlc3Rpb25zXG4gICAgICBWYWx1ZTogdGltZSBpbiBzZWNvbmRcblxuICAgIHR5cGU6ICdzZXRUaW1lJzpcbiAgICAgIFRpbWUgc3BlbmQgYmV0d2VlbiBhIHNldFxuICAgICAgVmFsdWU6IHRpbWUgaW4gc2Vjb25kXG5cbiAgICB0eXBlOiAnY29ycmVjdEFuc3dlcnMnOlxuICAgICAgQ29ycmVjdCBhbnN3ZXIgaW4gYSBzZXQgc3VibWlzc2lvblxuICAgICAgVmFsdWU6IHBlcmNlbnRhZ2Ugb3ZlciBhbGwgcXVlc3Rpb25zXG5cbiAgICB0eXBlOiAnYXR0ZW1wdGVkQW5zd2Vycyc6XG4gICAgICBOb24tZW1wdHkgYW5zd2VycyBpbiBhIHNldCBzdWJtaXNzaW9uXG4gICAgICBWYWx1ZTogcGVyY2VudGFnZSBvdmVyIGFsbCBxdWVzdGlvbnNcblxuICAqL1xuICBhZGRFeGVyY2lzZURhdGEgKGtleSwgdmFsdWUsIGV4ZXJjaXNlSWQsIHVzZXJJZCA9IG51bGwpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKGtleSAhPT0gJ2JhY2tUb1ZpZGVvJyAmJiBrZXkgIT09ICdxdWVzdGlvblRpbWUnICYmXG4gICAgICAgICAga2V5ICE9PSAnc2V0VGltZScgJiYga2V5ICE9PSAnY29ycmVjdEFuc3dlcnMnICYmIGtleSAhPT0gJ2F0dGVtcHRlZEFuc3dlcnMnKSB7XG4gICAgICAgIHJlc29sdmUoe3N0YXR1czogZmFsc2UsIGVyck1lc3NhZ2U6ICdJbnZhbGlkIGFuYWx5dGljcyBrZXkhJ30pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNyZWF0ZSh7XG4gICAgICAgICAgbW9kZWxOYW1lOiAnQW5hbHl0aWNzJyxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIHR5cGU6ICdleGVyY2lzZScsXG4gICAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgICBleGVyY2lzZUlkLFxuICAgICAgICAgICAgb25DbG91ZDogQXBwQ29uZmlnLkNMT1VEX1NFUlZFUlxuICAgICAgICAgIH1cbiAgICAgICAgfSkudGhlbihyZXNwID0+IHtcbiAgICAgICAgICByZXNvbHZlKHJlc3ApXG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQW5hbHl0aWNzU2VydmljZVxuIl19
