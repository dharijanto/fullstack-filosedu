const path=require("path"),Promise=require("bluebird"),log=require("npmlog"),AppConfig=require(path.join(__dirname,"../app-config")),CRUDService=require(path.join(__dirname,"crud-service")),TAG="AnalyticsService";class AnalyticsService extends CRUDService{addVideoData(e,s,r,a=null){return new Promise((t,i)=>{"feedback"!==e&&"view"!==e&&"skip"!==e&&"viewDuration"!==e?t({status:!1,errMessage:"Invalid analytics key!"}):this.create({modelName:"Analytics",data:{key:e,value:s,type:"video",userId:a,videoId:r,onCloud:AppConfig.CLOUD_SERVER}}).then(e=>{t(e)}).catch(e=>{i(e)})})}addExerciseSubmissionStats(e,s,r,a){return log.verbose(TAG,`addExerciseSubmissionStats(): scorePercentage=${e} attemptsPercentage=${s} exerciseId=${r} userId=${a}`),Promise.join(this.addExerciseData("correctAnswers",e,r,a),this.addExerciseData("attemptedAnswers",s,r,a)).spread((e,s)=>e.status&&s.status?{status:!0}:{stauts:!1,errMessage:e.errMessage||s.errMessage})}addExerciseData(e,s,r,a=null){return new Promise((t,i)=>{"backToVideo"!==e&&"questionTime"!==e&&"setTime"!==e&&"correctAnswers"!==e&&"attemptedAnswers"!==e?t({status:!1,errMessage:"Invalid analytics key!"}):this.create({modelName:"Analytics",data:{key:e,value:s,type:"exercise",userId:a,exerciseId:r,onCloud:AppConfig.CLOUD_SERVER}}).then(e=>{t(e)}).catch(e=>{i(e)})})}}module.exports=AnalyticsService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXJ2aWNlcy9hbmFseXRpY3Mtc2VydmljZS5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIlByb21pc2UiLCJsb2ciLCJBcHBDb25maWciLCJqb2luIiwiX19kaXJuYW1lIiwiQ1JVRFNlcnZpY2UiLCJUQUciLCJBbmFseXRpY3NTZXJ2aWNlIiwiW29iamVjdCBPYmplY3RdIiwia2V5IiwidmFsdWUiLCJ2aWRlb0lkIiwidXNlcklkIiwicmVzb2x2ZSIsInJlamVjdCIsInN0YXR1cyIsImVyck1lc3NhZ2UiLCJ0aGlzIiwiY3JlYXRlIiwibW9kZWxOYW1lIiwiZGF0YSIsInR5cGUiLCJvbkNsb3VkIiwiQ0xPVURfU0VSVkVSIiwidGhlbiIsInJlc3AiLCJjYXRjaCIsImVyciIsInNjb3JlUGVyY2VudGFnZSIsImF0dGVtcHRzUGVyY2VudGFnZSIsImV4ZXJjaXNlSWQiLCJ2ZXJib3NlIiwiYWRkRXhlcmNpc2VEYXRhIiwic3ByZWFkIiwicmVzcDIiLCJzdGF1dHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxLQUFPQyxRQUFRLFFBRWZDLFFBQVVELFFBQVEsWUFDbEJFLElBQU1GLFFBQVEsVUFFZEcsVUFBWUgsUUFBUUQsS0FBS0ssS0FBS0MsVUFBVyxrQkFDekNDLFlBQWNOLFFBQVFELEtBQUtLLEtBQUtDLFVBQVcsaUJBRTNDRSxJQUFNLHlCQVVaQyx5QkFBK0JGLFlBdUI3QkcsYUFBY0MsRUFBS0MsRUFBT0MsRUFBU0MsRUFBUyxNQUMxQyxPQUFPLElBQUlaLFFBQVEsQ0FBQ2EsRUFBU0MsS0FDZixhQUFSTCxHQUE4QixTQUFSQSxHQUEwQixTQUFSQSxHQUEwQixpQkFBUkEsRUFDNURJLEdBQVNFLFFBQVEsRUFBT0MsV0FBWSwyQkFFcENDLEtBQUtDLFFBQ0hDLFVBQVcsWUFDWEMsTUFDRVgsSUFBQUEsRUFDQUMsTUFBQUEsRUFDQVcsS0FBTSxRQUNOVCxPQUFBQSxFQUNBRCxRQUFBQSxFQUNBVyxRQUFTcEIsVUFBVXFCLGdCQUVwQkMsS0FBS0MsSUFDTlosRUFBUVksS0FDUEMsTUFBTUMsSUFDUGIsRUFBT2EsT0FNZm5CLDJCQUE0Qm9CLEVBQWlCQyxFQUFvQkMsRUFBWWxCLEdBRzNFLE9BREFYLElBQUk4QixRQUFRekIscURBQXNEc0Isd0JBQXNDQyxnQkFBaUNDLFlBQXFCbEIsS0FDdkpaLFFBQVFHLEtBQ2JjLEtBQUtlLGdCQUFnQixpQkFBa0JKLEVBQWlCRSxFQUFZbEIsR0FDcEVLLEtBQUtlLGdCQUFnQixtQkFBb0JILEVBQW9CQyxFQUFZbEIsSUFDekVxQixPQUFPLENBQUNSLEVBQU1TLElBQ1ZULEVBQUtWLFFBQVVtQixFQUFNbkIsUUFDZEEsUUFBUSxJQUVSb0IsUUFBUSxFQUFPbkIsV0FBWVMsRUFBS1QsWUFBY2tCLEVBQU1sQixhQTJCbkVSLGdCQUFpQkMsRUFBS0MsRUFBT29CLEVBQVlsQixFQUFTLE1BQ2hELE9BQU8sSUFBSVosUUFBUSxDQUFDYSxFQUFTQyxLQUNmLGdCQUFSTCxHQUFpQyxpQkFBUkEsR0FDakIsWUFBUkEsR0FBNkIsbUJBQVJBLEdBQW9DLHFCQUFSQSxFQUNuREksR0FBU0UsUUFBUSxFQUFPQyxXQUFZLDJCQUVwQ0MsS0FBS0MsUUFDSEMsVUFBVyxZQUNYQyxNQUNFWCxJQUFBQSxFQUNBQyxNQUFBQSxFQUNBVyxLQUFNLFdBQ05ULE9BQUFBLEVBQ0FrQixXQUFBQSxFQUNBUixRQUFTcEIsVUFBVXFCLGdCQUVwQkMsS0FBS0MsSUFDTlosRUFBUVksS0FDUEMsTUFBTUMsSUFDUGIsRUFBT2EsUUFPakJTLE9BQU9DLFFBQVU5QiIsImZpbGUiOiJzZXJ2aWNlcy9hbmFseXRpY3Mtc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJylcblxuY29uc3QgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJylcbmNvbnN0IGxvZyA9IHJlcXVpcmUoJ25wbWxvZycpXG5cbmNvbnN0IEFwcENvbmZpZyA9IHJlcXVpcmUocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL2FwcC1jb25maWcnKSlcbmNvbnN0IENSVURTZXJ2aWNlID0gcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnY3J1ZC1zZXJ2aWNlJykpXG5cbmNvbnN0IFRBRyA9ICdBbmFseXRpY3NTZXJ2aWNlJ1xuXG4vKlxuICBJbXBvcnRhbnQgTm90ZTpcbiAgICBhbmFseXRpY3MgaGFzICdvbkNsb3VkJyBjb2x1bW5cbiAgICB3aGljaCBpbmRpY2F0ZSB0aGF0IHRoZSBkYXRhIGlzIGFscmVhZHkgb24gdGhlIGNsb3VkIGFuZCB3ZSBkb24ndCBuZWVkIHRvXG4gICAgc2VuZCB0aGVtIGFnYWluIHdoZW4gc3luY2luZy5cblxuICAgIFJlbWVtYmVyIHRvIHNldCB0aGUgdmFsdWUgcHJvcGVybHkhXG4qL1xuY2xhc3MgQW5hbHl0aWNzU2VydmljZSBleHRlbmRzIENSVURTZXJ2aWNlIHtcbiAgLypcbiAgICB0eXBlOiAnZmVlZGJhY2snOlxuICAgICAgU21pbGV5IGZhY2UgYXQgdGhlIGVuZCBvZiB2aWRlb1xuICAgICAgVmFsdWU6IC0xIC0+IERpc2xpa2UsIDEgLT4gTGlrZVxuICAgICAgQWdncmVnYXRlIHRoZSByZXZpZXcgYnkgc3VtbWluZyB0aGVtXG5cbiAgICB0eXBlOiAndmlldyc6XG4gICAgICB2aWRlby5vbmUoJ3BsYXknKVxuICAgICAgV2hlbiBwYWdlIGlzIGxvYWRlZCwgZmlyc3QgcHJlc3MgdG8gcGxheSBidXR0b24gaXMgY29uc2lkZXJlZCAndmlldydcbiAgICAgIFZhbHVlOiAxXG5cbiAgICB0eXBlOiAndmlld0R1cmF0aW9uJzpcbiAgICAgIHN0YXJ0OiB2aWRlby5vbigncGxheScpXG4gICAgICBzdG9wOiB2aWRlby5vbigncGF1c2UnKSBvciBicm93c2VyIGNsb3NlZFxuICAgICAgVmFsdWU6IFtzZWNvbmRzXVxuXG4gICAgdHlwZTogJ3NraXAnOlxuICAgICAgTmV3IHZpZXcgaXMgYSBuZXcgZW50cnkgaW4gdGhlIHRhYmxlIHNvIHdlIGNhbiBzZWUgYSBzdHVkZW50J3MgdHJlbmRcbiAgICAgIFN0dWRlbnQgZG9lc24ndCBwbGF5IHRoZSB2aWRlbywgYnV0IGltbWVkaWF0ZWx5IGdvZXMgdG8gZXhlcmNpc2UgcGFnZVxuICAgICAgdmlkZW8ub25lKCdwbGF5JykgZG9lc24ndCB0cmlnZ2VyLCBleGVyY2lzZSBidXR0b24gaXMgcHJlc3NlZFxuICAgICAgVmFsdWU6IDFcbiAgKi9cbiAgYWRkVmlkZW9EYXRhIChrZXksIHZhbHVlLCB2aWRlb0lkLCB1c2VySWQgPSBudWxsKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmIChrZXkgIT09ICdmZWVkYmFjaycgJiYga2V5ICE9PSAndmlldycgJiYga2V5ICE9PSAnc2tpcCcgJiYga2V5ICE9PSAndmlld0R1cmF0aW9uJykge1xuICAgICAgICByZXNvbHZlKHtzdGF0dXM6IGZhbHNlLCBlcnJNZXNzYWdlOiAnSW52YWxpZCBhbmFseXRpY3Mga2V5ISd9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jcmVhdGUoe1xuICAgICAgICAgIG1vZGVsTmFtZTogJ0FuYWx5dGljcycsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICB0eXBlOiAndmlkZW8nLFxuICAgICAgICAgICAgdXNlcklkLFxuICAgICAgICAgICAgdmlkZW9JZCxcbiAgICAgICAgICAgIG9uQ2xvdWQ6IEFwcENvbmZpZy5DTE9VRF9TRVJWRVJcbiAgICAgICAgICB9XG4gICAgICAgIH0pLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShyZXNwKVxuICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGFkZEV4ZXJjaXNlU3VibWlzc2lvblN0YXRzIChzY29yZVBlcmNlbnRhZ2UsIGF0dGVtcHRzUGVyY2VudGFnZSwgZXhlcmNpc2VJZCwgdXNlcklkKSB7XG4gICAgLy8gdGVzdFxuICAgIGxvZy52ZXJib3NlKFRBRywgYGFkZEV4ZXJjaXNlU3VibWlzc2lvblN0YXRzKCk6IHNjb3JlUGVyY2VudGFnZT0ke3Njb3JlUGVyY2VudGFnZX0gYXR0ZW1wdHNQZXJjZW50YWdlPSR7YXR0ZW1wdHNQZXJjZW50YWdlfSBleGVyY2lzZUlkPSR7ZXhlcmNpc2VJZH0gdXNlcklkPSR7dXNlcklkfWApXG4gICAgcmV0dXJuIFByb21pc2Uuam9pbihcbiAgICAgIHRoaXMuYWRkRXhlcmNpc2VEYXRhKCdjb3JyZWN0QW5zd2VycycsIHNjb3JlUGVyY2VudGFnZSwgZXhlcmNpc2VJZCwgdXNlcklkKSxcbiAgICAgIHRoaXMuYWRkRXhlcmNpc2VEYXRhKCdhdHRlbXB0ZWRBbnN3ZXJzJywgYXR0ZW1wdHNQZXJjZW50YWdlLCBleGVyY2lzZUlkLCB1c2VySWQpXG4gICAgKS5zcHJlYWQoKHJlc3AsIHJlc3AyKSA9PiB7XG4gICAgICBpZiAocmVzcC5zdGF0dXMgJiYgcmVzcDIuc3RhdHVzKSB7XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogdHJ1ZSB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4geyBzdGF1dHM6IGZhbHNlLCBlcnJNZXNzYWdlOiByZXNwLmVyck1lc3NhZ2UgfHwgcmVzcDIuZXJyTWVzc2FnZX1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLypcbiAgICB0eXBlOiAnYmFja1RvVmlkZW8nOlxuICAgICAgVXNlciBnb2VzIGJhY2sgdG8gVGltZXZpZGVvIGZyb20gZXhlcmNpc2UsIGJ5IGNsaWNraW5nICdCYWNrIHRvIFZpZGVvJ1xuICAgICAgVmFsdWU6IDFcblxuICAgIHR5cGU6ICdxdWVzdGlvblRpbWUnOlxuICAgICAgVGltZSBzcGVuZCBiZXR3ZWVuIHF1ZXN0aW9uc1xuICAgICAgVmFsdWU6IHRpbWUgaW4gc2Vjb25kXG5cbiAgICB0eXBlOiAnc2V0VGltZSc6XG4gICAgICBUaW1lIHNwZW5kIGJldHdlZW4gYSBzZXRcbiAgICAgIFZhbHVlOiB0aW1lIGluIHNlY29uZFxuXG4gICAgdHlwZTogJ2NvcnJlY3RBbnN3ZXJzJzpcbiAgICAgIENvcnJlY3QgYW5zd2VyIGluIGEgc2V0IHN1Ym1pc3Npb25cbiAgICAgIFZhbHVlOiBwZXJjZW50YWdlIG92ZXIgYWxsIHF1ZXN0aW9uc1xuXG4gICAgdHlwZTogJ2F0dGVtcHRlZEFuc3dlcnMnOlxuICAgICAgTm9uLWVtcHR5IGFuc3dlcnMgaW4gYSBzZXQgc3VibWlzc2lvblxuICAgICAgVmFsdWU6IHBlcmNlbnRhZ2Ugb3ZlciBhbGwgcXVlc3Rpb25zXG5cbiAgKi9cbiAgYWRkRXhlcmNpc2VEYXRhIChrZXksIHZhbHVlLCBleGVyY2lzZUlkLCB1c2VySWQgPSBudWxsKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmIChrZXkgIT09ICdiYWNrVG9WaWRlbycgJiYga2V5ICE9PSAncXVlc3Rpb25UaW1lJyAmJlxuICAgICAgICAgIGtleSAhPT0gJ3NldFRpbWUnICYmIGtleSAhPT0gJ2NvcnJlY3RBbnN3ZXJzJyAmJiBrZXkgIT09ICdhdHRlbXB0ZWRBbnN3ZXJzJykge1xuICAgICAgICByZXNvbHZlKHtzdGF0dXM6IGZhbHNlLCBlcnJNZXNzYWdlOiAnSW52YWxpZCBhbmFseXRpY3Mga2V5ISd9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jcmVhdGUoe1xuICAgICAgICAgIG1vZGVsTmFtZTogJ0FuYWx5dGljcycsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICB0eXBlOiAnZXhlcmNpc2UnLFxuICAgICAgICAgICAgdXNlcklkLFxuICAgICAgICAgICAgZXhlcmNpc2VJZCxcbiAgICAgICAgICAgIG9uQ2xvdWQ6IEFwcENvbmZpZy5DTE9VRF9TRVJWRVJcbiAgICAgICAgICB9XG4gICAgICAgIH0pLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShyZXNwKVxuICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFuYWx5dGljc1NlcnZpY2VcbiJdfQ==
