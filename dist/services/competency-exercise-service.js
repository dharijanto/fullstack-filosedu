"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),moment=require("moment-timezone"),crud_service_neo_1=require("./crud-service-neo"),course_service_1=require("./course-service"),exercise_generator_1=require("../lib/exercise_generator/exercise-generator"),exercise_helper_1=require("../app/utils/exercise-helper"),topic_exercise_service_1=require("./topic-exercise-service");let path=require("path"),log=require("npmlog"),pug=require("pug"),Sequelize=require("sequelize");const AppConfig=require(path.join(__dirname,"../app-config")),TAG="CompetencyExerciseService";class CompetencyExerciseService extends crud_service_neo_1.default{getExerciseCodes(){return super.read({modelName:"CompetencyExerciseCode",searchClause:{}})}addExerciseCode(e){return super.create({modelName:"CompetencyExerciseCode",data:{code:e.toLowerCase()}})}deleteExerciseCode(e){return super.delete({modelName:"CompetencyExerciseCode",data:{id:e}})}submitExerciseCode(e){return e?super.readOne({modelName:"CompetencyExerciseCode",searchClause:{code:e.toLowerCase()}}).then(e=>{if(e.status&&e.data){const t=e.data;return super.update({modelName:"CompetencyExerciseCode",data:{id:t.id,hits:t.hits+1}})}return{status:!1,errMessage:"Code tidak terdaftar"}}):Promise.resolve({status:!1,errMessage:"Code harus diisi"})}getGeneratedExercise(e){return e?super.readOne({modelName:"GeneratedCompetencyExercise",searchClause:{id:e}}):Promise.resolve({status:!1,errMessage:"competencyExerciseId is required!"})}getTopicExerciseByState(e,t){let s;switch(e){case"exercising":return void 0!==(s=t.find(e=>!e.submitted&&"createdAt"in e))?{status:!0,data:s}:{status:!1,errMessage:"No topic with 'exercising' state!"};case"pendingExercise":return void 0!==(s=t.find(e=>!(e.submitted||"createdAt"in e)))?{status:!0,data:s}:{status:!1,errMessage:"No topic with 'pendingExercise' state!"};default:return{status:!1,errMessage:`Unexpected state: ${e}`}}}getTopicState(e){let t;if(e.createdAt&&e.submitted)t="finished";else if("createdAt"in e||!e.submitted){if("createdAt"in e||e.submitted)return{status:!1,errMessage:"Unexpected state!"};t="pending"}else t="skipped";return{status:!0,data:t}}getExerciseState(e){let t;const s=JSON.parse(e.exerciseDetail||"");if(log.verbose(TAG,"getExerciseState: topics="+JSON.stringify(s,null,2)),e.submitted)t="submitted";else if(e.abandoned)t="abandoned";else if(this.getTopicExerciseByState("exercising",s).status)t="exercising";else if(this.getTopicExerciseByState("pendingExercise",s).status)t="pendingExercise";else{if(void 0!==s.find(e=>!e.submitted))return{status:!1,errMessage:"generatedCompetencyExercise has an invalid state!"};t="finished"}return{status:!0,data:t}}getExerciseStateById(e){return super.readOne({modelName:"GeneratedCompetencyExercise",searchClause:{id:e}}).then(e=>e.status&&e.data?this.getExerciseState(e.data):{status:!1,errMessage:"generatedCompetencyExercise could not be found: "+e.errMessage})}getSubmittedExerciseInformation(e){const t=this.getExerciseState(e);if(t.status&&t.data){if("submitted"===t.data){const t=JSON.parse(e.exerciseDetail||"");return Promise.map(t,e=>{const t=this.getTopicState(e);if(t.status)return course_service_1.default.getTopic(e.topicId).then(s=>{if(s.status&&s.data)return{topicName:s.data.topic,skipped:"skipped"===t.data,score:parseInt(""+e.score,10),idealTime:parseInt(""+e.idealTime,10),timeFinish:""+parseInt(""+e.timeFinish,10),timeScore:function(e,t){return t<=e?100:t>e&&t<=2*e?75:t>2*e&&t<=3*e?50:t>3*e&&t<=4*e?25:0}(e.idealTime,e.timeFinish)};throw new Error(`Failed to get topic information: ${s.errMessage}`)});throw new Error("Failed to get topic state: "+t.errMessage)}).then(e=>({status:!0,data:e}))}return Promise.resolve({status:!1,errMessage:"Only 'submitted' exercise can be processed!"})}return Promise.resolve({status:!1,errMessage:`Failed to get exercise state: ${t.errMessage}`})}getPendingTopicInformation(e){const t=this.getExerciseState(e);if(!t.status||!t.data)return Promise.resolve({status:!1,errMessage:`Failed to get exercise state: ${t.errMessage}`});if("pendingExercise"!==t.data)return Promise.resolve({status:!1,errMessage:"Only information about 'pendingExercise' can be retrieved!"});{const t=JSON.parse(e.exerciseDetail||"");let s,r=null;for(s=0;s<t.length;s++){const e=t[s];if(!e.submitted&&void 0===e.createdAt){r=t[s];break}}if(null===r)return Promise.resolve({status:!1,errMessage:"Couldn't retrieve pending generatedTopicExercise!"});try{const e=JSON.parse(r.exerciseDetail||""),{questionQuantity:i,idealTime:a}=e.reduce(({questionQuantity:e,idealTime:t},s)=>({questionQuantity:e+JSON.parse(s.knowns).length,idealTime:t+s.idealTime}),{questionQuantity:0,idealTime:0});return course_service_1.default.getTopic(r.topicId).then(e=>e.status&&e.data?{status:!0,data:{topicName:e.data.topic,topicNo:s+1,topicQuantity:t.length,questionQuantity:i,idealTime:a}}:{status:!1,errMessage:`Failed to retrieve topic: ${e.errMessage}`})}catch(e){return Promise.reject(e)}}}startExercise(e){const t=this.getExerciseState(e);if(t.status&&t.data){if("pendingExercise"===t.data){const t=JSON.parse(e.exerciseDetail),s=t.findIndex(e=>!(e.submitted||"createdAt"in e));return-1!==s?(t[s].createdAt=moment().local().format("YYYY-MM-DD HH:mm:ss"),console.dir("Updateing generatedTopicExercises to be: "+JSON.stringify(t,null,2)),super.update({modelName:"GeneratedCompetencyExercise",data:{id:e.id,exerciseDetail:JSON.stringify(t)}}).then(t=>t.status?this.getGeneratedExercise(e.id).then(e=>e.status&&e.data?this.continueExercise(e.data):{status:!1,errMessage:"Failed to get generatedExercise!"}):{status:!1,errMessage:"Failed to update generatedCompetencyExercise!"})):Promise.resolve({status:!1,errMessage:"There is no topic exercise to start!"})}return Promise.resolve({status:!1,errMessage:"Only 'pendingExercise' can be started!"})}return Promise.resolve({status:!1,errMessage:`Failed to get exercise state: ${t.errMessage}`})}continueExercise(e){const t=this.getExerciseState(e);return t.status&&t.data?"exercising"===t.data?this.formatExercise(e):Promise.resolve({status:!1,errMessage:`Only 'exercising' can be continued! Exercise state=${t.data}`}):Promise.resolve({status:!1,errMessage:`Failed to get exercise state: ${t.errMessage}`})}submitExercise(e,{name:t,phone:s,email:r}){return this.getGeneratedExercise(e).then(i=>{if(i.status&&i.data){const e=i.data,a=this.getExerciseState(e);if(a.status&&a.data){if("finished"===a.data){const i=JSON.parse(e.exerciseDetail).reduce((e,t)=>e+(t.score||0),0);return super.update({modelName:"GeneratedCompetencyExercise",data:{id:e.id,score:i,submitted:!0,name:t,phone:s,email:r}})}return Promise.resolve({status:!1,errMessage:"Unexpected exercise state: 'resp2.data'"})}return Promise.resolve({status:!1,errMessage:"Failed to get exercise state: "+a.errMessage})}return{status:!1,errMessage:`Failed to getGeneratedExercise: ${e}`}})}abandonExercise(e,t){const s=this.getExerciseState(e);return s.status&&s.data?"finished"!==s.data?super.update({modelName:"GeneratedCompetencyExercise",data:{id:e.id,abandoned:!0,submitted:!1,userId:t}}):Promise.resolve({status:!1,errMessage:"'finished' exercise can't be abandoned!"}):Promise.resolve({status:!1,errMessage:`Failed to get exercise state: ${s.errMessage}`})}skipTopic(e){const t=this.getExerciseState(e);if(t.status&&t.data){if("pendingExercise"===t.data){const t=JSON.parse(e.exerciseDetail),s=this.getTopicExerciseByState("pendingExercise",t);if(s.status&&s.data){return s.data.submitted=!0,super.update({modelName:"GeneratedCompetencyExercise",data:{id:e.id,exerciseDetail:JSON.stringify(t)}})}return Promise.resolve({status:!1,errMessage:`Failed to get pending exercise: ${s.errMessage}`})}return Promise.resolve({status:!1,errMessage:"Only exercie with 'pendingExercise' state can be skipped!"})}return Promise.resolve({status:!1,errMessage:`Failed to get exercise state: ${t.errMessage}`})}formatExercise(e){const t=JSON.parse(e.exerciseDetail),s=this.getTopicExerciseByState("exercising",t);if(s.status&&s.data){const e=s.data;return topic_exercise_service_1.default.formatExercise(e).then(e=>e.status&&e.data?e:{status:!1,errMessage:`Failed to format generatedTopicExercise: ${e.errMessage}`})}return Promise.resolve({status:!1,errMessage:"Unable to find topic exercise with 'exercising' state!"})}submitTopicAnswer(e,t){throw new Error("Not implemented yet!")}getExerciseHash(){return course_service_1.default.getOrderedTopics().then(e=>{if(e.status&&e.data){const t=e.data;return Promise.map(t,e=>topic_exercise_service_1.default.getExercisesHash(e.id).then(t=>{if(t.status&&t.data)return t.data;throw new Error(`Failed to get hash for topic with id=${e.id}: ${t.errMessage}`)})).then(e=>({status:!0,data:this.getHashFromTopicHashes(e)}))}return{status:!1,errMessage:`Failed to retrieved topics: ${e.errMessage}`}})}getHashFromTopicHashes(e){const t=e.reduce((e,t)=>e+t,"");return exercise_generator_1.default.getHash(t)}generateAndSaveExercise(e){return this.generateExercise().then(t=>{if(t.status&&t.data){const s=t.data;return this.create({modelName:"GeneratedCompetencyExercise",data:{submitted:!1,abandoned:!1,hash:s.hash,onCloud:AppConfig.CLOUD_SERVER,exerciseDetail:s.exerciseDetail,userId:e}})}return{status:!1,errMessage:`Failed to generate exercise: ${t.errMessage}`}})}generateExercise(){return course_service_1.default.getOrderedTopics().then(e=>{if(e.status&&e.data){const t=e.data;return Promise.map(t,e=>topic_exercise_service_1.default.generateExercise(e.id,"competencyQuantity").then(t=>{if(t.data&&t.status){const s=t.data;return{topicId:e.id,topicExerciseHash:s.topicExerciseHash,idealTime:s.idealTime,exerciseDetail:s.exerciseDetail}}throw new Error(`Failed to generate exercise for topic: ${e.id}: ${t.errMessage}`)})).then(e=>{const t=e.filter(e=>{return JSON.parse(e.exerciseDetail||"").length>0});return{status:!0,data:{hash:this.getHashFromTopicHashes(e.map(e=>e.topicExerciseHash||"")),topics:e,exerciseDetail:JSON.stringify(t)}}})}return{status:!1,errMessage:`Failed to retrieve topics: ${e.errMessage}`}})}submitTopicExercise(e,t){return this.getGeneratedExercise(e).then(e=>{if(e.status&&e.data){const s=e.data,r=this.getExerciseState(s);if(r.status&&r.data){const e=r.data;if(console.log("Exercise state="+e),"exercising"===e){const e=JSON.parse(s.exerciseDetail),r=this.getTopicExerciseByState("exercising",e);if(r.status&&r.data){const i=r.data,a=JSON.parse(i.exerciseDetail);return topic_exercise_service_1.default.gradeExercise(a,t).then(r=>r.status&&r.data?(i.submitted=!0,i.submittedAt=moment().local().format("YYYY-MM-DD HH:mm:ss"),i.score=r.data.score,i.timeFinish=exercise_helper_1.default.countTimeFinish(i.createdAt),i.exerciseDetail=JSON.stringify(topic_exercise_service_1.default.insertAnswers(a,t)),super.update({modelName:"GeneratedCompetencyExercise",data:{id:s.id,exerciseDetail:JSON.stringify(e)}})):{status:!1,errMessage:`Failed to grade exercise: ${r.errMessage}`})}return{status:!1,errMessage:`Failed to get 'exercising' exercise: ${r.errMessage}`}}return{status:!1,errMessage:`Expecting 'exercising' state, but get '${e}' instead!`}}return{status:!1,errMessage:`Failed to getExerciseState: ${r.errMessage}`}}return{status:!1,errMessage:`Failed to getGeneratedExercise: ${e.errMessage}`}})}}exports.default=new CompetencyExerciseService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
