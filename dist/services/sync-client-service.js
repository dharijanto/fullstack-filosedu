const path=require("path"),zlib=require("zlib"),axios=require("axios"),md5=require("md5"),Sequelize=require("sequelize"),AppConfig=require(path.join(__dirname,"../app-config")),CRUDService=require(path.join(__dirname,"crud-service")),TAG="SyncService";class SyncService extends CRUDService{constructor(e,t){super(e,t),this.schoolIdentifier=AppConfig.LOCAL_SCHOOL_INFORMATION.identifier}findAllUser(){return this.readOne({modelName:"School",searchClause:{identifier:this.schoolIdentifier}}).then(e=>e.status?this.read({modelName:"User",searchClause:{schoolId:e.data.id}}):e)}findAnalytics(e,t,r){return this.read({modelName:"Analytics",searchClause:{userId:e,updatedAt:{[Sequelize.Op.and]:{[Sequelize.Op.gte]:t,[Sequelize.Op.lte]:r}},onCloud:!1},order:[["updatedAt","DESC"]]})}findSubmittedGeneratedExercises(e,t,r){return this.read({modelName:"GeneratedExercise",searchClause:{userId:e,updatedAt:{[Sequelize.Op.and]:{[Sequelize.Op.gte]:t,[Sequelize.Op.lte]:r}},submitted:!0,onCloud:!1}})}findSubmittedGeneratedTopicExercises(e,t,r){return this.read({modelName:"GeneratedTopicExercise",searchClause:{userId:e,updatedAt:{[Sequelize.Op.and]:{[Sequelize.Op.gte]:t,[Sequelize.Op.lte]:r}},submitted:!0,onCloud:!1}})}findWatchedVideos(e,t,r){return this.read({modelName:"WatchedVideo",searchClause:{userId:e,updatedAt:{[Sequelize.Op.and]:{[Sequelize.Op.gte]:t,[Sequelize.Op.lte]:r}},onCloud:!1}})}sendData(e,t){return new Promise((r,i)=>{this.getServerHash().then(a=>{if(a.status){const s=new Buffer(JSON.stringify({data:{school:{identifier:this.schoolIdentifier,serverHash:a.data.serverHash},users:e,syncTime:t}}),"utf-8");zlib.gzip(s,function(e,t){e?i(e):axios.post(`${AppConfig.CLOUD_INFORMATION.HOST}/synchronization/start`,t,{headers:{"Content-Type":"application/json","Content-Encoding":"gzip"}}).then(e=>{r(e.data)}).catch(i)})}else r(a)}).catch(e=>{i(e)})})}getSyncHistories(){return axios.get(`${AppConfig.CLOUD_INFORMATION.HOST}/synchronization/histories?schoolIdentifier=${this.schoolIdentifier}`).then(e=>{return e.data})}isServerReadyToSync(){return axios.get(`${AppConfig.CLOUD_INFORMATION.HOST}/synchronization/readyToSync?schoolIdentifier=${this.schoolIdentifier}`).then(e=>{const t=e.data;if(t.status){const e=t.data.lastSync;return e?{status:!0,data:{lastSync:e}}:{status:!1,errMessage:"Server does not return lastSync date!"}}return t})}getServerHash(){return this.readOne({modelName:"LocalMetaData",searchClause:{key:"SERVER_HASH"}}).then(e=>e.status?e:this.create({modelName:"LocalMetaData",data:{key:"SERVER_HASH",value:md5(""+new Date)}})).then(e=>{if(e.status){const t=e.data.value;if(t)return{status:!0,data:{serverHash:t}};throw new Error("Server hash is expected but not found!")}return e})}}module.exports=SyncService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
