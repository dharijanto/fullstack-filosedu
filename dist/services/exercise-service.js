"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),exercise_generator_1=require("../lib/exercise_generator/exercise-generator"),crud_service_neo_1=require("./crud-service-neo");let path=require("path"),log=require("npmlog"),pug=require("pug"),moment=require("moment"),Sequelize=require("sequelize");const AppConfig=require(path.join(__dirname,"../app-config")),TAG="ExerciseService";class ExerciseService extends crud_service_neo_1.default{getExercise(e){return this.readOne({modelName:"Exercise",searchClause:{id:e},include:[{model:this.getModels("Subtopic"),include:[{model:this.getModels("Topic")}]}]})}generateExercise(e,r=!1){let s=exercise_generator_1.default.getExerciseSolver(e.data),t=[];t=r?s.generateTopicQuestions():s.generateQuestions();let i=[],n=[],a=[],u=[];return t.forEach(e=>{u.push(s.formatQuestion(e.knowns)),i.push(e.knowns),n.push(e.unknowns),a.push(Object.keys(e.unknowns))}),Promise.all(u).then(r=>({status:!0,data:{exerciseData:{knowns:JSON.stringify(i),unknowns:JSON.stringify(n),userAnswer:[],exerciseId:e.id,idealTime:s.getExerciseIdealTime()},formatted:{renderedQuestions:r,unknowns:a}}}))}formatExercise(e,r){let s=JSON.parse(e.knowns),t=JSON.parse(e.unknowns);return Promise.join(Promise.map(s,e=>r.formatQuestion(e)),Promise.map(t,e=>Object.keys(e))).spread((r,s)=>{return{formatted:{renderedQuestions:r,unknowns:s},exerciseId:e.exerciseId,idealTime:e.idealTime}})}saveGeneratedExercise(e,r,s){return this.getModels("GeneratedExercise").destroy({where:{userId:e,exerciseId:r.exerciseId,submitted:!1,onCloud:AppConfig.CLOUD_SERVER}}).then(()=>this.create({modelName:"GeneratedExercise",data:{exerciseHash:s,knowns:r.knowns,unknowns:r.unknowns,exerciseId:r.exerciseId,userId:e,idealTime:r.idealTime,onCloud:AppConfig.CLOUD_SERVER}}))}updateGeneratedExercise(e){return this.update({modelName:"GeneratedExercise",data:e})}getGeneratedExercise({userId:e,exerciseId:r}){return this.readOne({modelName:"GeneratedExercise",searchClause:{userId:e,exerciseId:r,submitted:!1,onCloud:AppConfig.CLOUD_SERVER}})}getSubmittedExercises({userId:e,exerciseId:r}){return this.read({modelName:"GeneratedExercise",searchClause:{userId:e,exerciseId:r,submitted:!0}})}getExerciseStars(e,r){return this.getSequelize().query(`\nSELECT score FROM generatedExercises\nWHERE submitted = 1 AND userId = ${e} AND exerciseId = ${r}\nORDER BY score DESC LIMIT 4;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>{return{status:!0,data:{stars:e.reduce((e,r)=>parseInt(r.score,10)>=80?e+1:e,0)}}})}getRenderedExerciseStars(e,r){return this.getExerciseStars(e,r).then(e=>{if(e.status){const r=e.data.stars;return{status:!0,data:pug.renderFile(path.join(__dirname,"../app/views/non-pages/stars.pug"),{stars:r})}}return e})}getSubtopicStar(e,r){return this.read({modelName:"Exercise",searchClause:{subtopicId:r}}).then(r=>Promise.map(r.data||[],r=>this.getExerciseStars(e,r.id)).then(e=>{return{status:!0,data:{stars:e.reduce((e,r)=>e+r.data.stars,0)/(e.length||1)}}}))}getExerciseTimers(e,r){return this.getSequelize().query(`\nSELECT score FROM generatedExercises\nWHERE submitted = 1 AND userId = ${e} AND exerciseId = ${r}\nAND timeFinish < idealTime AND score = 100\nORDER BY score DESC LIMIT 4;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>{return{status:!0,data:{timers:e.reduce((e,r)=>parseInt(r.score,10)>=100?e+1:e,0)}}})}getRenderedExerciseTimers(e,r){return this.getExerciseTimers(e,r).then(e=>{if(e.status){const r=e.data.timers;return{status:!0,data:pug.renderFile(path.join(__dirname,"../app/views/non-pages/timers.pug"),{timers:r})}}return e})}getSubtopicExerciseTimers(e,r){return this.read({modelName:"Exercise",searchClause:{subtopicId:r}}).then(r=>Promise.map(r.data||[],r=>this.getExerciseTimers(e,r.id)).then(e=>{return{status:!0,data:{timers:e.reduce((e,r)=>e+r.data.timers,0)/(e.length||1)}}}))}getExerciseRanking(e){return this.getSequelize().query(`SELECT MIN(timeFinish) AS timeFinish, userId, users.fullName AS fullName, users.grade AS grade, schools.name AS schoolName\nFROM generatedExercises INNER JOIN users ON users.id = generatedExercises.userId INNER JOIN schools ON schools.id = users.schoolId\nWHERE submitted = TRUE AND exerciseId = ${e} AND score = 100 AND timeFinish IS NOT NULL GROUP BY userId ORDER BY MIN(timeFinish) LIMIT 10;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>({status:!0,data:e}))}getExerciseLeaderboard(e){return this.getExerciseRanking(e).then(e=>{if(e.status){const r=e.data;return{status:!0,data:pug.renderFile(path.join(__dirname,"../app/views/non-pages/ranking.pug"),{exerciseData:r})}}return e})}getCurrentRanking(e,r){return new Promise((s,t)=>{let i=`SELECT COUNT(*) AS total\n  FROM (SELECT COUNT(*) FROM generatedExercises\n  WHERE submitted = TRUE AND timeFinish < ${e} AND\n        exerciseId = ${r} AND score = 100 AND timeFinish IS NOT NULL\n  GROUP BY userId\n  ORDER BY MIN(timeFinish)) AS totalrow;`;return this.getSequelize().query(i,{type:Sequelize.QueryTypes.SELECT}).then(e=>{s({status:!0,data:{count:e[0].total}})}).catch(e=>{t(e)})})}getTotalRanking(e){return new Promise((r,s)=>{let t=`SELECT COUNT(*) AS total\nFROM (SELECT COUNT(*) FROM generatedExercises WHERE submitted = TRUE AND exerciseId = ${e}\n                      AND score = 100 AND timeFinish IS NOT NULL\nGROUP BY userId\nORDER BY MIN(timeFinish)) AS totalrow;`;return this.getSequelize().query(t,{type:Sequelize.QueryTypes.SELECT}).then(e=>{r({status:!0,data:{count:e[0].total}})}).catch(e=>{s(e)})})}}exports.default=new ExerciseService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
