"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),exercise_generator_1=require("../lib/exercise_generator/exercise-generator"),crud_service_neo_1=require("./crud-service-neo");let path=require("path"),log=require("npmlog"),pug=require("pug"),moment=require("moment"),Sequelize=require("sequelize");const AppConfig=require(path.join(__dirname,"../app-config")),Utils=require(path.join(__dirname,"../lib/utils")),TAG="ExerciseService";class ExerciseService extends crud_service_neo_1.default{getFormattedExercise(e,r){return Promise.join(this.getExercise(e),this.getGeneratedExercise({userId:r,exerciseId:e})).spread((e,s)=>{if(e.status&&e.data){const t=e.data,i=exercise_generator_1.default.getHash(t.data);if(s.status&&s.data&&s.data.exerciseHash===i){const e=s.data;return this.formatExercise(t,e)}if(s.status&&s.data&&s.data.exerciseHash!==i||!s.status)return this.generateAndSaveExercise(t,r).then(e=>e.status&&e.data?this.formatExercise(t,e.data):{status:!1,errMessage:e.errMessage});throw new Error(`Unexpected error: resp1=${JSON.stringify(e)} resp2=${JSON.stringify(s)}`)}throw new Error("Failed to retrieve exercise: "+e.errMessage)})}getExercise(e){return this.readOne({modelName:"Exercise",searchClause:{id:e},include:[{model:this.getModels("Subtopic"),include:[{model:this.getModels("Topic")}]}]})}generateAndSaveExercise(e,r){return this.generateExercise(e).then(s=>{if(s.status&&s.data){const t=s.data;return this.getModels("GeneratedExercise").destroy({where:{userId:r,exerciseId:e.id,submitted:!1,onCloud:AppConfig.CLOUD_SERVER}}).then(()=>this.create({modelName:"GeneratedExercise",data:{exerciseHash:t.exerciseHash,knowns:t.knowns,unknowns:t.unknowns,exerciseId:t.exerciseId,userId:r,idealTime:t.idealTime,onCloud:AppConfig.CLOUD_SERVER}}))}return{status:!1,errMessage:s.errMessage}})}formatExercise(e,r){const s=exercise_generator_1.default.getExerciseSolver(e.data),t=JSON.parse(r.knowns),i=JSON.parse(r.unknowns);return Promise.join(Promise.map(t,e=>s.formatQuestion(e)),Promise.map(i,e=>Object.keys(e))).spread((s,t)=>({status:!0,data:{exerciseId:e.id,idealTime:r.idealTime,elapsedTime:Utils.getElapsedTime(r.createdAt),formattedExercise:{renderedQuestions:s,unknowns:t}}}))}generateExercise(e,r=!1){let s=exercise_generator_1.default.getExerciseSolver(e.data),t=r?s.generateTopicQuestions():s.generateQuestions(),i=[],a=[],n=[];return t.forEach(e=>{i.push(e.knowns),a.push(e.unknowns),n.push(Object.keys(e.unknowns))}),Promise.all([]).then(r=>({status:!0,data:{exerciseHash:exercise_generator_1.default.getHash(e.data),knowns:JSON.stringify(i),unknowns:JSON.stringify(a),submitted:!1,idealTime:s.getExerciseIdealTime(),exerciseId:e.id}}))}saveGeneratedExercise(e,r,s){return this.getModels("GeneratedExercise").destroy({where:{userId:e,exerciseId:r.exerciseId,submitted:!1,onCloud:AppConfig.CLOUD_SERVER}}).then(()=>this.create({modelName:"GeneratedExercise",data:{exerciseHash:s,knowns:r.knowns,unknowns:r.unknowns,exerciseId:r.exerciseId,userId:e,idealTime:r.idealTime,onCloud:AppConfig.CLOUD_SERVER}}))}updateGeneratedExercise(e){return this.update({modelName:"GeneratedExercise",data:e})}getGeneratedExercise({userId:e,exerciseId:r}){return this.readOne({modelName:"GeneratedExercise",searchClause:{userId:e,exerciseId:r,submitted:!1,onCloud:AppConfig.CLOUD_SERVER}})}getSubmittedExercises({userId:e,exerciseId:r}){return this.read({modelName:"GeneratedExercise",searchClause:{userId:e,exerciseId:r,submitted:!0}})}getExerciseStars(e,r){return this.getSequelize().query(`\nSELECT score FROM generatedExercises\nWHERE submitted = 1 AND userId = ${e} AND exerciseId = ${r}\nORDER BY score DESC LIMIT 4;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>{return{status:!0,data:{stars:e.reduce((e,r)=>parseInt(r.score,10)>=80?e+1:e,0)}}})}getRenderedExerciseStars(e,r){return this.getExerciseStars(e,r).then(e=>{if(e.status){const r=e.data.stars;return{status:!0,data:pug.renderFile(path.join(__dirname,"../app/views/non-pages/stars.pug"),{stars:r})}}return e})}getSubtopicStar(e,r){return this.read({modelName:"Exercise",searchClause:{subtopicId:r}}).then(r=>Promise.map(r.data||[],r=>this.getExerciseStars(e,r.id)).then(e=>{return{status:!0,data:{stars:e.reduce((e,r)=>e+r.data.stars,0)/(e.length||1)}}}))}getExerciseTimers(e,r){return this.getSequelize().query(`\nSELECT score FROM generatedExercises\nWHERE submitted = 1 AND userId = ${e} AND exerciseId = ${r}\nAND timeFinish < idealTime AND score = 100\nORDER BY score DESC LIMIT 4;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>{return{status:!0,data:{timers:e.reduce((e,r)=>parseInt(r.score,10)>=100?e+1:e,0)}}})}getRenderedExerciseTimers(e,r){return this.getExerciseTimers(e,r).then(e=>{if(e.status){const r=e.data.timers;return{status:!0,data:pug.renderFile(path.join(__dirname,"../app/views/non-pages/timers.pug"),{timers:r})}}return e})}getSubtopicExerciseTimers(e,r){return this.read({modelName:"Exercise",searchClause:{subtopicId:r}}).then(r=>Promise.map(r.data||[],r=>this.getExerciseTimers(e,r.id)).then(e=>{return{status:!0,data:{timers:e.reduce((e,r)=>e+r.data.timers,0)/(e.length||1)}}}))}getExerciseRanking(e){return this.getSequelize().query(`SELECT MIN(timeFinish) AS timeFinish, userId, users.fullName AS fullName, users.grade AS grade, schools.name AS schoolName\nFROM generatedExercises INNER JOIN users ON users.id = generatedExercises.userId INNER JOIN schools ON schools.id = users.schoolId\nWHERE submitted = TRUE AND exerciseId = ${e} AND score = 100 AND timeFinish IS NOT NULL GROUP BY userId ORDER BY MIN(timeFinish) LIMIT 10;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>({status:!0,data:e}))}getExerciseLeaderboard(e){return this.getExerciseRanking(e).then(e=>{if(e.status){const r=e.data;return{status:!0,data:pug.renderFile(path.join(__dirname,"../app/views/non-pages/ranking.pug"),{exerciseData:r})}}return e})}getCurrentRanking(e,r){return new Promise((s,t)=>{let i=`SELECT COUNT(*) AS total\n  FROM (SELECT COUNT(*) FROM generatedExercises\n  WHERE submitted = TRUE AND timeFinish < ${e} AND\n        exerciseId = ${r} AND score = 100 AND timeFinish IS NOT NULL\n  GROUP BY userId\n  ORDER BY MIN(timeFinish)) AS totalrow;`;return this.getSequelize().query(i,{type:Sequelize.QueryTypes.SELECT}).then(e=>{s({status:!0,data:{count:e[0].total}})}).catch(e=>{t(e)})})}getTotalRanking(e){return new Promise((r,s)=>{let t=`SELECT COUNT(*) AS total\nFROM (SELECT COUNT(*) FROM generatedExercises WHERE submitted = TRUE AND exerciseId = ${e}\n                      AND score = 100 AND timeFinish IS NOT NULL\nGROUP BY userId\nORDER BY MIN(timeFinish)) AS totalrow;`;return this.getSequelize().query(t,{type:Sequelize.QueryTypes.SELECT}).then(e=>{r({status:!0,data:{count:e[0].total}})}).catch(e=>{s(e)})})}}exports.default=new ExerciseService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXJ2aWNlcy9leGVyY2lzZS1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbIlByb21pc2UiLCJyZXF1aXJlIiwiZXhlcmNpc2VfZ2VuZXJhdG9yXzEiLCJjcnVkX3NlcnZpY2VfbmVvXzEiLCJwYXRoIiwibG9nIiwicHVnIiwibW9tZW50IiwiU2VxdWVsaXplIiwiQXBwQ29uZmlnIiwiam9pbiIsIl9fZGlybmFtZSIsIlV0aWxzIiwiVEFHIiwiRXhlcmNpc2VTZXJ2aWNlIiwiZGVmYXVsdCIsIltvYmplY3QgT2JqZWN0XSIsImV4ZXJjaXNlSWQiLCJ1c2VySWQiLCJ0aGlzIiwiZ2V0RXhlcmNpc2UiLCJnZXRHZW5lcmF0ZWRFeGVyY2lzZSIsInNwcmVhZCIsInJlc3AxIiwicmVzcDIiLCJzdGF0dXMiLCJkYXRhIiwiZXhlcmNpc2UiLCJleGVyY2lzZUhhc2giLCJnZXRIYXNoIiwiZ2VuZXJhdGVkRXhlcmNpc2UiLCJmb3JtYXRFeGVyY2lzZSIsImdlbmVyYXRlQW5kU2F2ZUV4ZXJjaXNlIiwidGhlbiIsInJlc3AiLCJlcnJNZXNzYWdlIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwicmVhZE9uZSIsIm1vZGVsTmFtZSIsInNlYXJjaENsYXVzZSIsImlkIiwiaW5jbHVkZSIsIm1vZGVsIiwiZ2V0TW9kZWxzIiwiZ2VuZXJhdGVFeGVyY2lzZSIsInVuc2F2ZWRHZW5lcmF0ZWRFeGVyY2lzZSIsImRlc3Ryb3kiLCJ3aGVyZSIsInN1Ym1pdHRlZCIsIm9uQ2xvdWQiLCJDTE9VRF9TRVJWRVIiLCJjcmVhdGUiLCJrbm93bnMiLCJ1bmtub3ducyIsImlkZWFsVGltZSIsInNvbHZlciIsImdldEV4ZXJjaXNlU29sdmVyIiwicGFyc2UiLCJtYXAiLCJrbm93biIsImZvcm1hdFF1ZXN0aW9uIiwidW5rbm93biIsIk9iamVjdCIsImtleXMiLCJyZW5kZXJlZFF1ZXN0aW9ucyIsImVsYXBzZWRUaW1lIiwiZ2V0RWxhcHNlZFRpbWUiLCJjcmVhdGVkQXQiLCJmb3JtYXR0ZWRFeGVyY2lzZSIsInRvcGljT3JTdWJ0b3BpYyIsImV4ZXJjaXNlU29sdmVyIiwicXVlc3Rpb25zIiwiZ2VuZXJhdGVUb3BpY1F1ZXN0aW9ucyIsImdlbmVyYXRlUXVlc3Rpb25zIiwidW5rbm93bnNWYXJpYWJsZXMiLCJmb3JFYWNoIiwicXVlc3Rpb24iLCJwdXNoIiwiYWxsIiwiZ2V0RXhlcmNpc2VJZGVhbFRpbWUiLCJ1cGRhdGUiLCJyZWFkIiwiZ2V0U2VxdWVsaXplIiwicXVlcnkiLCJ0eXBlIiwiUXVlcnlUeXBlcyIsIlNFTEVDVCIsImRhdGFzIiwic3RhcnMiLCJyZWR1Y2UiLCJhY2MiLCJwYXJzZUludCIsInNjb3JlIiwiZ2V0RXhlcmNpc2VTdGFycyIsInJlbmRlckZpbGUiLCJzdWJ0b3BpY0lkIiwibGVuZ3RoIiwidGltZXJzIiwiZ2V0RXhlcmNpc2VUaW1lcnMiLCJnZXRFeGVyY2lzZVJhbmtpbmciLCJleGVyY2lzZURhdGEiLCJ0aW1lRmluaXNoIiwicmVzb2x2ZSIsInJlamVjdCIsInF1ZXJ5REIiLCJjb3VudCIsInRvdGFsIiwiY2F0Y2giLCJlcnIiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoib0VBQUEsTUFBQUEsUUFBQUMsUUFBQSxZQUNBQyxxQkFBQUQsUUFBQSxnREFDQUUsbUJBQUFGLFFBQUEsc0JBSUEsSUFBSUcsS0FBT0gsUUFBUSxRQUVmSSxJQUFNSixRQUFRLFVBQ2RLLElBQU1MLFFBQVEsT0FDZE0sT0FBU04sUUFBUSxVQUNqQk8sVUFBWVAsUUFBUSxhQUV4QixNQUFNUSxVQUFZUixRQUFRRyxLQUFLTSxLQUFLQyxVQUFXLGtCQUN6Q0MsTUFBUVgsUUFBUUcsS0FBS00sS0FBS0MsVUFBVyxpQkFDckNFLElBQU0sd0JBV1pDLHdCQUE4QlgsbUJBQUFZLFFBRzVCQyxxQkFBc0JDLEVBQVlDLEdBQ2hDLE9BQU9sQixRQUFRVSxLQUNiUyxLQUFLQyxZQUFZSCxHQUNqQkUsS0FBS0Usc0JBQXVCSCxPQUFBQSxFQUFRRCxXQUFBQSxLQUNwQ0ssT0FBTyxDQUFDQyxF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T3pFLEVBQUssR0FBRzBFLFdBQzlDQyxNQUFNQyxJQUNQTCxFQUFPSyxPQU1mOUYsZ0JBQWlCQyxHQUNmLE9BQU8sSUFBSWpCLFFBQVEsQ0FBQ3dHLEVBQVNDLEtBQzNCLElBQUlDLHFIQUM4RXpGLCtIQUlsRixPQUFPRSxLQUFLaUUsZUFBZUMsTUFBTXFCLEdBQzdCcEIsS0FBTTlFLFVBQVUrRSxXQUFXQyxTQUFVdkQsS0FBS0MsSUFDMUNzRSxHQUFVL0UsUUFBUSxFQUFNQyxNQUFRaUYsTUFBT3pFLEVBQUssR0FBRzBFLFdBQzlDQyxNQUFNQyxJQUNQTCxFQUFPSyxRQU1qQkMsUUFBQWhHLFFBQWUsSUFBSUQiLCJmaWxlIjoic2VydmljZXMvZXhlcmNpc2Utc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnXG5pbXBvcnQgRXhlcmNpc2VHZW5lcmF0b3IgZnJvbSAnLi4vbGliL2V4ZXJjaXNlX2dlbmVyYXRvci9leGVyY2lzZS1nZW5lcmF0b3InXG5pbXBvcnQgQ1JVRFNlcnZpY2UgZnJvbSAnLi9jcnVkLXNlcnZpY2UtbmVvJ1xuaW1wb3J0IEJydXRlZm9yY2VTb2x2ZXIsIHsgR2VuZXJhdGVkUXVlc3Rpb25EYXRhIH0gZnJvbSAnLi4vbGliL2V4ZXJjaXNlX2dlbmVyYXRvci9leGVyY2lzZV9zb2x2ZXJzL2JydXRlZm9yY2Utc29sdmVyJ1xuaW1wb3J0IENvdXJzZVNlcnZpY2UgZnJvbSAnLi9jb3Vyc2Utc2VydmljZSdcblxubGV0IHBhdGggPSByZXF1aXJlKCdwYXRoJylcblxubGV0IGxvZyA9IHJlcXVpcmUoJ25wbWxvZycpXG5sZXQgcHVnID0gcmVxdWlyZSgncHVnJylcbmxldCBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKVxubGV0IFNlcXVlbGl6ZSA9IHJlcXVpcmUoJ3NlcXVlbGl6ZScpXG5cbmNvbnN0IEFwcENvbmZpZyA9IHJlcXVpcmUocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL2FwcC1jb25maWcnKSlcbmNvbnN0IFV0aWxzID0gcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vbGliL3V0aWxzJykpXG5jb25zdCBUQUcgPSAnRXhlcmNpc2VTZXJ2aWNlJ1xuXG4vKlxuICBJbXBvcnRhbnQgTm90ZTpcbiAgICBnZW5lcmF0ZWRFeGVyY2lzZXMgYW5kIGdlbmVyYXRlZFRvcGljRXhlcmNpc2VzIGhhcyAnb25DbG91ZCcgY29sdW1uXG4gICAgd2hpY2ggaW5kaWNhdGUgdGhhdCB0aGUgZGF0YSBpcyBhbHJlYWR5IG9uIHRoZSBjbG91ZCBhbmQgd2UgZG9uJ3QgbmVlZCB0b1xuICAgIHNlbmQgdGhlbSBhZ2FpbiB3aGVuIHN5bmNpbmcuIFNpbmNlIGFsbCByb3dzIHdpdGggb25DbG91ZCA9PT0gdHJ1ZVxuICAgIHdvdWxkbid0IGJlIHN5bmNlZCB0byB0aGUgc2VydmVyLCB3ZSBzaG91bGRuJ3QgcmVzdG9yZSBnZW5lcmF0ZWRFeGVyY2lzZXNcbiAgICBvciBnZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlcyB3aG9zZSBvbkNsb3VkICE9IEFwcENvbmZpZy5DTE9VRF9TRVJWRVIuXG4gICAgUmVtZW1iZXIgdG8gc2V0IHRoZSB2YWx1ZSBwcm9wZXJseSFcbiovXG5jbGFzcyBFeGVyY2lzZVNlcnZpY2UgZXh0ZW5kcyBDUlVEU2VydmljZSB7XG4gIC8vIEdldCBhIEdlbmVyYXRlZEV4ZXJjaXNlIGluIGEgZm9ybWF0IHJlYWR5IGZvciB1c2UuIElmIHRoZXJlJ3MgcHJldmlvdXNseSBnZW5lcmF0ZWRcbiAgLy8gdGhhdCBoYXNuJ3QgYmVlbiBzdWJtaXR0ZWQsIHRoaXMgd2lsbCByZXN0b3JlIGl0LiBPdGhlcndpc2UsIGl0J2xsIGdlbmVyYXRlIG9uZS5cbiAgZ2V0Rm9ybWF0dGVkRXhlcmNpc2UgKGV4ZXJjaXNlSWQsIHVzZXJJZCk6IFByb21pc2U8TkNSZXNwb25zZTxGb3JtYXR0ZWRTdWJ0b3BpY0V4ZXJjaXNlPj4ge1xuICAgIHJldHVybiBQcm9taXNlLmpvaW48YW55PihcbiAgICAgIHRoaXMuZ2V0RXhlcmNpc2UoZXhlcmNpc2VJZCksXG4gICAgICB0aGlzLmdldEdlbmVyYXRlZEV4ZXJjaXNlKHsgdXNlcklkLCBleGVyY2lzZUlkIH0pXG4gICAgKS5zcHJlYWQoKHJlc3AxOiBOQ1Jlc3BvbnNlPEV4ZXJjaXNlPiAsIHJlc3AyOiBOQ1Jlc3BvbnNlPEdlbmVyYXRlZEV4ZXJjaXNlPikgPT4ge1xuICAgICAgaWYgKHJlc3AxLnN0YXR1cyAmJiByZXNwMS5kYXRhKSB7XG4gICAgICAgIGNvbnN0IGV4ZXJjaXNlID0gcmVzcDEuZGF0YVxuICAgICAgICBjb25zdCBleGVyY2lzZUhhc2ggPSBFeGVyY2lzZUdlbmVyYXRvci5nZXRIYXNoKGV4ZXJjaXNlLmRhdGEpXG4gICAgICAgIC8vIFRoZXJlJ3MgdW5zdWJtaXR0ZWQgR2VuZXJhdGVkRXhlcmNpc2UgdGhhdCBjYW4gYmUgcmVzdG9yZWRcbiAgICAgICAgaWYgKHJlc3AyLnN0YXR1cyAmJiByZXNwMi5kYXRhICYmIHJlc3AyLmRhdGEuZXhlcmNpc2VIYXNoID09PSBleGVyY2lzZUhhc2gpIHtcbiAgICAgICAgICBjb25zdCBnZW5lcmF0ZWRFeGVyY2lzZSA9IHJlc3AyLmRhdGFcbiAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRFeGVyY2lzZShleGVyY2lzZSwgZ2VuZXJhdGVkRXhlcmNpc2UpXG4gICAgICAgICAgLy8gVW5zdWJtaXR0ZWQgR2VuZXJhdGVkRXhlcmNpc2UgY2FuIG5vIGxvbmdlciBiZSB1c2VkIG9yIHRoZXJlJ3Mgbm9uZVxuICAgICAgICB9IGVsc2UgaWYgKChyZXNwMi5zdGF0dXMgJiYgcmVzcDIuZGF0YSAmJiByZXNwMi5kYXRhLmV4ZXJjaXNlSGFzaCAhPT0gZXhlcmNpc2VIYXNoKSB8fCAhcmVzcDIuc3RhdHVzKSB7XG4gICAgICAgICAgLy8gVE9ETzogV2Ugd2FubmEgY29tYmluZSBnZW5lcmF0ZUV4ZXJjaXNlIGFuZCBzYXZlR2VuZXJhdGVkRXhlcmNpc2UgYWx0b2dldGhlclxuICAgICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlQW5kU2F2ZUV4ZXJjaXNlKGV4ZXJjaXNlLCB1c2VySWQpLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcC5zdGF0dXMgJiYgcmVzcC5kYXRhKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdEV4ZXJjaXNlKGV4ZXJjaXNlLCByZXNwLmRhdGEpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4geyBzdGF0dXM6IGZhbHNlLCBlcnJNZXNzYWdlOiByZXNwLmVyck1lc3NhZ2UgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIGVycm9yOiByZXNwMT0ke0pTT04uc3RyaW5naWZ5KHJlc3AxKX0gcmVzcDI9JHtKU09OLnN0cmluZ2lmeShyZXNwMil9YClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcmV0cmlldmUgZXhlcmNpc2U6ICcgKyByZXNwMS5lcnJNZXNzYWdlKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvLyBFTkQgT0YgTkVXIENPREVcbiAgZ2V0RXhlcmNpc2UgKGV4ZXJjaXNlSWQpOiBQcm9taXNlPE5DUmVzcG9uc2U8RXhlcmNpc2U+PiB7XG4gICAgcmV0dXJuIHRoaXMucmVhZE9uZTxFeGVyY2lzZT4oe1xuICAgICAgbW9kZWxOYW1lOiAnRXhlcmNpc2UnLFxuICAgICAgc2VhcmNoQ2xhdXNlOiB7IGlkOiBleGVyY2lzZUlkIH0sXG4gICAgICBpbmNsdWRlOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBtb2RlbDogdGhpcy5nZXRNb2RlbHMoJ1N1YnRvcGljJyksXG4gICAgICAgICAgaW5jbHVkZTogW1xuICAgICAgICAgICAgeyBtb2RlbDogdGhpcy5nZXRNb2RlbHMoJ1RvcGljJykgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pXG4gIH1cblxuICAvLyBDcmVhdGUgYSBuZXcgR2VuZXJhdGVkRXhlcmNpc2UgYW5kIHNhdmUgaXQgdG8gZGF0YWJhc2VcbiAgZ2VuZXJhdGVBbmRTYXZlRXhlcmNpc2UgKGV4ZXJjaXNlLCB1c2VySWQ6IG51bWJlcik6IFByb21pc2U8TkNSZXNwb25zZTxHZW5lcmF0ZWRFeGVyY2lzZT4+IHtcbiAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZUV4ZXJjaXNlKGV4ZXJjaXNlKS50aGVuKHJlc3AgPT4ge1xuICAgICAgaWYgKHJlc3Auc3RhdHVzICYmIHJlc3AuZGF0YSkge1xuICAgICAgICBjb25zdCB1bnNhdmVkR2VuZXJhdGVkRXhlcmNpc2UgPSByZXNwLmRhdGFcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TW9kZWxzKCdHZW5lcmF0ZWRFeGVyY2lzZScpLmRlc3Ryb3koe3doZXJlOiB7XG4gICAgICAgICAgdXNlcklkLFxuICAgICAgICAgIGV4ZXJjaXNlSWQ6IGV4ZXJjaXNlLmlkLFxuICAgICAgICAgIHN1Ym1pdHRlZDogZmFsc2UsXG4gICAgICAgICAgb25DbG91ZDogQXBwQ29uZmlnLkNMT1VEX1NFUlZFUlxuICAgICAgICB9fSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlPEdlbmVyYXRlZEV4ZXJjaXNlPih7XG4gICAgICAgICAgICBtb2RlbE5hbWU6ICdHZW5lcmF0ZWRFeGVyY2lzZScsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIGV4ZXJjaXNlSGFzaDogdW5zYXZlZEdlbmVyYXRlZEV4ZXJjaXNlLmV4ZXJjaXNlSGFzaCxcbiAgICAgICAgICAgICAga25vd25zOiB1bnNhdmVkR2VuZXJhdGVkRXhlcmNpc2Uua25vd25zLFxuICAgICAgICAgICAgICB1bmtub3duczogdW5zYXZlZEdlbmVyYXRlZEV4ZXJjaXNlLnVua25vd25zLFxuICAgICAgICAgICAgICBleGVyY2lzZUlkOiB1bnNhdmVkR2VuZXJhdGVkRXhlcmNpc2UuZXhlcmNpc2VJZCxcbiAgICAgICAgICAgICAgdXNlcklkLFxuICAgICAgICAgICAgICBpZGVhbFRpbWU6IHVuc2F2ZWRHZW5lcmF0ZWRFeGVyY2lzZS5pZGVhbFRpbWUsXG4gICAgICAgICAgICAgIG9uQ2xvdWQ6IEFwcENvbmZpZy5DTE9VRF9TRVJWRVJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBmYWxzZSwgZXJyTWVzc2FnZTogcmVzcC5lcnJNZXNzYWdlIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLy8gRm9ybWF0IGEgR2VuZXJhdGVkRXhlcmNpc2UgdG8gYSBmb3JtIHJlYWR5IHRvIHVzZVxuICBmb3JtYXRFeGVyY2lzZSAoZXhlcmNpc2U6IEV4ZXJjaXNlLCBnZW5lcmF0ZWRFeGVyY2lzZTogR2VuZXJhdGVkRXhlcmNpc2UpOiBQcm9taXNlPE5DUmVzcG9uc2U8Rm9ybWF0dGVkU3VidG9waWNFeGVyY2lzZT4+IHtcbiAgICBjb25zdCBzb2x2ZXIgPSBFeGVyY2lzZUdlbmVyYXRvci5nZXRFeGVyY2lzZVNvbHZlcihleGVyY2lzZS5kYXRhKVxuICAgIGNvbnN0IGtub3ducyA9IEpTT04ucGFyc2UoZ2VuZXJhdGVkRXhlcmNpc2Uua25vd25zKVxuICAgIGNvbnN0IHVua25vd25zID0gSlNPTi5wYXJzZShnZW5lcmF0ZWRFeGVyY2lzZS51bmtub3ducylcblxuICAgIHJldHVybiBQcm9taXNlLmpvaW48YW55PihcbiAgICAgIFByb21pc2UubWFwKGtub3ducywga25vd24gPT4ge1xuICAgICAgICByZXR1cm4gc29sdmVyLmZvcm1hdFF1ZXN0aW9uKGtub3duKVxuICAgICAgfSksXG4gICAgICBQcm9taXNlLm1hcCh1bmtub3ducywgdW5rbm93biA9PiB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh1bmtub3duKVxuICAgICAgfSlcbiAgICApLnNwcmVhZCgocmVuZGVyZWRRdWVzdGlvbnM6IHN0cmluZ1tdLCB1bmtub3duczogc3RyaW5nW11bXSkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiB0cnVlLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgZXhlcmNpc2VJZDogZXhlcmNpc2UuaWQsXG4gICAgICAgICAgaWRlYWxUaW1lOiBnZW5lcmF0ZWRFeGVyY2lzZS5pZGVhbFRpbWUsXG4gICAgICAgICAgZWxhcHNlZFRpbWU6IFV0aWxzLmdldEVsYXBzZWRUaW1lKGdlbmVyYXRlZEV4ZXJjaXNlLmNyZWF0ZWRBdCksXG4gICAgICAgICAgZm9ybWF0dGVkRXhlcmNpc2U6IHtcbiAgICAgICAgICAgIHJlbmRlcmVkUXVlc3Rpb25zLFxuICAgICAgICAgICAgdW5rbm93bnNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLy8gQ3JlYXRlZCBHZW5lcmF0ZWRFeGVyY2lzZSByZWFkeSB0byBiZSBzYXZlZFxuICBnZW5lcmF0ZUV4ZXJjaXNlIChleGVyY2lzZSwgdG9waWNPclN1YnRvcGljID0gZmFsc2UpOiBQcm9taXNlPE5DUmVzcG9uc2U8UGFydGlhbDxHZW5lcmF0ZWRFeGVyY2lzZT4+PiB7XG4gICAgbGV0IGV4ZXJjaXNlU29sdmVyID0gRXhlcmNpc2VHZW5lcmF0b3IuZ2V0RXhlcmNpc2VTb2x2ZXIoZXhlcmNpc2UuZGF0YSkgYXMgQnJ1dGVmb3JjZVNvbHZlclxuICAgIC8vIEdlbmVyYXRlIFggbnVtYmVyIG9mIHF1ZXN0aW9ucywgd2hpY2ggZGVwZW5kcyB3aGV0aGVyIGl0J3MgdG9waWMgb3Igc3ViVG9waWNcbiAgICBsZXQgcXVlc3Rpb25zOiBHZW5lcmF0ZWRRdWVzdGlvbkRhdGFbXSA9IHRvcGljT3JTdWJ0b3BpYyA/XG4gICAgICAgIGV4ZXJjaXNlU29sdmVyLmdlbmVyYXRlVG9waWNRdWVzdGlvbnMoKSA6XG4gICAgICAgIGV4ZXJjaXNlU29sdmVyLmdlbmVyYXRlUXVlc3Rpb25zKClcblxuICAgIGxldCBrbm93bnM6IEFycmF5PHt9PiA9IFtdXG4gICAgbGV0IHVua25vd25zOiBBcnJheTx7fT4gPSBbXVxuICAgIGxldCB1bmtub3duc1ZhcmlhYmxlczogQXJyYXk8e30+ID0gW11cbiAgICBsZXQgZm9ybWF0dGVkUXVlc3Rpb25zUHJvbWlzZXM6IEFycmF5PFByb21pc2U8c3RyaW5nPj4gPSBbXVxuXG4gICAgcXVlc3Rpb25zLmZvckVhY2gocXVlc3Rpb24gPT4ge1xuICAgICAga25vd25zLnB1c2gocXVlc3Rpb24ua25vd25zKVxuICAgICAgdW5rbm93bnMucHVzaChxdWVzdGlvbi51bmtub3ducylcbiAgICAgIHVua25vd25zVmFyaWFibGVzLnB1c2goT2JqZWN0LmtleXMocXVlc3Rpb24udW5rbm93bnMpKVxuICAgIH0pXG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoZm9ybWF0dGVkUXVlc3Rpb25zUHJvbWlzZXMpLnRoZW4ocmVuZGVyZWRRdWVzdGlvbnMgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiB0cnVlLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgZXhlcmNpc2VIYXNoOiBFeGVyY2lzZUdlbmVyYXRvci5nZXRIYXNoKGV4ZXJjaXNlLmRhdGEpLFxuICAgICAgICAgIGtub3duczogSlNPTi5zdHJpbmdpZnkoa25vd25zKSwgLy8gU3RyaW5naWZpZWQgSlNPTlxuICAgICAgICAgIHVua25vd25zOiBKU09OLnN0cmluZ2lmeSh1bmtub3ducyksIC8vIFN0cmluZ2lmaWVkIEpTT05cbiAgICAgICAgICBzdWJtaXR0ZWQ6IGZhbHNlLFxuICAgICAgICAgIGlkZWFsVGltZTogZXhlcmNpc2VTb2x2ZXIuZ2V0RXhlcmNpc2VJZGVhbFRpbWUoKSxcbiAgICAgICAgICBleGVyY2lzZUlkOiBleGVyY2lzZS5pZFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8vIEdpdmVuIGEgZ2VuZXJhdGVkIGV4ZXJjaXNlIGRhdGEsIGNyZWF0ZSBhbiBlbnRyeSBpbiBnZW5lcmF0ZWRFeGVyY2lzZSB0YWJsZVxuICAvLyBJZiB0aGUgdXNlciBhbHJlYWR5IGhhcyBhIGdlbmVyYXRlZEV4ZXJjaXNlLCBkZWxldGUgaXQgZmlyc3QgYmVmb3JlIGFkZGluZyBhIG5ldyBlbnRyeVxuICBzYXZlR2VuZXJhdGVkRXhlcmNpc2UgKHVzZXJJZCwgZ2VuZXJhdGVkRXhlcmNpc2UsIGV4ZXJjaXNlSGFzaCkge1xuICAgIHJldHVybiB0aGlzLmdldE1vZGVscygnR2VuZXJhdGVkRXhlcmNpc2UnKS5kZXN0cm95KHt3aGVyZToge1xuICAgICAgdXNlcklkLFxuICAgICAgZXhlcmNpc2VJZDogZ2VuZXJhdGVkRXhlcmNpc2UuZXhlcmNpc2VJZCxcbiAgICAgIHN1Ym1pdHRlZDogZmFsc2UsXG4gICAgICBvbkNsb3VkOiBBcHBDb25maWcuQ0xPVURfU0VSVkVSXG4gICAgfX0pLnRoZW4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlPEdlbmVyYXRlZEV4ZXJjaXNlPih7XG4gICAgICAgIG1vZGVsTmFtZTogJ0dlbmVyYXRlZEV4ZXJjaXNlJyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGV4ZXJjaXNlSGFzaCxcbiAgICAgICAgICBrbm93bnM6IGdlbmVyYXRlZEV4ZXJjaXNlLmtub3ducyxcbiAgICAgICAgICB1bmtub3duczogZ2VuZXJhdGVkRXhlcmNpc2UudW5rbm93bnMsXG4gICAgICAgICAgZXhlcmNpc2VJZDogZ2VuZXJhdGVkRXhlcmNpc2UuZXhlcmNpc2VJZCxcbiAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgaWRlYWxUaW1lOiBnZW5lcmF0ZWRFeGVyY2lzZS5pZGVhbFRpbWUsXG4gICAgICAgICAgb25DbG91ZDogQXBwQ29uZmlnLkNMT1VEX1NFUlZFUlxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICAvKlxuICAgIElucHV0OlxuICAgICAgaWQ6IDEsXG4gICAgICBzY29yZTogMixcbiAgICAgIHVzZXJBbnN3ZXI6ICdbe3g6IFwiM1wifV0nLFxuICAgICAgc3VibWl0dGVkOiB0cnVlLFxuICAgICAgdGltZUZpbmlzaDogMjMuMDlcbiAgKi9cbiAgdXBkYXRlR2VuZXJhdGVkRXhlcmNpc2UgKGRhdGEpIHtcbiAgICByZXR1cm4gdGhpcy51cGRhdGU8R2VuZXJhdGVkRXhlcmNpc2U+KHtcbiAgICAgIG1vZGVsTmFtZTogJ0dlbmVyYXRlZEV4ZXJjaXNlJyxcbiAgICAgIGRhdGFcbiAgICB9KVxuICB9XG5cbiAgLy8gR2V0IGV4ZXJjaXNlIHRoYXQgaXMgY3VyZW50bHkgYWN0aXZlXG4gIGdldEdlbmVyYXRlZEV4ZXJjaXNlICh7IHVzZXJJZCwgZXhlcmNpc2VJZCB9KSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZE9uZTxHZW5lcmF0ZWRFeGVyY2lzZT4oe1xuICAgICAgbW9kZWxOYW1lOiAnR2VuZXJhdGVkRXhlcmNpc2UnLFxuICAgICAgc2VhcmNoQ2xhdXNlOiB7IHVzZXJJZCwgZXhlcmNpc2VJZCwgc3VibWl0dGVkOiBmYWxzZSwgb25DbG91ZDogQXBwQ29uZmlnLkNMT1VEX1NFUlZFUiB9XG4gICAgfSlcbiAgfVxuXG4gIC8vIEdldCBhbGwgZXhlcmNpc2VzIHRoYXQgaGF2ZSBiZWVuIHN1Ym1pdHRlZFxuICBnZXRTdWJtaXR0ZWRFeGVyY2lzZXMgKHsgdXNlcklkLCBleGVyY2lzZUlkIH0pIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkPEdlbmVyYXRlZEV4ZXJjaXNlPih7XG4gICAgICBtb2RlbE5hbWU6ICdHZW5lcmF0ZWRFeGVyY2lzZScsXG4gICAgICBzZWFyY2hDbGF1c2U6IHsgdXNlcklkLCBleGVyY2lzZUlkLCBzdWJtaXR0ZWQ6IHRydWUgfVxuICAgIH0pXG4gIH1cblxuICAvLyBHZXQgdXNlciBzY29yZSBvZiBhbiBleGVyY2lzZVxuICAvL1xuICAvLyBSZXR1cm46XG4gIC8vIDAgLSA0OiBIb3cgbWFueSBvZiB0aGUgc3VibWl0dGVkIHNjb3JlcyBhcmUgPiA4MCVcbiAgZ2V0RXhlcmNpc2VTdGFycyAodXNlcklkLCBpZCkge1xuICAgIHJldHVybiB0aGlzLmdldFNlcXVlbGl6ZSgpLnF1ZXJ5KGBcblNFTEVDVCBzY29yZSBGUk9NIGdlbmVyYXRlZEV4ZXJjaXNlc1xuV0hFUkUgc3VibWl0dGVkID0gMSBBTkQgdXNlcklkID0gJHt1c2VySWR9IEFORCBleGVyY2lzZUlkID0gJHtpZH1cbk9SREVSIEJZIHNjb3JlIERFU0MgTElNSVQgNDtgLFxuICAgIHsgdHlwZTogU2VxdWVsaXplLlF1ZXJ5VHlwZXMuU0VMRUNUIH0pLnRoZW4oZGF0YXMgPT4ge1xuICAgICAgY29uc3Qgc3RhcnMgPSBkYXRhcy5yZWR1Y2UoKGFjYywgZGF0YSkgPT4ge1xuICAgICAgICBpZiAocGFyc2VJbnQoZGF0YS5zY29yZSwgMTApID49IDgwKSB7XG4gICAgICAgICAgcmV0dXJuIGFjYyArIDFcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gYWNjXG4gICAgICAgIH1cbiAgICAgIH0sIDApXG4gICAgICByZXR1cm4geyBzdGF0dXM6IHRydWUsIGRhdGE6IHsgc3RhcnMgfSB9XG4gICAgfSlcbiAgfVxuXG4gIC8qXG4gICAgaWYgcmVuZGVyU3RhciBpcyB0cnVlXG4gICAgICB3aWxsIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogdHJ1ZSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGh0bWw6ICcgPHNwYW4+PGltZyAvPjwvc3Bhbj4nXG4gICAgICAgICAgc3RhcnM6IDAtNFxuICAgICAgICB9XG4gICAgICB9XG4gICAgZWxzZVxuICAgICAge1xuICAgICAgICBzdGF0dXM6IHRydWUsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBzdGFyczogMC00XG4gICAgICAgIH1cbiAgICAgIH1cbiAgKi9cbiAgZ2V0UmVuZGVyZWRFeGVyY2lzZVN0YXJzICh1c2VySWQsIGlkKTogUHJvbWlzZTxOQ1Jlc3BvbnNlPHN0cmluZz4+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRFeGVyY2lzZVN0YXJzKHVzZXJJZCwgaWQpLnRoZW4ocmVzcCA9PiB7XG4gICAgICBpZiAocmVzcC5zdGF0dXMpIHtcbiAgICAgICAgY29uc3Qgc3RhcnMgPSByZXNwLmRhdGEuc3RhcnNcbiAgICAgICAgY29uc3QgaHRtbCA9IHB1Zy5yZW5kZXJGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9hcHAvdmlld3Mvbm9uLXBhZ2VzL3N0YXJzLnB1ZycpLCB7IHN0YXJzIH0pXG4gICAgICAgIHJldHVybiB7IHN0YXR1czogdHJ1ZSwgZGF0YTogaHRtbCB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcmVzcFxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvLyBTcGVjaWFsbHkgY2FsbGVkIGZyb20gY291cnNlIGNvbnRyb2xsZXJcbiAgZ2V0U3VidG9waWNTdGFyICh1c2VySWQsIHN1YnRvcGljSWQpOiBQcm9taXNlPE5DUmVzcG9uc2U8YW55Pj4ge1xuICAgIHJldHVybiB0aGlzLnJlYWQ8RXhlcmNpc2U+KHtcbiAgICAgIG1vZGVsTmFtZTogJ0V4ZXJjaXNlJywgc2VhcmNoQ2xhdXNlOiB7IHN1YnRvcGljSWQgfVxuICAgIH0pLnRoZW4ocmVzcCA9PiB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5tYXAocmVzcC5kYXRhIHx8IFtdLCAoZXhlcmNpc2U6IEV4ZXJjaXNlKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEV4ZXJjaXNlU3RhcnModXNlcklkLCBleGVyY2lzZS5pZClcbiAgICAgIH0pLnRoZW4oZGF0YXMgPT4ge1xuICAgICAgICBjb25zdCBzdGFycyA9IGRhdGFzLnJlZHVjZSgoYWNjLCByZXNwKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGFjYyArIHJlc3AuZGF0YS5zdGFyc1xuICAgICAgICB9LCAwKSAvIChkYXRhcy5sZW5ndGggfHwgMSlcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiB0cnVlLCBkYXRhOiB7IHN0YXJzIH0gfVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgLy8gR2V0IHVzZXIgc2NvcmUgb2YgYW4gZXhlcmNpc2VcbiAgLy9cbiAgLy8gUmV0dXJuOlxuICAvLyAwIC0gNDogSG93IG1hbnkgb2YgdGhlIHN1Ym1pdHRlZCBzY29yZXMgYXJlID4gODAlXG4gIGdldEV4ZXJjaXNlVGltZXJzICh1c2VySWQsIGV4ZXJjaXNlSWQpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTZXF1ZWxpemUoKS5xdWVyeShgXG5TRUxFQ1Qgc2NvcmUgRlJPTSBnZW5lcmF0ZWRFeGVyY2lzZXNcbldIRVJFIHN1Ym1pdHRlZCA9IDEgQU5EIHVzZXJJZCA9ICR7dXNlcklkfSBBTkQgZXhlcmNpc2VJZCA9ICR7ZXhlcmNpc2VJZH1cbkFORCB0aW1lRmluaXNoIDwgaWRlYWxUaW1lIEFORCBzY29yZSA9IDEwMFxuT1JERVIgQlkgc2NvcmUgREVTQyBMSU1JVCA0O2AsXG4gICAgeyB0eXBlOiBTZXF1ZWxpemUuUXVlcnlUeXBlcy5TRUxFQ1QgfSkudGhlbihkYXRhcyA9PiB7XG4gICAgICBjb25zdCB0aW1lcnMgPSBkYXRhcy5yZWR1Y2UoKGFjYywgZGF0YSkgPT4ge1xuICAgICAgICBpZiAocGFyc2VJbnQoZGF0YS5zY29yZSwgMTApID49IDEwMCkge1xuICAgICAgICAgIHJldHVybiBhY2MgKyAxXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgICB9XG4gICAgICB9LCAwKVxuICAgICAgcmV0dXJuIHsgc3RhdHVzOiB0cnVlLCBkYXRhOiB7IHRpbWVycyB9IH1cbiAgICB9KVxuICB9XG5cbiAgZ2V0UmVuZGVyZWRFeGVyY2lzZVRpbWVycyAodXNlcklkLCBpZCk6IFByb21pc2U8TkNSZXNwb25zZTxzdHJpbmc+PiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RXhlcmNpc2VUaW1lcnModXNlcklkLCBpZCkudGhlbihyZXNwID0+IHtcbiAgICAgIGlmIChyZXNwLnN0YXR1cykge1xuICAgICAgICBjb25zdCB0aW1lcnMgPSByZXNwLmRhdGEudGltZXJzXG4gICAgICAgIGNvbnN0IGh0bWwgPSBwdWcucmVuZGVyRmlsZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vYXBwL3ZpZXdzL25vbi1wYWdlcy90aW1lcnMucHVnJyksIHsgdGltZXJzIH0pXG4gICAgICAgIHJldHVybiB7IHN0YXR1czogdHJ1ZSwgZGF0YTogaHRtbCB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gKHJlc3ApXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGdldFN1YnRvcGljRXhlcmNpc2VUaW1lcnMgKHVzZXJJZCwgc3VidG9waWNJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWQ8RXhlcmNpc2U+KHtcbiAgICAgIG1vZGVsTmFtZTogJ0V4ZXJjaXNlJywgc2VhcmNoQ2xhdXNlOiB7IHN1YnRvcGljSWQgfVxuICAgIH0pLnRoZW4ocmVzcCA9PiB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5tYXAocmVzcC5kYXRhIHx8IFtdLCAoZXhlcmNpc2U6IEV4ZXJjaXNlKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEV4ZXJjaXNlVGltZXJzKHVzZXJJZCwgZXhlcmNpc2UuaWQpXG4gICAgICB9KS50aGVuKGRhdGFzID0+IHtcbiAgICAgICAgY29uc3QgdGltZXJzID0gZGF0YXMucmVkdWNlKChhY2MsIHJlc3ApID0+IHtcbiAgICAgICAgICByZXR1cm4gYWNjICsgcmVzcC5kYXRhLnRpbWVyc1xuICAgICAgICB9LCAwKSAvIChkYXRhcy5sZW5ndGggfHwgMSlcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiB0cnVlLCBkYXRhOiB7IHRpbWVycyB9IH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIC8vIEdldCBsZWFkZXJib2FyZCBkYXRhXG4gIGdldEV4ZXJjaXNlUmFua2luZyAoZXhlcmNpc2VJZCkge1xuICAgIHJldHVybiB0aGlzLmdldFNlcXVlbGl6ZSgpLnF1ZXJ5KFxuYFNFTEVDVCBNSU4odGltZUZpbmlzaCkgQVMgdGltZUZpbmlzaCwgdXNlcklkLCB1c2Vycy5mdWxsTmFtZSBBUyBmdWxsTmFtZSwgdXNlcnMuZ3JhZGUgQVMgZ3JhZGUsIHNjaG9vbHMubmFtZSBBUyBzY2hvb2xOYW1lXG5GUk9NIGdlbmVyYXRlZEV4ZXJjaXNlcyBJTk5FUiBKT0lOIHVzZXJzIE9OIHVzZXJzLmlkID0gZ2VuZXJhdGVkRXhlcmNpc2VzLnVzZXJJZCBJTk5FUiBKT0lOIHNjaG9vbHMgT04gc2Nob29scy5pZCA9IHVzZXJzLnNjaG9vbElkXG5XSEVSRSBzdWJtaXR0ZWQgPSBUUlVFIEFORCBleGVyY2lzZUlkID0gJHtleGVyY2lzZUlkfSBBTkQgc2NvcmUgPSAxMDAgQU5EIHRpbWVGaW5pc2ggSVMgTk9UIE5VTEwgR1JPVVAgQlkgdXNlcklkIE9SREVSIEJZIE1JTih0aW1lRmluaXNoKSBMSU1JVCAxMDtgLFxuICAgIHsgdHlwZTogU2VxdWVsaXplLlF1ZXJ5VHlwZXMuU0VMRUNUIH0pLnRoZW4ocmVzcCA9PiB7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IHRydWUsIGRhdGE6IHJlc3AgfVxuICAgIH0pXG4gIH1cblxuICBnZXRFeGVyY2lzZUxlYWRlcmJvYXJkIChleGVyY2lzZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RXhlcmNpc2VSYW5raW5nKGV4ZXJjaXNlSWQpLnRoZW4ocmVzcCA9PiB7XG4gICAgICBpZiAocmVzcC5zdGF0dXMpIHtcbiAgICAgICAgY29uc3QgZXhlcmNpc2VEYXRhID0gcmVzcC5kYXRhXG4gICAgICAgIGNvbnN0IGh0bWwgPSBwdWcucmVuZGVyRmlsZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vYXBwL3ZpZXdzL25vbi1wYWdlcy9yYW5raW5nLnB1ZycpLCB7IGV4ZXJjaXNlRGF0YSB9KVxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHRydWUsIGRhdGE6IGh0bWwgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIChyZXNwKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvLyBHZXQgdGhlIG51bWJlciBvZiByYW5rIGluIGxlYWRlcmJvYXJkXG4gIGdldEN1cnJlbnRSYW5raW5nICh0aW1lRmluaXNoLCBleGVyY2lzZUlkKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCBxdWVyeURCID0gYFNFTEVDVCBDT1VOVCgqKSBBUyB0b3RhbFxuICBGUk9NIChTRUxFQ1QgQ09VTlQoKikgRlJPTSBnZW5lcmF0ZWRFeGVyY2lzZXNcbiAgV0hFUkUgc3VibWl0dGVkID0gVFJVRSBBTkQgdGltZUZpbmlzaCA8ICR7dGltZUZpbmlzaH0gQU5EXG4gICAgICAgIGV4ZXJjaXNlSWQgPSAke2V4ZXJjaXNlSWR9IEFORCBzY29yZSA9IDEwMCBBTkQgdGltZUZpbmlzaCBJUyBOT1QgTlVMTFxuICBHUk9VUCBCWSB1c2VySWRcbiAgT1JERVIgQlkgTUlOKHRpbWVGaW5pc2gpKSBBUyB0b3RhbHJvdztgXG4gICAgICByZXR1cm4gdGhpcy5nZXRTZXF1ZWxpemUoKS5xdWVyeShxdWVyeURCLFxuICAgICAgICB7IHR5cGU6IFNlcXVlbGl6ZS5RdWVyeVR5cGVzLlNFTEVDVCB9KS50aGVuKHJlc3AgPT4ge1xuICAgICAgICAgIHJlc29sdmUoeyBzdGF0dXM6IHRydWUsIGRhdGE6IHsgY291bnQ6IHJlc3BbMF0udG90YWwgfSB9KVxuICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIC8vIEdldCB0aGUgbnVtYmVyIG9mIHN1Ym1pc3Npb25zIGluIHRoZSBsZWFkZXJib2FyZFxuICBnZXRUb3RhbFJhbmtpbmcgKGV4ZXJjaXNlSWQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IHF1ZXJ5REIgPSBgU0VMRUNUIENPVU5UKCopIEFTIHRvdGFsXG5GUk9NIChTRUxFQ1QgQ09VTlQoKikgRlJPTSBnZW5lcmF0ZWRFeGVyY2lzZXMgV0hFUkUgc3VibWl0dGVkID0gVFJVRSBBTkQgZXhlcmNpc2VJZCA9ICR7ZXhlcmNpc2VJZH1cbiAgICAgICAgICAgICAgICAgICAgICBBTkQgc2NvcmUgPSAxMDAgQU5EIHRpbWVGaW5pc2ggSVMgTk9UIE5VTExcbkdST1VQIEJZIHVzZXJJZFxuT1JERVIgQlkgTUlOKHRpbWVGaW5pc2gpKSBBUyB0b3RhbHJvdztgXG4gICAgICByZXR1cm4gdGhpcy5nZXRTZXF1ZWxpemUoKS5xdWVyeShxdWVyeURCLFxuICAgICAgICB7IHR5cGU6IFNlcXVlbGl6ZS5RdWVyeVR5cGVzLlNFTEVDVCB9KS50aGVuKHJlc3AgPT4ge1xuICAgICAgICAgIHJlc29sdmUoeyBzdGF0dXM6IHRydWUsIGRhdGE6IHsgY291bnQ6IHJlc3BbMF0udG90YWwgfSB9KVxuICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgRXhlcmNpc2VTZXJ2aWNlKClcbiJdfQ==
