"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),exercise_generator_1=require("../lib/exercise_generator/exercise-generator"),crud_service_neo_1=require("./crud-service-neo"),exercise_helper_1=require("../app/utils/exercise-helper");let path=require("path"),log=require("npmlog"),pug=require("pug"),moment=require("moment"),Sequelize=require("sequelize");const AppConfig=require(path.join(__dirname,"../app-config")),Utils=require(path.join(__dirname,"../lib/utils")),TAG="ExerciseService";class ExerciseService extends crud_service_neo_1.default{getFormattedExercise(e,r){return Promise.join(this.getExercise(e),this.getGeneratedExercise(r,e)).spread((e,t)=>{if(e.status&&e.data){const s=e.data,i=exercise_generator_1.default.getHash(s.data);if(t.status&&t.data&&t.data.exerciseHash===i){const e=t.data;return this.formatExercise(s,e)}if(t.status&&t.data&&t.data.exerciseHash!==i||!t.status)return this.generateAndSaveExercise(s,r).then(e=>e.status&&e.data?this.formatExercise(s,e.data):{status:!1,errMessage:e.errMessage});throw new Error(`Unexpected error: resp1=${JSON.stringify(e)} resp2=${JSON.stringify(t)}`)}throw new Error("Failed to retrieve exercise: "+e.errMessage)})}getExercise(e){return this.readOne({modelName:"Exercise",searchClause:{id:e},include:[{model:this.getModels("Subtopic"),include:[{model:this.getModels("Topic")}]}]})}generateAndSaveExercise(e,r){return this.generateExercise(e,"quantity").then(t=>{if(t.status&&t.data){const s=t.data;return this.getModels("GeneratedExercise").destroy({where:{userId:r,exerciseId:e.id,submitted:!1,onCloud:AppConfig.CLOUD_SERVER}}).then(()=>this.create({modelName:"GeneratedExercise",data:{exerciseHash:s.exerciseHash,knowns:s.knowns,unknowns:s.unknowns,exerciseId:s.exerciseId,userId:r,idealTime:s.idealTime,onCloud:AppConfig.CLOUD_SERVER}}))}return{status:!1,errMessage:t.errMessage}})}formatExercise(e,r){const t=exercise_generator_1.default.getExerciseSolver(e.data),s=JSON.parse(r.knowns),i=JSON.parse(r.unknowns);return Promise.join(Promise.map(s,e=>t.formatQuestion(e)),Promise.map(i,e=>Object.keys(e))).spread((t,s)=>({status:!0,data:{exerciseId:e.id,idealTime:r.idealTime,elapsedTime:Utils.getElapsedTime(r.createdAt),formattedExercise:{renderedQuestions:t,unknowns:s}}}))}generateExercise(e,r){try{let t=exercise_generator_1.default.getExerciseSolver(e.data),s=t.generateQuestions(r),i=[],a=[],n=[],u=[];return s.forEach(e=>{i.push(e.knowns),a.push(e.unknowns),n.push(Object.keys(e.unknowns))}),Promise.all(u).then(r=>({status:!0,data:{exerciseHash:exercise_generator_1.default.getHash(e.data),knowns:JSON.stringify(i),unknowns:JSON.stringify(a),submitted:!1,idealTime:t.getExerciseIdealTime(s.length),exerciseId:e.id}}))}catch(e){return Promise.reject(e)}}updateGeneratedExercise(e){return this.update({modelName:"GeneratedExercise",data:e})}getGeneratedExercise(e,r){return this.readOne({modelName:"GeneratedExercise",searchClause:{userId:e,exerciseId:r,submitted:!1,onCloud:AppConfig.CLOUD_SERVER}})}getExerciseStars(e,r){return this.getSequelize().query(`\nSELECT score FROM generatedExercises\nWHERE submitted = 1 AND userId = ${e} AND exerciseId = ${r}\nORDER BY score DESC LIMIT 4;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>{return{status:!0,data:{stars:e.reduce((e,r)=>parseInt(r.score,10)>=80?e+1:e,0)}}})}getRenderedExerciseStars(e,r){return this.getExerciseStars(e,r).then(e=>{if(e.status){const r=e.data.stars;return{status:!0,data:pug.renderFile(path.join(__dirname,"../app/views/non-pages/stars.pug"),{stars:r})}}return e})}getSubtopicStar(e,r){return this.read({modelName:"Exercise",searchClause:{subtopicId:r}}).then(r=>Promise.map(r.data||[],r=>this.getExerciseStars(e,r.id)).then(e=>{return{status:!0,data:{stars:e.reduce((e,r)=>e+r.data.stars,0)/(e.length||1)}}}))}getExerciseTimers(e,r){return this.getSequelize().query(`\nSELECT score FROM generatedExercises\nWHERE submitted = 1 AND userId = ${e} AND exerciseId = ${r}\nAND timeFinish < idealTime AND score = 100\nORDER BY score DESC LIMIT 4;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>{return{status:!0,data:{timers:e.reduce((e,r)=>parseInt(r.score,10)>=100?e+1:e,0)}}})}getRenderedExerciseTimers(e,r){return this.getExerciseTimers(e,r).then(e=>{if(e.status){const r=e.data.timers;return{status:!0,data:pug.renderFile(path.join(__dirname,"../app/views/non-pages/timers.pug"),{timers:r})}}return e})}getSubtopicExerciseTimers(e,r){return this.read({modelName:"Exercise",searchClause:{subtopicId:r}}).then(r=>Promise.map(r.data||[],r=>this.getExerciseTimers(e,r.id)).then(e=>{return{status:!0,data:{timers:e.reduce((e,r)=>e+r.data.timers,0)/(e.length||1)}}}))}getExerciseRanking(e){return this.getSequelize().query(`SELECT MIN(timeFinish) AS timeFinish, userId, users.fullName AS fullName, users.grade AS grade, schools.name AS schoolName\nFROM generatedExercises INNER JOIN users ON users.id = generatedExercises.userId INNER JOIN schools ON schools.id = users.schoolId\nWHERE submitted = TRUE AND exerciseId = ${e} AND score = 100 AND timeFinish IS NOT NULL GROUP BY userId ORDER BY MIN(timeFinish) LIMIT 10;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>({status:!0,data:e}))}getExerciseLeaderboard(e){return this.getExerciseRanking(e).then(e=>{if(e.status){const r=e.data;return{status:!0,data:pug.renderFile(path.join(__dirname,"../app/views/non-pages/ranking.pug"),{exerciseData:r})}}return e})}getCurrentRanking(e,r){return new Promise((t,s)=>{let i=`SELECT COUNT(*) AS total\n  FROM (SELECT COUNT(*) FROM generatedExercises\n  WHERE submitted = TRUE AND timeFinish < ${e} AND\n        exerciseId = ${r} AND score = 100 AND timeFinish IS NOT NULL\n  GROUP BY userId\n  ORDER BY MIN(timeFinish)) AS totalrow;`;return this.getSequelize().query(i,{type:Sequelize.QueryTypes.SELECT}).then(e=>{t({status:!0,data:{count:e[0].total}})}).catch(e=>{s(e)})})}getTotalRanking(e){return new Promise((r,t)=>{let s=`SELECT COUNT(*) AS total\nFROM (SELECT COUNT(*) FROM generatedExercises WHERE submitted = TRUE AND exerciseId = ${e}\n                      AND score = 100 AND timeFinish IS NOT NULL\nGROUP BY userId\nORDER BY MIN(timeFinish)) AS totalrow;`;return this.getSequelize().query(s,{type:Sequelize.QueryTypes.SELECT}).then(e=>{r({status:!0,data:{count:e[0].total}})}).catch(e=>{t(e)})})}finishExercise(e,r,t){return this.getGeneratedExercise(r,e).then(e=>{if(e.status&&e.data){const r=e.data;return this.gradeExercise(r,t).then(e=>{if(e.status&&e.data){const s=e.data;return this.updateGeneratedExercise({id:r.id,score:s.score,userAnswer:JSON.stringify(t),submitted:!0,submittedAt:moment().local().format("YYYY-MM-DD HH:mm:ss"),timeFinish:s.timeFinish}).then(e=>e.status?{status:!0,data:s}:{status:!1,errMessage:"Failed to update generatedExercise: "+e.errMessage})}return{status:!1,errMessage:"Failed to grade exercise: "+e.errMessage}})}return{status:!1,errMessage:"Failed to get generatedExercise: "+e.errMessage}})}gradeExercise(e,r){return this.getExercise(e.exerciseId).then(t=>{if(t.status&&t.data){const s=t.data,i=JSON.parse(e.knowns),a=JSON.parse(e.unknowns),n=exercise_generator_1.default.getExerciseSolver(s.data);if(i.length!==r.length)return{status:!1,errMessage:"Unexpected number of answers!"};{const{numCorrectAnswers:t,correctAnswers:s,isCorrect:u}=i.reduce((e,t,s)=>{const i=n.isAnswer(t,r[s]);return e.isCorrect.push(i),e.numCorrectAnswers+=i?1:0,e.correctAnswers.push(a[s]),e},{numCorrectAnswers:0,correctAnswers:[],isCorrect:[]}),d=i.length;return{status:!0,data:{numQuestions:d,numCorrectAnswers:t,correctAnswers:s,isCorrect:u,timeFinish:exercise_helper_1.default.countTimeFinish(e.createdAt),score:parseFloat(t)/d*100}}}}return{status:!1,errMessage:"Faile to get exercise: "+t.errMessage}})}}exports.default=new ExerciseService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
