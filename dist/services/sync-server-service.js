const path=require("path"),zlib=require("zlib"),_=require("lodash"),axios=require("axios"),Sequelize=require("sequelize"),Promise=require("bluebird"),AppConfig=require(path.join(__dirname,"../app-config")),CRUDService=require(path.join(__dirname,"crud-service")),KEY_TO_TABLE={user:{tableName:"users",modelName:"User"},submittedGeneratedExercises:{tableName:"generatedExercises",modelName:"GeneratedExercise"},submittedGeneratedTopicExercises:{tableName:"generatedTopicExercises",modelName:"GeneratedTopicExercise"},analytics:{tableName:"analytics",modelName:"Analytics"},watchedVideos:{tableName:"watchedVideos",modelName:"WatchedVideo"}},TAG="SyncService";class SyncService extends CRUDService{findSchoolIdByIdentifier(e){return this.readOne({modelName:"School",searchClause:{identifier:e}}).then(t=>t.status?t:{status:!1,errMessage:"Unrecognized school: "+e})}_getSyncMapping(e,t,r,s,a){return this.readOne({modelName:"Synchronization",searchClause:{localId:e,schoolIdentifier:t,serverHash:r,tableName:s},trx:a})}_insertToSyncTable(e,t,r,s,a,i){return this.create({modelName:"Synchronization",data:{localId:e,cloudId:a,schoolIdentifier:t,serverHash:r,tableName:s},trx:i})}insertRow(e,t,r,s=null,a){var i=null;return i="User"===t?Object.assign({},e,{schoolId:r}):Object.assign({},e,{userId:s,onCloud:!0}),this.create({modelName:t,data:i,trx:a})}updateTable(e,t,r,s,a=null){const i=Object.assign({},e,{id:r,userId:a,onCloud:!0});return this.update({modelName:t,data:i,trx:s})}getTableName(e){if(KEY_TO_TABLE[e])return KEY_TO_TABLE[e].tableName;throw new Error("Unknown key="+e)}getModelName(e){if(KEY_TO_TABLE[e])return KEY_TO_TABLE[e].modelName;throw new Error("Unknown key="+e)}_processUser(e,t,r,s,a){return this.readOne({modelName:"User",searchClause:{username:e.username,schoolId:s}}).then(i=>{if(i.status){var n=i.data.id;return this.updateTable(e,"User",n,a).then(e=>{if(e.status)return n;throw new Error("Failed to update user table:"+e.errMessage)})}return this._getSyncMapping(e.id,t,r,"users",a).then(i=>{if(i.status){var n=i.data.cloudId;return this.updateTable(e,"User",n,a).then(e=>{if(e.status)return n;throw new Error("Failed to update user table:"+e.errMessage)})}return this.insertRow(e,"User",s,null,a).then(s=>{if(s.status)return this._insertToSyncTable(e.id,t,r,"users",s.data.id,a).then(e=>{if(e.status)return e.data.cloudId;throw new Error("Failed to insert sync table:"+e.errMessage)});throw new Error("Failed to insert to user table: "+s.errMessage)})})})}isReadyToSync(e,t){return this.readOne({modelName:"SyncHistory",searchClause:{schoolIdentifier:e},order:[["updatedAt","desc"]],trx:t}).then(r=>{if(r.status){if("Success"===r.data.status){return{status:!0,data:{lastSync:r.data.date}}}return"Syncing"===r.data.status?{status:!1,errMessage:"School is currently syncing!"}:this.readOne({modelName:"SyncHistory",searchClause:{schoolIdentifier:e,status:"Success"},order:[["updatedAt","desc"]],trx:t}).then(e=>{if(e.status){return{status:!0,data:{lastSync:e.data.date}}}return{status:!0,data:{lastSync:"2000-01-01 00:00:00"}}})}return{status:!0,data:{lastSync:"2000-01-01 00:00:00"}}})}createSyncHistory(e,t,r){return this.create({modelName:"SyncHistory",data:{schoolIdentifier:e,date:t,status:"Syncing"},trx:r})}updateSyncHistory(e,t,r){return this.update({modelName:"SyncHistory",data:{id:e,status:t?"Success":"Failed"},trx:r})}getSyncHistories(e){return this.read({modelName:"SyncHistory",searchClause:{schoolIdentifier:e},order:[["updatedAt","desc"]]}).then(e=>e.status?e:{status:!0,data:[]})}getLastSynced(e){this.readOne({modelName:"SyncHistory",searchClause:{}})}syncData(e,t,r){const s=t.school.identifier,a=t.school.serverHash;if(s&&a)return Promise.each(t.users,(t,i)=>this._processUser(t.user,s,a,e,r).then(i=>(t=_.omit(t,"user"),Promise.map(Object.keys(t),n=>{const d=this.getTableName(n),o=this.getModelName(n);return Promise.each(t[n],t=>this._getSyncMapping(t.id,s,a,d,r).then(n=>{if(n.status){var u=n.data.cloudId;return this.updateTable(t,o,u,r,i).then(e=>{if(!e.status)throw new Error(`Failed to update ${d} table: ${e.errMessage}`)})}return this.insertRow(t,o,e,i,r).then(e=>{if(e.status)return this._insertToSyncTable(t.id,s,a,d,e.data.id,r).then(e=>{if(!e.status)throw new Error(`Failed to insert sync table: ${e.errMessage}`)});throw new Error(`Failed to insert ${d} table: ${e.errMessage}`)})}))}))));throw new Error("schoolIdentifier or serverHash is not defined!")}}module.exports=SyncService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
