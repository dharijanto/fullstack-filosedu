"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),crud_service_neo_1=require("./crud-service-neo"),exercise_generator_1=require("../lib/exercise_generator/exercise-generator"),exercise_service_1=require("./exercise-service"),Utils=require("../lib/utils");let path=require("path"),log=require("npmlog"),pug=require("pug"),moment=require("moment"),Sequelize=require("sequelize");const AppConfig=require(path.join(__dirname,"../app-config")),TAG="TopicExerciseService";class TopicExerciseService extends crud_service_neo_1.default{getTopic(e){return this.readOne({modelName:"Topic",searchClause:{id:e}})}getFormattedExercise(e,r){return e&&r?Promise.join(this.getGeneratedTopicExercise(r,e),this.getExercisesHash(e),this.getTopic(e)).spread((t,s,i)=>{if(s.status&&i.status){const i=s.data;if(t.status&&t.data&&t.data.topicExerciseHash===i)return this.formatExercise(t.data);if(t.status&&t.data&&t.data.topicExerciseHash!==i||!t.status)return this.generateAndSaveExercise(e,r).then(e=>e.status&&e.data?this.formatExercise(e.data):{status:!1,errMessage:e.errMessage});throw new Error("Unexpected error!")}throw new Error(`Failed to retrieve topic or topicExerciseHash: ${s.errMessage||i.errMessage}`)}):Promise.resolve({status:!1,errMessage:"topicId and userId are required!"})}getExercises(e){return this.getSequelize().query(`\nSELECT exercises.id, exercises.data, exercises.createdAt, exercises.updatedAt, exercises.subtopicId\nFROM exercises AS exercises\nINNER JOIN subtopics AS subtopic ON exercises.subtopicId = subtopic.id AND subtopic.topicId = ${e}\nORDER BY subtopic.subtopicNo ASC, exercises.id ASC;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>({status:!0,data:e}))}getExercisesHash(e){return this.getExercises(e).then(e=>{if(e.status&&e.data){const r=e.data.reduce((e,r)=>e+exercise_generator_1.default.getHash(r),"");return{status:!0,data:exercise_generator_1.default.getHash(r)}}return{status:!1,errMessage:e.errMessage}})}generateAndSaveExercise(e,r){return this.generateExercise(e).then(t=>{if(t.status&&t.data){const s=t.data;return this.getModels("GeneratedTopicExercise").destroy({where:{topicId:e,userId:r,submitted:!1,onCloud:AppConfig.CLOUD_SERVER}}).then(()=>this.create({modelName:"GeneratedTopicExercise",data:{topicId:e,userId:r,exerciseDetail:s.exerciseDetail,topicExerciseHash:s.topicExerciseHash,idealTime:s.idealTime,onCloud:AppConfig.CLOUD_SERVER}}))}return{status:!1,errMessage:"Failed to generated topic exercise: "+t.errMessage}})}generateExercise(e,r="reviewQuantity"){return Promise.join(this.getExercises(e),this.getExercisesHash(e)).spread((e,t)=>{if(e.status&&e.data&&t.status&&t.data){const s=e.data,i=t.data;return Promise.map(s,e=>exercise_service_1.default.generateExercise(e,r).then(r=>{if(r.status&&r.data)return JSON.parse(r.data.knowns||"[]").length>0?r.data:null;throw new Error("Failed to generate exercise with id="+e.id+": "+r.errMessage)})).then(e=>{return{status:!0,data:{idealTime:(e=e.filter(e=>null!==e)).reduce((e,r)=>e+(r.idealTime||0),0),topicExerciseHash:i,exerciseDetail:JSON.stringify(e)}}})}return{status:!1,errMessage:"Failed to get exercises/hash: "+e.errMessage||t.errMessage}})}formatExercise(e){const r=e.topicId;try{const t=JSON.parse(e.exerciseDetail||"");return Promise.map(t,e=>this.readOne({modelName:"Exercise",searchClause:{id:e.exerciseId}}).then(r=>{if(r.status&&r.data){let t=exercise_generator_1.default.getExerciseSolver(r.data.data),s=[],i=[];return JSON.parse(e.knowns).forEach(e=>{i.push(t.formatQuestion(e))}),JSON.parse(e.unknowns).forEach(e=>{s.push(Object.keys(e))}),Promise.all(i).then(e=>({renderedQuestions:e,unknowns:s}))}throw new Error(r.errMessage)})).then(t=>this.readOne({modelName:"Topic",searchClause:{id:r}}).then(r=>r.status&&r.data?{status:!0,data:{topicName:r.data.topic,formattedExercises:t,idealTime:e.idealTime||0,elapsedTime:Utils.getElapsedTime(e.createdAt)}}:{status:!1,errMessage:""}))}catch(r){return log.error(TAG,"Failed to parse generatedTopicExerise: "+JSON.stringify(e)),Promise.reject(r)}}gradeExercise(e,r){return Promise.map(e,e=>this.readOne({modelName:"Exercise",searchClause:{id:e.exerciseId}}).then(r=>{if(r.status&&r.data){const t=r.data,s=exercise_generator_1.default.getExerciseSolver(t.data),i=JSON.parse(e.knowns||""),a=JSON.parse(e.unknowns||"");return i.map((e,r)=>({known:e,correctAnswer:a[r],isAnswerFn:s.isAnswer.bind(s)}))}throw new Error("Exercise with id="+e.exerciseId+" could not be found!")})).then(e=>e.reduce((e,r)=>e.concat(r),[]).reduce((e,r)=>e.concat(r),[])).then(e=>{const{numCorrectAnswers:t,correctAnswers:s,isCorrect:i}=e.reduce((e,t,s)=>{const i=t.isAnswerFn(t.known,r[s]);return e.numCorrectAnswers+=i?1:0,e.correctAnswers.push(t.correctAnswer),e.isCorrect.push(i),e},{numCorrectAnswers:0,correctAnswers:[],isCorrect:[]}),a=e.length;return{status:!0,data:{numQuestions:a,numCorrectAnswers:t,correctAnswers:s,isCorrect:i,score:parseFloat(t)/a*100}}})}insertAnswers(e,r){let t=0;return e.map(e=>{const s=[];return JSON.parse(e.knowns||"").forEach(e=>{s.push(r[t]),t++}),e.userAnswer=JSON.stringify(s),e})}finishExercise(e,r,t,s,i){const a=this.insertAnswers(s,i);return this.update({modelName:"GeneratedTopicExercise",data:{id:e,submitted:!0,submittedAt:moment().local().format("YYYY-MM-DD HH:mm:ss"),onCloud:AppConfig.CLOUD_SERVER,score:r,timeFinish:t,exerciseDetail:JSON.stringify(a)}})}getGeneratedTopicExercise(e,r){return this.readOne({modelName:"GeneratedTopicExercise",searchClause:{userId:e,topicId:r,submitted:!1,onCloud:AppConfig.CLOUD_SERVER}})}getStarBadges(e,r){return this.getSequelize().query(`\nSELECT score FROM generatedTopicExercises\nWHERE submitted = 1 AND topicId = ${r} AND userId = ${e}\nORDER BY score DESC LIMIT 4;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>{return{status:!0,data:{stars:e.reduce((e,r)=>parseInt(r.score,10)>=80?e+1:e,0)}}})}getRenderedStarBadges(e,r){return this.getStarBadges(e,r).then(e=>{if(e.status){const r=e.data.stars;return{status:!0,data:{html:pug.renderFile(path.join(__dirname,"../app/views/non-pages/stars.pug"),{stars:r}),stars:r}}}return e})}getCheckmarkBadge(e,r,t=!1){return this.getSequelize().query(`\nSELECT score FROM generatedTopicExercises\nWHERE submitted = 1 AND topicId = ${r} AND userId = ${e} AND score > 80\nORDER BY score DESC LIMIT 1;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>{const r=e.length>0;if(t){return{status:!0,data:pug.renderFile(path.join(__dirname,"../app/views/non-pages/ceckmark.pug"),{isChecked:r})}}return{status:!0,data:{isChecked:r}}})}getTimerBadges(e,r){return this.getSequelize().query(`\nSELECT score FROM generatedTopicExercises\nWHERE submitted = 1 AND topicId = ${r} AND userId = ${e}\nAND timeFinish < idealTime AND score = 100\nORDER BY score DESC LIMIT 1;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>{return{status:!0,data:{timers:e.reduce((e,r)=>parseInt(r.score,10)>=80?e+1:e,0)}}})}getRenderedTimerBadges(e,r){return this.getTimerBadges(e,r).then(e=>{if(e.status){const r=e.data.timers;return{status:!0,data:pug.renderFile(path.join(__dirname,"../app/views/non-pages/timers.pug"),{timers:r})}}return e})}getRanking(e){return this.getSequelize().query(`SELECT MIN(timeFinish) AS timeFinish, userId, users.fullName AS fullName, users.grade AS grade, schools.name AS schoolName\nFROM generatedTopicExercises INNER JOIN users ON users.id = generatedTopicExercises.userId INNER JOIN schools ON schools.id = users.schoolId\nWHERE submitted = TRUE AND topicId = ${e} AND score = 100 AND timeFinish IS NOT NULL GROUP BY userId ORDER BY MIN(timeFinish) LIMIT 10;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>({status:!0,data:e}))}getRenderedLeaderboard(e){return this.getRanking(e).then(e=>{if(e.status){const r=e.data;return{status:!0,data:pug.renderFile(path.join(__dirname,"../app/views/non-pages/ranking.pug"),{exerciseData:r})}}return e})}getCurrentRanking(e,r){return new Promise((t,s)=>{const i=`SELECT COUNT(*) AS total\nFROM (SELECT COUNT(*) FROM generatedTopicExercises\nWHERE submitted = TRUE AND timeFinish < ${e} AND topicId = ${r} AND score = 100 AND timeFinish IS NOT NULL\nGROUP BY userId\nORDER BY MIN(timeFinish)) AS totalrow;`;return this.getSequelize().query(i,{type:Sequelize.QueryTypes.SELECT}).then(e=>{t({status:!0,data:{count:e[0].total}})}).catch(e=>{s(e)})})}getTotalRanking(e){return new Promise((r,t)=>{let s=`SELECT COUNT(*) AS total\nFROM (SELECT COUNT(*) FROM generatedTopicExercises WHERE submitted = TRUE AND topicId = ${e} AND score = 100 AND timeFinish IS NOT NULL\nGROUP BY userId\nORDER BY MIN(timeFinish)) AS totalrow;`;return this.getSequelize().query(s,{type:Sequelize.QueryTypes.SELECT}).then(e=>{r({status:!0,data:{count:e[0].total}})}).catch(e=>{t(e)})})}}exports.default=new TopicExerciseService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXJ2aWNlcy90b3BpYy1leGVyY2lzZS1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbIlByb21pc2UiLCJyZXF1aXJlIiwiY3J1ZF9zZXJ2aWNlX25lb18xIiwiZXhlcmNpc2VfZ2VuZXJhdG9yXzEiLCJleGVyY2lzZV9zZXJ2aWNlXzEiLCJVdGlscyIsInBhdGgiLCJsb2ciLCJwdWciLCJtb21lbnQiLCJTZXF1ZWxpemUiLCJBcHBDb25maWciLCJqb2luIiwiX19kaXJuYW1lIiwiVEFHIiwiVG9waWNFeGVyY2lzZVNlcnZpY2UiLCJkZWZhdWx0IiwiW29iamVjdCBPYmplY3RdIiwidG9waWNJZCIsInRoaXMiLCJyZWFkT25lIiwibW9kZWxOYW1lIiwic2VhcmNoQ2xhdXNlIiwiaWQiLCJ1c2VySWQiLCJnZXRHZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlIiwiZ2V0RXhlcmNpc2VzSGFzaCIsImdldFRvcGljIiwic3ByZWFkIiwicmVzcCIsInJlc3AyIiwicmVzcDMiLCJzdGF0dXMiLCJ0b3BpY0V4ZXJjaXNlSGFzaCIsImRhdGEiLCJmb3JtYXRFeGVyY2lzZSIsImdlbmVyYXRlQW5kU2F2ZUV4ZXJjaXNlIiwidGhlbiIsInJlc3A1IiwiZXJyTWVzc2FnZSIsIkVycm9yIiwicmVzb2x2ZSIsImdldFNlcXVlbGl6ZSIsInF1ZXJ5IiwidHlwZSIsIlF1ZXJ5VHlwZXMiLCJTRUxFQ1QiLCJnZXRFeGVyY2lzZXMiLCJjb21iaW5lZEhhc2giLCJyZWR1Y2UiLCJhY2MiLCJoYXNoIiwiZ2V0SGFzaCIsImdlbmVyYXRlRXhlcmNpc2UiLCJnZW5lcmF0ZWRFeGVyY2lzZSIsImdldE1vZGVscyIsImRlc3Ryb3kiLCJ3aGVyZSIsInN1Ym1pdHRlZCIsIm9uQ2xvdWQiLCJDTE9VRF9TRVJWRVIiLCJjcmVhdGUiLCJleGVyY2lzZURldGFpbCIsImlkZWFsVGltZSIsInF1YW50aXR5VmFyaWFibGVOYW1lIiwiZXhlcmNpc2VzIiwibWFwIiwiZXhlcmNpc2UiLCJKU09OIiwicGFyc2UiLCJrbm93bnMiLCJsZW5ndGgiLCJnZW5lcmF0ZWRFeGVyY2lzZXMiLCJmaWx0ZXIiLCJzdHJpbmdpZnkiLCJnZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlIiwiZXhlcmNpc2VJZCIsImV4ZXJjaXNlU29sdmVyIiwiZ2V0RXhlcmNpc2VTb2x2ZXIiLCJ1bmtub3ducyIsImZvcm1hdHRlZFF1ZXN0aW9uc1Byb21pc2VzIiwiZm9yRWFjaCIsInB1c2giLCJmb3JtYXRRdWVzdGlvbiIsIl91bmtub3ducyIsIk9iamVjdCIsImtleXMiLCJhbGwiLCJyZW5kZXJlZFF1ZXN0aW9ucyIsImZvcm1hdHRlZEV4ZXJjaXNlcyIsInRvcGljTmFtZSIsInRvcGljIiwiZWxhcHNlZFRpbWUiLCJnZXRFbGFwc2VkVGltZSIsImNyZWF0ZWRBdCIsImVyciIsImVycm9yIiwicmVqZWN0IiwiZ2VuZXJhdGVkRXhlcmNpc2VEZXRhaWxzIiwiYW5zd2VycyIsImtub3duIiwiaW5kZXgiLCJjb3JyZWN0QW5zd2VyIiwiaXNBbnN3ZXJGbiIsImlzQW5zd2VyIiwiYmluZCIsInRvcGljRXhlcmNpc2VBcnJheSIsImV4ZXJjaXNlQXJyYXkiLCJjb25jYXQiLCJxdWVzdGlvbkFycmF5IiwicmVzdWx0cyIsIm51bUNvcnJlY3RBbnN3ZXJzIiwiY29ycmVjdEFuc3dlcnMiLCJpc0NvcnJlY3QiLCJyZXN1bHQiLCJudW1RdWVzdGlvbnMiLCJzY29yZSIsInBhcnNlRmxvYXQiLCJleGVyY2lzZURldGFpbHMiLCJhbnN3ZXJJbmRleCIsImV4ZXJjaXNlRGV0YWlsQW5zd2VycyIsIl8iLCJ1c2VyQW5zd2VyIiwiZ2VuZXJhdGVkVG9waWNFeGVyY2lzZUlkIiwidGltZUZpbmlzaCIsInVwZGF0ZWRFeGVyY2lzZURldGFpbCIsImluc2VydEFuc3dlcnMiLCJ1cGRhdGUiLCJzdWJtaXR0ZWRBdCIsImxvY2FsIiwiZm9ybWF0IiwiZGF0YXMiLCJzdGFycyIsInBhcnNlSW50IiwiZ2V0U3RhckJhZGdlcyIsImh0bWwiLCJyZW5kZXJGaWxlIiwicmVuZGVyIiwiaXNDaGVja2VkIiwidGltZXJzIiwiZ2V0VGltZXJCYWRnZXMiLCJnZXRSYW5raW5nIiwiZXhlcmNpc2VEYXRhIiwicXVlcnlEQiIsImNvdW50IiwidG90YWwiLCJjYXRjaCIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJvRUFBQSxNQUFBQSxRQUFBQyxRQUFBLFlBRUFDLG1CQUFBRCxRQUFBLHNCQUNBRSxxQkFBQUYsUUFBQSxnREFDQUcsbUJBQUFILFFBQUEsc0JBRUFJLE1BQUFKLFFBQUEsZ0JBRUEsSUFBSUssS0FBT0wsUUFBUSxRQUVmTSxJQUFNTixRQUFRLFVBQ2RPLElBQU1QLFFBQVEsT0FDZFEsT0FBU1IsUUFBUSxVQUNqQlMsVUFBWVQsUUFBUSxhQUV4QixNQUFNVSxVQUFZVixRQUFRSyxLQUFLTSxLQUFLQyxVQUFXLGtCQUd6Q0MsSUFBTSw2QkFvQlpDLDZCQUFtQ2IsbUJBQUFjLFFBRXpCQyxTQUFVQyxHQUNoQixPQUFPQyxLQUFLQyxTQUFpQkMsVUFBVyxRQUFTQyxjQUFnQkMsR0FBSUwsS0FLdkVELHFCQUFzQkMsRUFBU00sR0FDN0IsT0FBSU4sR0FBV00sRUFDTnhCLFFBQVFZLEtBQ2JPLEtBQUtNLDBCQUEwQkQsRUFBUU4sR0FDdkNDLEtBQUtPLGlCQUFpQlIsR0FDdEJDLEtBQUtRLFNBQVNULElBQ2RVLE9BQU8sQ0FBQ0MsRUFDQUMsRUFBMkJDLEtBQ25DLEdBQUlELEVBQU1FLFFBQVVELEVBQU1DLE9BQVEsQ0FDaEMsTUFBTUMsRUFBb0JILEVBQU1JLEtBRWhDLEdBQUlMLEVBQUtHLFFBQVVILEVBQUtLLE1BQVFMLEVBQUtLLEtBQUtELG9CQUFzQkEsRUFDOUQsT0FBT2QsS0FBS2dCLGVBQWVOLEVBQUtLLE1BRTNCLEdBQUtMLEVBQUtHLFFBQVVILEVBQUtLLE1BQVFMLEVBQUtLLEtBQUtELG9CQUFzQkEsSUFDN0RKLEVBQUtHLE9BQ2QsT0FBT2IsS0FBS2lCLHdCQUF3QmxCLEVBQVNNLEdBQVFhLEtBQUtDLEdBQ3BEQSxFQUFNTixRQUFVTSxFQUFNSixLQUNqQmYs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QUFJQSxFQUFLRyxPQUFRLENBQ2YsTUFBTThHLEVBQWVqSCxFQUFLSyxLQUUxQixPQUFTRixRQUFRLEVBQU1FLEtBRFYxQixJQUFJZ0ksV0FBV2xJLEtBQUtNLEtBQUtDLFVBQVcsdUNBQXlDaUksYUFBQUEsS0FHMUYsT0FBT2pILElBTWJaLGtCQUFtQjJHLEVBQVkxRyxHQUM3QixPQUFPLElBQUlsQixRQUFRLENBQUN5QyxFQUFTd0QsS0FDM0IsTUFBTThDLDJIQUU4Qm5CLG1CQUE0QjFHLHdHQUdoRSxPQUFPQyxLQUFLdUIsZUFBZUMsTUFBTW9HLEdBQzdCbkcsS0FBTWxDLFVBQVVtQyxXQUFXQyxTQUFVVCxLQUFLUixJQUMxQ1ksR0FBVVQsUUFBUSxFQUFNRSxNQUFROEcsTUFBT25ILEVBQUssR0FBR29ILFdBQzlDQyxNQUFNbkQsSUFDUEUsRUFBT0YsT0FNZjlFLGdCQUFpQkMsR0FDZixPQUFPLElBQUlsQixRQUFRLENBQUN5QyxFQUFTd0QsS0FDM0IsSUFBSThDLHVIQUNnRjdILHdHQUdwRixPQUFPQyxLQUFLdUIsZUFBZUMsTUFBTW9HLEdBQzdCbkcsS0FBTWxDLFVBQVVtQyxXQUFXQyxTQUFVVCxLQUFLUixJQUMxQ1ksR0FBVVQsUUFBUSxFQUFNRSxNQUFROEcsTUFBT25ILEVBQUssR0FBR29ILFdBQzlDQyxNQUFNbkQsSUFDUEUsRUFBT0YsUUFNakJvRCxRQUFBbkksUUFBZSxJQUFJRCIsImZpbGUiOiJzZXJ2aWNlcy90b3BpYy1leGVyY2lzZS1zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tICdibHVlYmlyZCdcbmltcG9ydCBCcnV0ZWZvcmNlU29sdmVyLCB7IEdlbmVyYXRlZFF1ZXN0aW9uRGF0YSB9IGZyb20gJy4uL2xpYi9leGVyY2lzZV9nZW5lcmF0b3IvZXhlcmNpc2Vfc29sdmVycy9icnV0ZWZvcmNlLXNvbHZlcidcbmltcG9ydCBDUlVEU2VydmljZSBmcm9tICcuL2NydWQtc2VydmljZS1uZW8nXG5pbXBvcnQgRXhlcmNpc2VHZW5lcmF0b3IgZnJvbSAnLi4vbGliL2V4ZXJjaXNlX2dlbmVyYXRvci9leGVyY2lzZS1nZW5lcmF0b3InXG5pbXBvcnQgRXhlcmNpc2VTZXJ2aWNlIGZyb20gJy4vZXhlcmNpc2Utc2VydmljZSdcbmltcG9ydCB7IFF1YW50aXR5VmFyaWFibGVOYW1lIH0gZnJvbSAnLi4vbGliL2V4ZXJjaXNlX2dlbmVyYXRvci9leGVyY2lzZV9zb2x2ZXJzL2V4ZXJjaXNlLXNvbHZlcidcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gJy4uL2xpYi91dGlscydcblxubGV0IHBhdGggPSByZXF1aXJlKCdwYXRoJylcblxubGV0IGxvZyA9IHJlcXVpcmUoJ25wbWxvZycpXG5sZXQgcHVnID0gcmVxdWlyZSgncHVnJylcbmxldCBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKVxubGV0IFNlcXVlbGl6ZSA9IHJlcXVpcmUoJ3NlcXVlbGl6ZScpXG5cbmNvbnN0IEFwcENvbmZpZyA9IHJlcXVpcmUocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL2FwcC1jb25maWcnKSlcbi8vIGNvbnN0IFV0aWxzID0gcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vbGliL3V0aWxzJykpXG5cbmNvbnN0IFRBRyA9ICdUb3BpY0V4ZXJjaXNlU2VydmljZSdcblxuLyogZXhwb3J0IGludGVyZmFjZSBHZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlRGV0YWlsIHtcbiAga25vd25zOiBzdHJpbmcsIC8vIHN0cmluZ2lmaWVkIEpTT05cbiAgdW5rbm93bnM6IHN0cmluZywgLy8gc3RyaW5naWZpZWQgSlNPTlxuICB1c2VyQW5zd2VyOiBzdHJpbmcsIC8vIHN0cmluZ2lmaWVkIEpTT05cbiAgZXhlcmNpc2VIYXNoOiBzdHJpbmdcbiAgZXhlcmNpc2VJZDogbnVtYmVyXG59ICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9waWNFeGVyY2lzZUdyYWRlIHtcbiAgbnVtUXVlc3Rpb25zOiBudW1iZXJcbiAgbnVtQ29ycmVjdEFuc3dlcnM6IG51bWJlclxuICBjb3JyZWN0QW5zd2VyczogQXJyYXk8e1trZXk6IHN0cmluZ106IGFueX0+XG4gIGlzQ29ycmVjdDogQXJyYXk8Ym9vbGVhbj5cbiAgc2NvcmU6IG51bWJlclxufVxuXG5leHBvcnQgdHlwZSBUb3BpY0V4ZXJjaXNlQW5zd2VyID0gQXJyYXk8e1trZXk6IHN0cmluZ106IGFueX0+XG5cbmNsYXNzIFRvcGljRXhlcmNpc2VTZXJ2aWNlIGV4dGVuZHMgQ1JVRFNlcnZpY2Uge1xuICAvLyBUT0RPOiBXZSBzaG91bGQgdXNlIHZlcnNpb24gb24gY291cnNlU2VydmljZSBpbnN0ZWFkIG9mIHRoaXNcbiAgcHJpdmF0ZSBnZXRUb3BpYyAodG9waWNJZCk6IFByb21pc2U8TkNSZXNwb25zZTxUb3BpYz4+IHtcbiAgICByZXR1cm4gdGhpcy5yZWFkT25lPFRvcGljPih7IG1vZGVsTmFtZTogJ1RvcGljJywgc2VhcmNoQ2xhdXNlOiB7IGlkOiB0b3BpY0lkIH0gfSlcbiAgfVxuXG4gIC8vIEdldCBhIEdlbmVyYXRlZFRvcGljRXhlcmNpc2UgaW4gYSBmb3JtYXQgcmVhZHkgZm9yIHVzZS4gSWYgdGhlcmUncyBwcmV2aW91c2x5IGdlbmVyYXRlZFxuICAvLyB0aGF0IGhhc24ndCBiZWVuIHN1Ym1pdHRlZCwgdGhpcyB3aWxsIHJlc3RvcmUgaXQuIE90aGVyd2lzZSwgaXQnbGwgZ2VuZXJhdGUgb25lLlxuICBnZXRGb3JtYXR0ZWRFeGVyY2lzZSAodG9waWNJZCwgdXNlcklkKTogUHJvbWlzZTxOQ1Jlc3BvbnNlPEZvcm1hdHRlZFRvcGljRXhlcmNpc2U+PiB7XG4gICAgaWYgKHRvcGljSWQgJiYgdXNlcklkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5qb2luPGFueT4oXG4gICAgICAgIHRoaXMuZ2V0R2VuZXJhdGVkVG9waWNFeGVyY2lzZSh1c2VySWQsIHRvcGljSWQpLFxuICAgICAgICB0aGlzLmdldEV4ZXJjaXNlc0hhc2godG9waWNJZCksXG4gICAgICAgIHRoaXMuZ2V0VG9waWModG9waWNJZClcbiAgICAgICkuc3ByZWFkKChyZXNwOiBOQ1Jlc3BvbnNlPEdlbmVyYXRlZFRvcGljRXhlcmNpc2U+LFxuICAgICAgICAgICAgICAgIHJlc3AyOiBOQ1Jlc3BvbnNlPHN0cmluZz4sIHJlc3AzOiBOQ1Jlc3BvbnNlPFRvcGljPikgPT4ge1xuICAgICAgICBpZiAocmVzcDIuc3RhdHVzICYmIHJlc3AzLnN0YXR1cykge1xuICAgICAgICAgIGNvbnN0IHRvcGljRXhlcmNpc2VIYXNoID0gcmVzcDIuZGF0YVxuICAgICAgICAgIC8vIElmIHRoZXJlJ3MgdmFsaWQgZXhlcmNpc2UgdG8gYmUgcmVzdG9yZWRcbiAgICAgICAgICBpZiAocmVzcC5zdGF0dXMgJiYgcmVzcC5kYXRhICYmIHJlc3AuZGF0YS50b3BpY0V4ZXJjaXNlSGFzaCA9PT0gdG9waWNFeGVyY2lzZUhhc2gpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdEV4ZXJjaXNlKHJlc3AuZGF0YSlcbiAgICAgICAgICAvLyBJZiB0aGVyZSdzIGV4cGlyZWQgZ2VuZXJhdGVkIGV4ZXJjaXNlIG9yIG5vIGdlbmVyYXRlZCBleGVyY2lzZSB0byBiZSByZXN0b3JlZFxuICAgICAgICAgIH0gZWxzZSBpZiAoKHJlc3Auc3RhdHVzICYmIHJlc3AuZGF0YSAmJiByZXNwLmRhdGEudG9waWNFeGVyY2lzZUhhc2ggIT09IHRvcGljRXhlcmNpc2VIYXNoKSB8fFxuICAgICAgICAgICAgICAgICAgICAhcmVzcC5zdGF0dXMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlQW5kU2F2ZUV4ZXJjaXNlKHRvcGljSWQsIHVzZXJJZCkudGhlbihyZXNwNSA9PiB7XG4gICAgICAgICAgICAgIGlmIChyZXNwNS5zdGF0dXMgJiYgcmVzcDUuZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdEV4ZXJjaXNlKHJlc3A1LmRhdGEpXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBmYWxzZSwgZXJyTWVzc2FnZTogcmVzcDUuZXJyTWVzc2FnZSB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFdlIHNob3VsZCBuZXZlciBnZXQgaGVyZS4uXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgZXJyb3IhJylcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcmV0cmlldmUgdG9waWMgb3IgdG9waWNFeGVyY2lzZUhhc2g6ICR7cmVzcDIuZXJyTWVzc2FnZSB8fCByZXNwMy5lcnJNZXNzYWdlfWApXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBzdGF0dXM6IGZhbHNlLCBlcnJNZXNzYWdlOiAndG9waWNJZCBhbmQgdXNlcklkIGFyZSByZXF1aXJlZCEnIH0pXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRFeGVyY2lzZXMgKHRvcGljSWQpOiBQcm9taXNlPE5DUmVzcG9uc2U8RXhlcmNpc2VbXT4+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRTZXF1ZWxpemUoKS5xdWVyeShgXG5TRUxFQ1QgZXhlcmNpc2VzLmlkLCBleGVyY2lzZXMuZGF0YSwgZXhlcmNpc2VzLmNyZWF0ZWRBdCwgZXhlcmNpc2VzLnVwZGF0ZWRBdCwgZXhlcmNpc2VzLnN1YnRvcGljSWRcbkZST00gZXhlcmNpc2VzIEFTIGV4ZXJjaXNlc1xuSU5ORVIgSk9JTiBzdWJ0b3BpY3MgQVMgc3VidG9waWMgT04gZXhlcmNpc2VzLnN1YnRvcGljSWQgPSBzdWJ0b3BpYy5pZCBBTkQgc3VidG9waWMudG9waWNJZCA9ICR7dG9waWNJZH1cbk9SREVSIEJZIHN1YnRvcGljLnN1YnRvcGljTm8gQVNDLCBleGVyY2lzZXMuaWQgQVNDO2AsIHsgdHlwZTogU2VxdWVsaXplLlF1ZXJ5VHlwZXMuU0VMRUNUIH1cbiAgICApLnRoZW4ocmVzcCA9PiB7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IHRydWUsIGRhdGE6IHJlc3AgfVxuICAgIH0pXG4gIH1cblxuICAvLyBHaXZlbiB0b3BpY0lkLCBjb21wdXRlcyBoYXNoIHZhbHVlIG9mIHRoZSBhc3NvY2lhdGVkIFRvcGljRXhlcmNpc2UuXG4gIC8vIFRoZSBoYXNoIGlzIGNvbXB1dGVkIGZyb20gZWFjaCBvZiB0aGUgYnVpbGRpbmcgc3VidG9waWMgRXhlcmNpc2VzLlxuICAvLyBJbiBvdGhlciB3b3JkcywgaWYgYW55IHN1YnRvcGljIEV4ZXJjaXNlIGNoYW5nZXMsIGhhc2ggZm9yIHJlc3BlY3RpdmVcbiAgLy8gVG9waWNFeGVyY2lzZSB0aGF0IGRlcGVuZHMgb24gaXQgYWxzbyBjaGFuZ2VzLlxuICBnZXRFeGVyY2lzZXNIYXNoICh0b3BpY0lkKTogUHJvbWlzZTxOQ1Jlc3BvbnNlPHN0cmluZz4+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRFeGVyY2lzZXModG9waWNJZCkudGhlbihyZXNwID0+IHtcbiAgICAgIGlmIChyZXNwLnN0YXR1cyAmJiByZXNwLmRhdGEpIHtcbiAgICAgICAgY29uc3QgY29tYmluZWRIYXNoID0gcmVzcC5kYXRhLnJlZHVjZSgoYWNjLCBoYXNoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGFjYyArIEV4ZXJjaXNlR2VuZXJhdG9yLmdldEhhc2goaGFzaClcbiAgICAgICAgfSwgJycpXG4gICAgICAgIGxldCB0b3BpY0V4ZXJjaXNlSGFzaCA9IEV4ZXJjaXNlR2VuZXJhdG9yLmdldEhhc2goY29tYmluZWRIYXNoKVxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHRydWUsIGRhdGE6IHRvcGljRXhlcmNpc2VIYXNoIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogZmFsc2UsIGVyck1lc3NhZ2U6IHJlc3AuZXJyTWVzc2FnZSB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVBbmRTYXZlRXhlcmNpc2UgKHRvcGljSWQsIHVzZXJJZCk6IFByb21pc2U8TkNSZXNwb25zZTxHZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlPj4ge1xuICAgIHJldHVybiB0aGlzLmdlbmVyYXRlRXhlcmNpc2UodG9waWNJZCkudGhlbihyZXNwID0+IHtcbiAgICAgIGlmIChyZXNwLnN0YXR1cyAmJiByZXNwLmRhdGEpIHtcbiAgICAgICAgY29uc3QgZ2VuZXJhdGVkRXhlcmNpc2UgPSByZXNwLmRhdGFcbiAgICAgICAgLy8gSW4gY2FzZSB0aGF0IHRoZSBleGVyY2lzZSBpcyBubyBsb25nZXIgdXAtdG8tZGF0ZSwgd2UgaGF2ZSB0byBkZWxldGUgc3RhbGUgZ2VuZXJhdGVkIGV4ZXJjaXNlXG4gICAgICAgIHJldHVybiB0aGlzLmdldE1vZGVscygnR2VuZXJhdGVkVG9waWNFeGVyY2lzZScpLmRlc3Ryb3koe3doZXJlOiB7XG4gICAgICAgICAgdG9waWNJZCxcbiAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgc3VibWl0dGVkOiBmYWxzZSxcbiAgICAgICAgICBvbkNsb3VkOiBBcHBDb25maWcuQ0xPVURfU0VSVkVSXG4gICAgICAgIH19KS50aGVuKCgpID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGU8R2VuZXJhdGVkVG9waWNFeGVyY2lzZT4oe1xuICAgICAgICAgICAgbW9kZWxOYW1lOiAnR2VuZXJhdGVkVG9waWNFeGVyY2lzZScsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIHRvcGljSWQsXG4gICAgICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICAgICAgZXhlcmNpc2VEZXRhaWw6IGdlbmVyYXRlZEV4ZXJjaXNlLmV4ZXJjaXNlRGV0YWlsLFxuICAgICAgICAgICAgICB0b3BpY0V4ZXJjaXNlSGFzaDogZ2VuZXJhdGVkRXhlcmNpc2UudG9waWNFeGVyY2lzZUhhc2gsXG4gICAgICAgICAgICAgIGlkZWFsVGltZTogZ2VuZXJhdGVkRXhlcmNpc2UuaWRlYWxUaW1lLFxuICAgICAgICAgICAgICBvbkNsb3VkOiBBcHBDb25maWcuQ0xPVURfU0VSVkVSXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogZmFsc2UsIGVyck1lc3NhZ2U6ICdGYWlsZWQgdG8gZ2VuZXJhdGVkIHRvcGljIGV4ZXJjaXNlOiAnICsgcmVzcC5lcnJNZXNzYWdlIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZ2VuZXJhdGVFeGVyY2lzZSAodG9waWNJZDogbnVtYmVyLCBxdWFudGl0eVZhcmlhYmxlTmFtZTogUXVhbnRpdHlWYXJpYWJsZU5hbWUgPSAncmV2aWV3UXVhbnRpdHknKTogUHJvbWlzZTxOQ1Jlc3BvbnNlPFBhcnRpYWw8R2VuZXJhdGVkVG9waWNFeGVyY2lzZT4+PiB7XG4gICAgcmV0dXJuIFByb21pc2Uuam9pbjxhbnk+KFxuICAgICAgdGhpcy5nZXRFeGVyY2lzZXModG9waWNJZCksXG4gICAgICB0aGlzLmdldEV4ZXJjaXNlc0hhc2godG9waWNJZClcbiAgICApLnNwcmVhZCgocmVzcDogTkNSZXNwb25zZTxFeGVyY2lzZVtdPiwgcmVzcDI6IE5DUmVzcG9uc2U8c3RyaW5nPikgPT4ge1xuICAgICAgaWYgKHJlc3Auc3RhdHVzICYmIHJlc3AuZGF0YSAmJiByZXNwMi5zdGF0dXMgJiYgcmVzcDIuZGF0YSkge1xuICAgICAgICBjb25zdCBleGVyY2lzZXMgPSByZXNwLmRhdGFcbiAgICAgICAgY29uc3QgdG9waWNFeGVyY2lzZUhhc2ggPSByZXNwMi5kYXRhXG4gICAgICAgIHJldHVybiBQcm9taXNlLm1hcChleGVyY2lzZXMsIGV4ZXJjaXNlID0+IHtcbiAgICAgICAgICByZXR1cm4gRXhlcmNpc2VTZXJ2aWNlLmdlbmVyYXRlRXhlcmNpc2UoZXhlcmNpc2UsIHF1YW50aXR5VmFyaWFibGVOYW1lKS50aGVuKHJlc3AgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3Auc3RhdHVzICYmIHJlc3AuZGF0YSkge1xuICAgICAgICAgICAgICAvLyBGaWx0ZXIgb3V0IGVtcHR5IGV4ZXJjaXNlIChpLmUuIGFkZGVkIGJ1dCBubyBjb2RlKVxuICAgICAgICAgICAgICBpZiAoSlNPTi5wYXJzZShyZXNwLmRhdGEua25vd25zIHx8ICdbXScpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcC5kYXRhXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZ2VuZXJhdGUgZXhlcmNpc2Ugd2l0aCBpZD0nICsgZXhlcmNpc2UuaWQgKyAnOiAnICsgcmVzcC5lcnJNZXNzYWdlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pLnRoZW4oKGdlbmVyYXRlZEV4ZXJjaXNlczogUGFydGlhbDxHZW5lcmF0ZWRFeGVyY2lzZT5bXSkgPT4ge1xuICAgICAgICAgIGdlbmVyYXRlZEV4ZXJjaXNlcyA9IGdlbmVyYXRlZEV4ZXJjaXNlcy5maWx0ZXIoZ2VuZXJhdGVkRXhlcmNpc2UgPT4gZ2VuZXJhdGVkRXhlcmNpc2UgIT09IG51bGwpXG4gICAgICAgICAgY29uc3QgaWRlYWxUaW1lID0gZ2VuZXJhdGVkRXhlcmNpc2VzLnJlZHVjZSgoaWRlYWxUaW1lLCBnZW5lcmF0ZWRFeGVyY2lzZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGlkZWFsVGltZSArIChnZW5lcmF0ZWRFeGVyY2lzZS5pZGVhbFRpbWUgfHwgMClcbiAgICAgICAgICB9LCAwKVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXM6IHRydWUsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIGlkZWFsVGltZSxcbiAgICAgICAgICAgICAgdG9waWNFeGVyY2lzZUhhc2gsXG4gICAgICAgICAgICAgIGV4ZXJjaXNlRGV0YWlsOiBKU09OLnN0cmluZ2lmeShnZW5lcmF0ZWRFeGVyY2lzZXMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBhcyBOQ1Jlc3BvbnNlPFBhcnRpYWw8R2VuZXJhdGVkVG9waWNFeGVyY2lzZT4+XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4geyBzdGF0dXM6IGZhbHNlLCBlcnJNZXNzYWdlOiAnRmFpbGVkIHRvIGdldCBleGVyY2lzZXMvaGFzaDogJyArIHJlc3AuZXJyTWVzc2FnZSB8fCByZXNwMi5lcnJNZXNzYWdlIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLy8gRm9ybWF0IEdlbmVyYXRlZFRvcGljRXhlcmNpc2UgZm9yIGNvbnRyb2xsZXIgdXNlcy5cbiAgZm9ybWF0RXhlcmNpc2UgKGdlbmVyYXRlZFRvcGljRXhlcmNpc2U6IFBhcnRpYWw8R2VuZXJhdGVkVG9waWNFeGVyY2lzZT4pOiBQcm9taXNlPE5DUmVzcG9uc2U8Rm9ybWF0dGVkVG9waWNFeGVyY2lzZT4+IHtcbiAgICBjb25zdCB0b3BpY0lkID0gZ2VuZXJhdGVkVG9waWNFeGVyY2lzZS50b3BpY0lkXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGdlbmVyYXRlZEV4ZXJjaXNlczogR2VuZXJhdGVkRXhlcmNpc2VbXSA9IEpTT04ucGFyc2UoZ2VuZXJhdGVkVG9waWNFeGVyY2lzZS5leGVyY2lzZURldGFpbCB8fCAnJylcbiAgICAgIHJldHVybiBQcm9taXNlLm1hcChnZW5lcmF0ZWRFeGVyY2lzZXMsIGdlbmVyYXRlZEV4ZXJjaXNlID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZE9uZTxFeGVyY2lzZT4oeyBtb2RlbE5hbWU6ICdFeGVyY2lzZScsIHNlYXJjaENsYXVzZTogeyBpZDogZ2VuZXJhdGVkRXhlcmNpc2UuZXhlcmNpc2VJZCB9IH0pLnRoZW4ocmVzcDIgPT4ge1xuICAgICAgICAgIGlmIChyZXNwMi5zdGF0dXMgJiYgcmVzcDIuZGF0YSkge1xuICAgICAgICAgICAgbGV0IGV4ZXJjaXNlU29sdmVyID0gRXhlcmNpc2VHZW5lcmF0b3IuZ2V0RXhlcmNpc2VTb2x2ZXIocmVzcDIuZGF0YS5kYXRhKVxuICAgICAgICAgICAgbGV0IHVua25vd25zOiBBcnJheTxzdHJpbmdbXT4gPSBbXVxuICAgICAgICAgICAgbGV0IGZvcm1hdHRlZFF1ZXN0aW9uc1Byb21pc2VzOiBBcnJheTxQcm9taXNlPHN0cmluZz4+ID0gW11cbiAgICAgICAgICAgIEpTT04ucGFyc2UoZ2VuZXJhdGVkRXhlcmNpc2Uua25vd25zKS5mb3JFYWNoKGtub3ducyA9PiB7XG4gICAgICAgICAgICAgIGZvcm1hdHRlZFF1ZXN0aW9uc1Byb21pc2VzLnB1c2goZXhlcmNpc2VTb2x2ZXIuZm9ybWF0UXVlc3Rpb24oa25vd25zKSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBKU09OLnBhcnNlKGdlbmVyYXRlZEV4ZXJjaXNlLnVua25vd25zKS5mb3JFYWNoKF91bmtub3ducyA9PiB7XG4gICAgICAgICAgICAgIHVua25vd25zLnB1c2goT2JqZWN0LmtleXMoX3Vua25vd25zKSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoZm9ybWF0dGVkUXVlc3Rpb25zUHJvbWlzZXMpLnRoZW4ocmVuZGVyZWRRdWVzdGlvbnMgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHJlbmRlcmVkUXVlc3Rpb25zLFxuICAgICAgICAgICAgICAgIHVua25vd25zXG4gICAgICAgICAgICAgIH0gYXMgRm9ybWF0dGVkRXhlcmNpc2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwMi5lcnJNZXNzYWdlKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pLnRoZW4oZm9ybWF0dGVkRXhlcmNpc2VzID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZE9uZTxUb3BpYz4oeyBtb2RlbE5hbWU6ICdUb3BpYycsIHNlYXJjaENsYXVzZTogeyBpZDogdG9waWNJZCB9IH0pLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgICAgaWYgKHJlc3Auc3RhdHVzICYmIHJlc3AuZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgc3RhdHVzOiB0cnVlLFxuICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgdG9waWNOYW1lOiByZXNwLmRhdGEudG9waWMsXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVkRXhlcmNpc2VzLFxuICAgICAgICAgICAgICAgIGlkZWFsVGltZTogZ2VuZXJhdGVkVG9waWNFeGVyY2lzZS5pZGVhbFRpbWUgfHwgMCxcbiAgICAgICAgICAgICAgICBlbGFwc2VkVGltZTogVXRpbHMuZ2V0RWxhcHNlZFRpbWUoZ2VuZXJhdGVkVG9waWNFeGVyY2lzZS5jcmVhdGVkQXQpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBmYWxzZSwgZXJyTWVzc2FnZTogJycgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2cuZXJyb3IoVEFHLCAnRmFpbGVkIHRvIHBhcnNlIGdlbmVyYXRlZFRvcGljRXhlcmlzZTogJyArIEpTT04uc3RyaW5naWZ5KGdlbmVyYXRlZFRvcGljRXhlcmNpc2UpKVxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycilcbiAgICAgIC8vIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBzdGF0dXM6IGZhbHNlLCBlcnJNZXNzYWdlOiAnRmFpbGVkIHRvIHBhcnNlIGdlbmVyYXRlZFRvcGljRXhlcmlzZTogJyArIEpTT04uc3RyaW5naWZ5KGdlbmVyYXRlZFRvcGljRXhlcmNpc2UpIH0pXG4gICAgfVxuICB9XG5cbiAgLy8gR3JhZGUgYSBUb3BpY0V4ZXJjaXNlXG4gIGdyYWRlRXhlcmNpc2UgKGdlbmVyYXRlZEV4ZXJjaXNlRGV0YWlsczogUGFydGlhbDxHZW5lcmF0ZWRFeGVyY2lzZT5bXSwgYW5zd2VyczogVG9waWNFeGVyY2lzZUFuc3dlcik6IFByb21pc2U8TkNSZXNwb25zZTxUb3BpY0V4ZXJjaXNlR3JhZGU+PiB7XG4gICAgcmV0dXJuIFByb21pc2UubWFwKGdlbmVyYXRlZEV4ZXJjaXNlRGV0YWlscywgZXhlcmNpc2VEZXRhaWwgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMucmVhZE9uZTxFeGVyY2lzZT4oeyBtb2RlbE5hbWU6ICdFeGVyY2lzZScsIHNlYXJjaENsYXVzZTogeyBpZDogZXhlcmNpc2VEZXRhaWwuZXhlcmNpc2VJZCB9IH0pLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgIGlmIChyZXNwLnN0YXR1cyAmJiByZXNwLmRhdGEpIHtcbiAgICAgICAgICBjb25zdCBleGVyY2lzZSA9IHJlc3AuZGF0YVxuICAgICAgICAgIGNvbnN0IGV4ZXJjaXNlU29sdmVyID0gRXhlcmNpc2VHZW5lcmF0b3IuZ2V0RXhlcmNpc2VTb2x2ZXIoZXhlcmNpc2UuZGF0YSlcbiAgICAgICAgICBjb25zdCBrbm93bnMgPSBKU09OLnBhcnNlKGV4ZXJjaXNlRGV0YWlsLmtub3ducyB8fCAnJylcbiAgICAgICAgICBjb25zdCB1bmtub3ducyA9IEpTT04ucGFyc2UoZXhlcmNpc2VEZXRhaWwudW5rbm93bnMgfHwgJycpXG4gICAgICAgICAgcmV0dXJuIGtub3ducy5tYXAoKGtub3duLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHsga25vd24sIGNvcnJlY3RBbnN3ZXI6IHVua25vd25zW2luZGV4XSwgaXNBbnN3ZXJGbjogZXhlcmNpc2VTb2x2ZXIuaXNBbnN3ZXIuYmluZChleGVyY2lzZVNvbHZlcikgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeGVyY2lzZSB3aXRoIGlkPScgKyBleGVyY2lzZURldGFpbC5leGVyY2lzZUlkICsgJyBjb3VsZCBub3QgYmUgZm91bmQhJylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KS50aGVuKHRvcGljRXhlcmNpc2VBcnJheSA9PiB7XG4gICAgICAvLyBOb3csIHdlIGhhdmUgMyBsZXZlbCBhcnJheXM6XG4gICAgICAvLyAxIC0+IFRvcGljIEV4ZXJjaXNlLiAyIC0+IEV4ZXJjaXNlLiAzIC0+IFF1ZXN0aW9uXG4gICAgICAvLyBCdXQgc2luY2UgdXNlckFuc3dlciBpcyBhIDEtbGV2ZWwgYXJyYXkgb2YgcXVlc3Rpb24sIHdlIG5lZWQgdG8gZmxhdHRlbiB3aGF0IHdlIGhhdmUgdG8gYmUgZWFzaWx5IHVzZWRcbiAgICAgIHJldHVybiB0b3BpY0V4ZXJjaXNlQXJyYXkucmVkdWNlKChhY2MsIGV4ZXJjaXNlQXJyYXkpID0+IHtcbiAgICAgICAgcmV0dXJuIGFjYy5jb25jYXQoZXhlcmNpc2VBcnJheSlcbiAgICAgIH0sIFtdKS5yZWR1Y2UoKGFjYywgcXVlc3Rpb25BcnJheSkgPT4ge1xuICAgICAgICByZXR1cm4gYWNjLmNvbmNhdChxdWVzdGlvbkFycmF5KVxuICAgICAgfSwgW10pXG4gICAgfSkudGhlbihyZXN1bHRzID0+IHtcbiAgICAgIGNvbnN0IHsgbnVtQ29ycmVjdEFuc3dlcnMsIGNvcnJlY3RBbnN3ZXJzLCBpc0NvcnJlY3QgfSA9IHJlc3VsdHMucmVkdWNlKChhY2MsIHJlc3VsdCwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgaXNDb3JyZWN0ID0gcmVzdWx0LmlzQW5zd2VyRm4ocmVzdWx0Lmtub3duLCBhbnN3ZXJzW2luZGV4XSlcbiAgICAgICAgYWNjLm51bUNvcnJlY3RBbnN3ZXJzICs9IGlzQ29ycmVjdCA/IDEgOiAwXG4gICAgICAgIGFjYy5jb3JyZWN0QW5zd2Vycy5wdXNoKHJlc3VsdC5jb3JyZWN0QW5zd2VyKVxuICAgICAgICBhY2MuaXNDb3JyZWN0LnB1c2goaXNDb3JyZWN0KVxuICAgICAgICByZXR1cm4gYWNjXG4gICAgICB9LCB7IG51bUNvcnJlY3RBbnN3ZXJzOiAwLCBjb3JyZWN0QW5zd2VyczogW10sIGlzQ29ycmVjdDogW10gfSlcbiAgICAgIGNvbnN0IG51bVF1ZXN0aW9ucyA9IHJlc3VsdHMubGVuZ3RoXG4gICAgICBjb25zdCBncmFkZTogVG9waWNFeGVyY2lzZUdyYWRlID0ge1xuICAgICAgICBudW1RdWVzdGlvbnMsXG4gICAgICAgIG51bUNvcnJlY3RBbnN3ZXJzLFxuICAgICAgICBjb3JyZWN0QW5zd2VycyxcbiAgICAgICAgaXNDb3JyZWN0LFxuICAgICAgICBzY29yZTogcGFyc2VGbG9hdChudW1Db3JyZWN0QW5zd2VycykgLyBudW1RdWVzdGlvbnMgKiAxMDBcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IHN0YXR1czogdHJ1ZSwgZGF0YTogZ3JhZGUgfVxuICAgIH0pXG4gIH1cblxuICAvLyBBc3NpZ24gYW5zd2VycyB0byBHZW5lcmF0ZWRFeGVyY2lzZVtdXG4gIGluc2VydEFuc3dlcnMgKGV4ZXJjaXNlRGV0YWlsczogUGFydGlhbDxHZW5lcmF0ZWRFeGVyY2lzZT5bXSwgYW5zd2VyczogVG9waWNFeGVyY2lzZUFuc3dlcik6IFBhcnRpYWw8R2VuZXJhdGVkRXhlcmNpc2U+W10ge1xuICAgIC8vIFRoaXMgaXMgYSBiaXQgYW5ub3lpbmcuLlxuICAgIC8vIFNvIGFuc3dlciBpcyB3aGF0IGEgc3R1ZGVudCB3b3VsZCBzdWJtaXQuIEl0J3MgYSBvbmUgZGltZW5zaW9uYWwgYXJyYXkgb2YgYW5zd2VycyBmb3IgZWFjaCBvZiB0aGUgZXhlcmNpc2VzXG4gICAgLy8gV2Ugd2FudCB0byBzYXZlIHVzZXIgYW5zd2VyIGludG8gZXhlcmNpc2VEZXRhaWwgc28gdGhhdCB3ZSBjYW4gZGVidWcgcHJvYmxlbXMuIChpLmUuIHdyb25nIHNjb3JpbmcpXG4gICAgLy8gSW4gb3JkZXIgdG8gbWFrZSBzdXJlIGVhY2ggYW5zd2VyIGdvZXMgdG8gY29ycmVjdCBleGVyY2lzZSBkZXRhaWwsIHdlIGhhdmUgd2luZCB0aGVtIHVwXG4gICAgLy8gaW4gdGhlIHNhbWUgb3JkZXIgd2hlbiB3ZSB1bndpbmQuIElmIHlvdSdyZSBjb25mdXNlZCBhYm91dCB0aGlzIGNvZGU6XG4gICAgLy8gMS4gVHJ5IHRvIGxvb2sgYXQgTXlTUUwgdGFibGUgc3RydWN0dXJlIGZvciBnZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlc1xuICAgIC8vIDIuIFJlbWVtYmVyIHRoYXQgZXhlcmNpc2VEZXRhaWwgdGhlcmUgaXMgc3RyaW5naWZpZWQgdmVyc2lvbiBvZiBlYWNoIG9mIGdlbmVyYXRlZEV4ZXJjaXNlcyB0aGF0IG1ha2VzIHVwXG4gICAgLy8gICAgYSB0b3BpYyBleGVyY2lzZS5cbiAgICBsZXQgYW5zd2VySW5kZXggPSAwXG4gICAgcmV0dXJuIGV4ZXJjaXNlRGV0YWlscy5tYXAoZXhlcmNpc2VEZXRhaWwgPT4ge1xuICAgICAgY29uc3QgZXhlcmNpc2VEZXRhaWxBbnN3ZXJzOiBBcnJheTxhbnk+ID0gW11cbiAgICAgIEpTT04ucGFyc2UoZXhlcmNpc2VEZXRhaWwua25vd25zIHx8ICcnKS5mb3JFYWNoKF8gPT4ge1xuICAgICAgICBleGVyY2lzZURldGFpbEFuc3dlcnMucHVzaChhbnN3ZXJzW2Fuc3dlckluZGV4XSlcbiAgICAgICAgYW5zd2VySW5kZXgrK1xuICAgICAgfSlcbiAgICAgIGV4ZXJjaXNlRGV0YWlsLnVzZXJBbnN3ZXIgPSBKU09OLnN0cmluZ2lmeShleGVyY2lzZURldGFpbEFuc3dlcnMpXG4gICAgICByZXR1cm4gZXhlcmNpc2VEZXRhaWxcbiAgICB9KVxuICB9XG5cbiAgLy8gVXBkYXRlIEdlbmVyYXRlZFRvcGljRXhlcmNpc2UgYXMgc3VibWl0dGVkXG4gIC8vIFRPRE86IFdlIGFkZGVkIHVzZXJBbnN3ZXIgY29sdW1uIHRvIEdlbmVyYXRlZFRvcGljRXhlcmNpc2UsIHNvIHdlIHNob3VsZCBiZSBhYmxlIHRvXG4gIC8vICAgICAgIGp1c3QgcHV0IHRoZSBhbnN3ZXIgdGhlcmU/IEhvd2V2ZXIgY3VycmVudCBhcHByb2FjaCBtYWtlcyBpdCByZWFsbHkgZWFzeVxuICAvLyAgICAgICB0byBmaWd1cmUgb3V0IHdoYXQgbWlzdGFrZXMgdXNlciBpcyBtYWtpbmcuXG4gIGZpbmlzaEV4ZXJjaXNlIChnZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlSWQ6IG51bWJlciwgc2NvcmU6IG51bWJlciwgdGltZUZpbmlzaDogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgZXhlcmNpc2VEZXRhaWw6IFBhcnRpYWw8R2VuZXJhdGVkRXhlcmNpc2U+W10sIGFuc3dlcnM6IFRvcGljRXhlcmNpc2VBbnN3ZXIpOiBQcm9taXNlPE5DUmVzcG9uc2U8bnVtYmVyPj4ge1xuICAgIGNvbnN0IHVwZGF0ZWRFeGVyY2lzZURldGFpbCA9IHRoaXMuaW5zZXJ0QW5zd2VycyhleGVyY2lzZURldGFpbCwgYW5zd2VycylcbiAgICByZXR1cm4gdGhpcy51cGRhdGU8R2VuZXJhdGVkVG9waWNFeGVyY2lzZT4oe1xuICAgICAgbW9kZWxOYW1lOiAnR2VuZXJhdGVkVG9waWNFeGVyY2lzZScsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGlkOiBnZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlSWQsXG4gICAgICAgIHN1Ym1pdHRlZDogdHJ1ZSxcbiAgICAgICAgc3VibWl0dGVkQXQ6IG1vbWVudCgpLmxvY2FsKCkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyksXG4gICAgICAgIG9uQ2xvdWQ6IEFwcENvbmZpZy5DTE9VRF9TRVJWRVIsXG4gICAgICAgIHNjb3JlLFxuICAgICAgICB0aW1lRmluaXNoLFxuICAgICAgICBleGVyY2lzZURldGFpbDogSlNPTi5zdHJpbmdpZnkodXBkYXRlZEV4ZXJjaXNlRGV0YWlsKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvLyBXaGVuIHVzZXIgd2FudHMgdG8gZG8gVG9waWNFeGVyY2lzZSwgYSBHZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlIG1ldGEgaW5mb3JtYXRpb24gaXMgY3JlYXRlZFxuICAvLyB0byBzdG9yZSBsb2NhbCBpbmZvcm1hdGlvbiBhYm91dCB0aGF0IHBhcnRpY3VsYXIgZXhlcmNpc2UgKGkuZS4gcmFuZG9tIHF1ZXN0aW9ucylcbiAgLy8gRm9yIGVhY2ggdXNlciwgdGhlcmUncyBleGFjdGx5IG9uZSBHZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlIHdpdGggc3VibWl0dGVkID0gZmFsc2UgZm9yIGVhY2hcbiAgLy8gVG9waWNFeGVyY2lzZXNcbiAgZ2V0R2VuZXJhdGVkVG9waWNFeGVyY2lzZSAodXNlcklkLCB0b3BpY0lkKTogUHJvbWlzZTxOQ1Jlc3BvbnNlPEdlbmVyYXRlZFRvcGljRXhlcmNpc2U+PiB7XG4gICAgcmV0dXJuIHRoaXMucmVhZE9uZTxHZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlPih7XG4gICAgICBtb2RlbE5hbWU6ICdHZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlJyxcbiAgICAgIHNlYXJjaENsYXVzZToge1xuICAgICAgICB1c2VySWQsXG4gICAgICAgIHRvcGljSWQsXG4gICAgICAgIHN1Ym1pdHRlZDogZmFsc2UsXG4gICAgICAgIG9uQ2xvdWQ6IEFwcENvbmZpZy5DTE9VRF9TRVJWRVJcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZ2V0U3RhckJhZGdlcyAodXNlcklkLCB0b3BpY0lkKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U2VxdWVsaXplKCkucXVlcnkoYFxuU0VMRUNUIHNjb3JlIEZST00gZ2VuZXJhdGVkVG9waWNFeGVyY2lzZXNcbldIRVJFIHN1Ym1pdHRlZCA9IDEgQU5EIHRvcGljSWQgPSAke3RvcGljSWR9IEFORCB1c2VySWQgPSAke3VzZXJJZH1cbk9SREVSIEJZIHNjb3JlIERFU0MgTElNSVQgNDtgLFxuICAgIHsgdHlwZTogU2VxdWVsaXplLlF1ZXJ5VHlwZXMuU0VMRUNUIH0pLnRoZW4oZGF0YXMgPT4ge1xuICAgICAgY29uc3Qgc3RhcnMgPSBkYXRhcy5yZWR1Y2UoKGFjYywgZGF0YSkgPT4ge1xuICAgICAgICBpZiAocGFyc2VJbnQoZGF0YS5zY29yZSwgMTApID49IDgwKSB7XG4gICAgICAgICAgcmV0dXJuIGFjYyArIDFcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gYWNjXG4gICAgICAgIH1cbiAgICAgIH0sIDApXG4gICAgICByZXR1cm4geyBzdGF0dXM6IHRydWUsIGRhdGE6IHsgc3RhcnMgfSB9XG4gICAgfSlcbiAgfVxuXG4gIGdldFJlbmRlcmVkU3RhckJhZGdlcyAodXNlcklkLCB0b3BpY0lkKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RhckJhZGdlcyh1c2VySWQsIHRvcGljSWQpLnRoZW4ocmVzcCA9PiB7XG4gICAgICBpZiAocmVzcC5zdGF0dXMpIHtcbiAgICAgICAgY29uc3Qgc3RhcnMgPSByZXNwLmRhdGEuc3RhcnNcbiAgICAgICAgY29uc3QgaHRtbCA9IHB1Zy5yZW5kZXJGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9hcHAvdmlld3Mvbm9uLXBhZ2VzL3N0YXJzLnB1ZycpLCB7IHN0YXJzIH0pXG4gICAgICAgIHJldHVybiB7IHN0YXR1czogdHJ1ZSwgZGF0YTogeyBodG1sLCBzdGFycyB9IH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZXNwXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q2hlY2ttYXJrQmFkZ2UgKHVzZXJJZCwgdG9waWNJZCwgcmVuZGVyID0gZmFsc2UpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTZXF1ZWxpemUoKS5xdWVyeShgXG5TRUxFQ1Qgc2NvcmUgRlJPTSBnZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlc1xuV0hFUkUgc3VibWl0dGVkID0gMSBBTkQgdG9waWNJZCA9ICR7dG9waWNJZH0gQU5EIHVzZXJJZCA9ICR7dXNlcklkfSBBTkQgc2NvcmUgPiA4MFxuT1JERVIgQlkgc2NvcmUgREVTQyBMSU1JVCAxO2AsXG4gICAgeyB0eXBlOiBTZXF1ZWxpemUuUXVlcnlUeXBlcy5TRUxFQ1QgfSkudGhlbihkYXRhcyA9PiB7XG4gICAgICBjb25zdCBpc0NoZWNrZWQgPSBkYXRhcy5sZW5ndGggPiAwXG4gICAgICBpZiAocmVuZGVyKSB7XG4gICAgICAgIGNvbnN0IGh0bWwgPSBwdWcucmVuZGVyRmlsZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vYXBwL3ZpZXdzL25vbi1wYWdlcy9jZWNrbWFyay5wdWcnKSwgeyBpc0NoZWNrZWQgfSlcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiB0cnVlLCBkYXRhOiBodG1sIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogdHJ1ZSwgZGF0YTogeyBpc0NoZWNrZWQgfSB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGdldFRpbWVyQmFkZ2VzICh1c2VySWQsIHRvcGljSWQpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTZXF1ZWxpemUoKS5xdWVyeShgXG5TRUxFQ1Qgc2NvcmUgRlJPTSBnZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlc1xuV0hFUkUgc3VibWl0dGVkID0gMSBBTkQgdG9waWNJZCA9ICR7dG9waWNJZH0gQU5EIHVzZXJJZCA9ICR7dXNlcklkfVxuQU5EIHRpbWVGaW5pc2ggPCBpZGVhbFRpbWUgQU5EIHNjb3JlID0gMTAwXG5PUkRFUiBCWSBzY29yZSBERVNDIExJTUlUIDE7YCxcbiAgICB7IHR5cGU6IFNlcXVlbGl6ZS5RdWVyeVR5cGVzLlNFTEVDVCB9KS50aGVuKGRhdGFzID0+IHtcbiAgICAgIGNvbnN0IHRpbWVycyA9IGRhdGFzLnJlZHVjZSgoYWNjLCBkYXRhKSA9PiB7XG4gICAgICAgIGlmIChwYXJzZUludChkYXRhLnNjb3JlLCAxMCkgPj0gODApIHtcbiAgICAgICAgICByZXR1cm4gYWNjICsgMVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBhY2NcbiAgICAgICAgfVxuICAgICAgfSwgMClcblxuICAgICAgcmV0dXJuIHsgc3RhdHVzOiB0cnVlLCBkYXRhOiB7IHRpbWVycyB9IH1cbiAgICB9KVxuICB9XG5cbiAgZ2V0UmVuZGVyZWRUaW1lckJhZGdlcyAodXNlcklkLCB0b3BpY0lkKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGltZXJCYWRnZXModXNlcklkLCB0b3BpY0lkKS50aGVuKHJlc3AgPT4ge1xuICAgICAgaWYgKHJlc3Auc3RhdHVzKSB7XG4gICAgICAgIGNvbnN0IHRpbWVycyA9IHJlc3AuZGF0YS50aW1lcnNcbiAgICAgICAgY29uc3QgaHRtbCA9IHB1Zy5yZW5kZXJGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9hcHAvdmlld3Mvbm9uLXBhZ2VzL3RpbWVycy5wdWcnKSwgeyB0aW1lcnMgfSlcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiB0cnVlLCBkYXRhOiBodG1sIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAocmVzcClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgICAvLyBHZXQgbGVhZGVyYm9hcmQgZGF0YVxuICBnZXRSYW5raW5nICh0b3BpY0lkKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U2VxdWVsaXplKCkucXVlcnkoXG5gU0VMRUNUIE1JTih0aW1lRmluaXNoKSBBUyB0aW1lRmluaXNoLCB1c2VySWQsIHVzZXJzLmZ1bGxOYW1lIEFTIGZ1bGxOYW1lLCB1c2Vycy5ncmFkZSBBUyBncmFkZSwgc2Nob29scy5uYW1lIEFTIHNjaG9vbE5hbWVcbkZST00gZ2VuZXJhdGVkVG9waWNFeGVyY2lzZXMgSU5ORVIgSk9JTiB1c2VycyBPTiB1c2Vycy5pZCA9IGdlbmVyYXRlZFRvcGljRXhlcmNpc2VzLnVzZXJJZCBJTk5FUiBKT0lOIHNjaG9vbHMgT04gc2Nob29scy5pZCA9IHVzZXJzLnNjaG9vbElkXG5XSEVSRSBzdWJtaXR0ZWQgPSBUUlVFIEFORCB0b3BpY0lkID0gJHt0b3BpY0lkfSBBTkQgc2NvcmUgPSAxMDAgQU5EIHRpbWVGaW5pc2ggSVMgTk9UIE5VTEwgR1JPVVAgQlkgdXNlcklkIE9SREVSIEJZIE1JTih0aW1lRmluaXNoKSBMSU1JVCAxMDtgLFxuICAgIHsgdHlwZTogU2VxdWVsaXplLlF1ZXJ5VHlwZXMuU0VMRUNUIH0pLnRoZW4ocmVzcCA9PiB7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IHRydWUsIGRhdGE6IHJlc3AgfVxuICAgIH0pXG4gIH1cblxuICBnZXRSZW5kZXJlZExlYWRlcmJvYXJkICh0b3BpY0lkKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UmFua2luZyh0b3BpY0lkKS50aGVuKHJlc3AgPT4ge1xuICAgICAgaWYgKHJlc3Auc3RhdHVzKSB7XG4gICAgICAgIGNvbnN0IGV4ZXJjaXNlRGF0YSA9IHJlc3AuZGF0YVxuICAgICAgICBjb25zdCBodG1sID0gcHVnLnJlbmRlckZpbGUocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL2FwcC92aWV3cy9ub24tcGFnZXMvcmFua2luZy5wdWcnKSwgeyBleGVyY2lzZURhdGEgfSlcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiB0cnVlLCBkYXRhOiBodG1sIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZXNwXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8vIEdldCB0aGUgbnVtYmVyIG9mIHJhbmsgaW4gbGVhZGVyYm9hcmRcbiAgZ2V0Q3VycmVudFJhbmtpbmcgKHRpbWVGaW5pc2gsIHRvcGljSWQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgcXVlcnlEQiA9IGBTRUxFQ1QgQ09VTlQoKikgQVMgdG90YWxcbkZST00gKFNFTEVDVCBDT1VOVCgqKSBGUk9NIGdlbmVyYXRlZFRvcGljRXhlcmNpc2VzXG5XSEVSRSBzdWJtaXR0ZWQgPSBUUlVFIEFORCB0aW1lRmluaXNoIDwgJHt0aW1lRmluaXNofSBBTkQgdG9waWNJZCA9ICR7dG9waWNJZH0gQU5EIHNjb3JlID0gMTAwIEFORCB0aW1lRmluaXNoIElTIE5PVCBOVUxMXG5HUk9VUCBCWSB1c2VySWRcbk9SREVSIEJZIE1JTih0aW1lRmluaXNoKSkgQVMgdG90YWxyb3c7YFxuICAgICAgcmV0dXJuIHRoaXMuZ2V0U2VxdWVsaXplKCkucXVlcnkocXVlcnlEQixcbiAgICAgICAgeyB0eXBlOiBTZXF1ZWxpemUuUXVlcnlUeXBlcy5TRUxFQ1QgfSkudGhlbihyZXNwID0+IHtcbiAgICAgICAgICByZXNvbHZlKHsgc3RhdHVzOiB0cnVlLCBkYXRhOiB7IGNvdW50OiByZXNwWzBdLnRvdGFsIH0gfSlcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICB9KVxuICAgIH0pXG4gIH1cblxuICAvLyBHZXQgdGhlIG51bWJlciBvZiBzdWJtaXNzaW9ucyBpbiB0aGUgbGVhZGVyYm9hcmRcbiAgZ2V0VG90YWxSYW5raW5nICh0b3BpY0lkKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCBxdWVyeURCID0gYFNFTEVDVCBDT1VOVCgqKSBBUyB0b3RhbFxuRlJPTSAoU0VMRUNUIENPVU5UKCopIEZST00gZ2VuZXJhdGVkVG9waWNFeGVyY2lzZXMgV0hFUkUgc3VibWl0dGVkID0gVFJVRSBBTkQgdG9waWNJZCA9ICR7dG9waWNJZH0gQU5EIHNjb3JlID0gMTAwIEFORCB0aW1lRmluaXNoIElTIE5PVCBOVUxMXG5HUk9VUCBCWSB1c2VySWRcbk9SREVSIEJZIE1JTih0aW1lRmluaXNoKSkgQVMgdG90YWxyb3c7YFxuICAgICAgcmV0dXJuIHRoaXMuZ2V0U2VxdWVsaXplKCkucXVlcnkocXVlcnlEQixcbiAgICAgICAgeyB0eXBlOiBTZXF1ZWxpemUuUXVlcnlUeXBlcy5TRUxFQ1QgfSkudGhlbihyZXNwID0+IHtcbiAgICAgICAgICByZXNvbHZlKHsgc3RhdHVzOiB0cnVlLCBkYXRhOiB7IGNvdW50OiByZXNwWzBdLnRvdGFsIH0gfSlcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICB9KVxuICAgIH0pXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IFRvcGljRXhlcmNpc2VTZXJ2aWNlKClcbiJdfQ==
