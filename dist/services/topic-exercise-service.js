"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),crud_service_neo_1=require("./crud-service-neo"),exercise_generator_1=require("../lib/exercise_generator/exercise-generator"),exercise_service_1=require("./exercise-service");let path=require("path"),log=require("npmlog"),pug=require("pug"),moment=require("moment"),Sequelize=require("sequelize");const AppConfig=require(path.join(__dirname,"../app-config")),Utils=require(path.join(__dirname,"../lib/utils")),TAG="TopicExerciseService";class TopicExerciseService extends crud_service_neo_1.default{getTopic(e){return this.readOne({modelName:"Topic",searchClause:{id:e}})}getFormattedExercise(e,t){return e&&t?Promise.join(this.getExercises(e),this.getGeneratedTopicExercise(t,e),this.getExercisesHash(e),this.getTopic(e)).spread((r,s,i,a)=>{if(i.status&&a.status){const a=i.data;if(s.status&&s.data&&s.data.topicExerciseHash===a)return this.formatGeneratedTopicExercise(s.data);if(r.status&&r.data&&(s.status&&s.data&&s.data.topicExerciseHash!==a||!s.status))return this.generateTopicExercise(e,t,r.data).then(e=>e.status&&e.data?this.formatGeneratedTopicExercise(e.data):{status:!1,errMessage:e.errMessage});throw new Error("Unexpected error!")}throw new Error(`Failed to retrieve topic or topicExerciseHash: ${i.errMessage||a.errMessage}`)}):Promise.resolve({status:!1,errMessage:"topicId and userId are required!"})}getExercises(e){return log.verbose(TAG,`course.service.getExerciseRelatedWithTopicId.GET (topicId): ${e}`),this.getSequelize().query(`\n  SELECT exercises.id, exercises.data, exercises.createdAt, exercises.updatedAt, exercises.subtopicId\n  FROM exercises AS exercises\n  INNER JOIN subtopics AS subtopic ON exercises.subtopicId = subtopic.id AND subtopic.topicId = ${e}\n  ORDER BY subtopic.subtopicNo ASC, exercises.id ASC;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>({status:!0,data:e}))}getExercisesHash(e){return this.getExercises(e).then(e=>{if(e.status&&e.data){const t=e.data.reduce((e,t)=>e+exercise_generator_1.default.getHash(t),"");return{status:!0,data:exercise_generator_1.default.getHash(t)}}return{status:!1,errMessage:e.errMessage}})}generateTopicExercise(e,t,r){return this.getExercisesHash(e).then(s=>{if(s.status&&s.data){const i=s.data;return Promise.map(r,e=>exercise_service_1.default.generateExercise(e,!0).then(e=>{if(e.status){return JSON.parse(e.data.exerciseData.knowns).length>0?{exerciseData:e.data.exerciseData}:null}return null})).then(r=>{const s=[];let a=0;return r.filter(function(e){return null!=e}).forEach(e=>{a+=e.exerciseData.idealTime,s.push(e.exerciseData)}),this.getModels("GeneratedTopicExercise").destroy({where:{topicId:e,userId:t,submitted:!1,onCloud:AppConfig.CLOUD_SERVER}}).then(()=>this.create({modelName:"GeneratedTopicExercise",data:{topicId:e,userId:t,exerciseDetail:JSON.stringify(s),topicExerciseHash:i,idealTime:a,onCloud:AppConfig.CLOUD_SERVER}}))})}return{status:!1,errMessage:"Failed to retrieve exercise hash!"}})}generateExercises(e){return Promise.map(e,e=>exercise_service_1.default.generateExercise(e,!0).then(e=>{if(e.status){return JSON.parse(e.data.exerciseData.knowns).length>0?{exerciseData:e.data.exerciseData,formatted:e.data.formatted}:null}return null})).then(e=>{const t=[],r=[];let s=0;return e.filter(function(e){return null!=e}).forEach(e=>{s+=e.exerciseData.idealTime,t.push(e.exerciseData),r.push(e.formatted)}),{status:!0,data:{exerciseData:t,formatted:r,idealTime:s}}})}formatGeneratedTopicExercise(e){const t=e.topicId,r=JSON.parse(e.exerciseDetail);return Promise.map(r,e=>this.readOne({modelName:"Exercise",searchClause:{id:e.exerciseId}}).then(t=>{if(t.status&&t.data){let r=exercise_generator_1.default.getExerciseSolver(t.data.data),s=[],i=[];return JSON.parse(e.knowns).forEach(e=>{i.push(r.formatQuestion(e))}),JSON.parse(e.unknowns).forEach(e=>{s.push(Object.keys(e))}),Promise.all(i).then(e=>({renderedQuestions:e,unknowns:s}))}throw new Error(t.errMessage)})).then(r=>this.readOne({modelName:"Topic",searchClause:{id:t}}).then(t=>t.status&&t.data?{status:!0,data:{topicName:t.data.topic,formattedExercises:r,idealTime:e.idealTime,elapsedTime:Utils.getElapsedTime(e.createdAt)}}:{status:!1,errMessage:""}))}formatExercises(e){return Promise.map(e,e=>this.readOne({modelName:"Exercise",searchClause:{id:e.exerciseId}}).then(t=>{if(t.status&&t.data){let r=exercise_generator_1.default.getExerciseSolver(t.data.data),s=[],i=[];return JSON.parse(e.knowns).forEach(e=>{i.push(r.formatQuestion(e))}),JSON.parse(e.unknowns).forEach(e=>{s.push(Object.keys(e))}),Promise.all(i).then(e=>({renderedQuestions:e,unknowns:s}))}throw new Error(t.errMessage)})).then(e=>({status:!0,data:e}))}checkAnswer(e,t){return Promise.map(e,e=>this.readOne({modelName:"Exercise",searchClause:{id:e.exerciseId}}).then(t=>{if(t.status&&t.data){const r=t.data,s=exercise_generator_1.default.getExerciseSolver(r.data),i=JSON.parse(e.knowns),a=JSON.parse(e.unknowns);return i.map((e,t)=>({known:e,unknown:a[t],isAnswerFn:s.isAnswer.bind(s)}))}throw new Error("Exercise with id="+e.exerciseId+" could not be found!")})).then(e=>{return{status:!0,data:e.reduce((e,t)=>e.concat(t),[]).map((e,r)=>({isCorrect:e.isAnswerFn(e.known,t[r]),unknown:e.unknown}))}})}gradeExercise(e,t){return Promise.map(e,e=>this.readOne({modelName:"Exercise",searchClause:{id:e.exerciseId}}).then(t=>{if(t.status&&t.data){const r=t.data,s=exercise_generator_1.default.getExerciseSolver(r.data),i=JSON.parse(e.knowns),a=JSON.parse(e.unknowns);return i.map((e,t)=>({known:e,correctAnswer:a[t],isAnswerFn:s.isAnswer.bind(s)}))}throw new Error("Exercise with id="+e.exerciseId+" could not be found!")})).then(e=>e.reduce((e,t)=>e.concat(t),[]).reduce((e,t)=>e.concat(t),[])).then(e=>{console.dir(e);const{numCorrectAnswers:r,correctAnswers:s,isCorrect:i}=e.reduce((e,r,s)=>{const i=r.isAnswerFn(r.known,t[s]);return e.numCorrectAnswers+=i?1:0,e.correctAnswers.push(r.correctAnswer),e.isCorrect.push(i),e},{numCorrectAnswers:0,correctAnswers:[],isCorrect:[]}),a=e.length;return{status:!0,data:{numQuestions:a,numCorrectAnswers:r,correctAnswers:s,isCorrect:i,score:parseFloat(r)/a*100}}})}finishExercise(e,t,r,s,i){let a=0;const n=JSON.stringify(s.map(e=>{console.dir(e);const t=[];return JSON.parse(e.knowns).forEach(e=>{t.push(i[a]),a++}),e.userAnswer=JSON.stringify(t),e}));return this.update({modelName:"GeneratedTopicExercise",data:{id:e,submitted:!0,submittedAt:moment().local().format("YYYY-MM-DD HH:mm:ss"),onCloud:AppConfig.CLOUD_SERVER,score:t,timeFinish:r,exerciseDetail:n}})}getGeneratedTopicExercise(e,t){return this.readOne({modelName:"GeneratedTopicExercise",searchClause:{userId:e,topicId:t,submitted:!1,onCloud:AppConfig.CLOUD_SERVER}})}saveGeneratedTopicExercise(e,t,r,s,i){return this.getModels("GeneratedTopicExercise").destroy({where:{topicId:e,userId:t,submitted:!1,onCloud:AppConfig.CLOUD_SERVER}}).then(()=>this.create({modelName:"GeneratedTopicExercise",data:{topicId:e,userId:t,exerciseDetail:JSON.stringify(r),topicExerciseHash:s,idealTime:i,onCloud:AppConfig.CLOUD_SERVER}}))}updateGeneratedTopicAnswer(e,t,r,s){return this.update({modelName:"GeneratedTopicExercise",data:{id:e,submitted:!0,submittedAt:moment().local().format("YYYY-MM-DD HH:mm:ss"),onCloud:AppConfig.CLOUD_SERVER,score:t,timeFinish:r,exerciseDetail:s}})}getExerciseStars(e,t){return this.getSequelize().query(`\nSELECT score FROM generatedTopicExercises\nWHERE submitted = 1 AND topicId = ${t} AND userId = ${e}\nORDER BY score DESC LIMIT 4;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>{return{status:!0,data:{stars:e.reduce((e,t)=>parseInt(t.score,10)>=80?e+1:e,0)}}})}getRenderedExerciseStars(e,t,r=!0){return this.getExerciseStars(e,t).then(e=>{if(e.status){const t=e.data.stars;return{status:!0,data:{html:pug.renderFile(path.join(__dirname,"../app/views/non-pages/stars.pug"),{stars:t}),stars:t}}}return e})}getTopicExerciseCheckmark(e,t,r=!1){return this.getSequelize().query(`\nSELECT score FROM generatedTopicExercises\nWHERE submitted = 1 AND topicId = ${t} AND userId = ${e} AND score > 80\nORDER BY score DESC LIMIT 1;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>{const t=e.length>0;if(r){return{status:!0,data:pug.renderFile(path.join(__dirname,"../app/views/non-pages/ceckmark.pug"),{isChecked:t})}}return{status:!0,data:{isChecked:t}}})}getExerciseTimers(e,t){return this.getSequelize().query(`\nSELECT score FROM generatedTopicExercises\nWHERE submitted = 1 AND topicId = ${t} AND userId = ${e}\nAND timeFinish < idealTime AND score = 100\nORDER BY score DESC LIMIT 1;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>{return{status:!0,data:{timers:e.reduce((e,t)=>parseInt(t.score,10)>=80?e+1:e,0)}}})}getRenderedExerciseTimers(e,t,r){return this.getExerciseTimers(e,t).then(e=>{if(e.status){const t=e.data.timers;return{status:!0,data:pug.renderFile(path.join(__dirname,"../app/views/non-pages/timers.pug"),{timers:t})}}return e})}getExerciseRanking(e){return this.getSequelize().query(`SELECT MIN(timeFinish) AS timeFinish, userId, users.fullName AS fullName, users.grade AS grade, schools.name AS schoolName\nFROM generatedTopicExercises INNER JOIN users ON users.id = generatedTopicExercises.userId INNER JOIN schools ON schools.id = users.schoolId\nWHERE submitted = TRUE AND topicId = ${e} AND score = 100 AND timeFinish IS NOT NULL GROUP BY userId ORDER BY MIN(timeFinish) LIMIT 10;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>({status:!0,data:e}))}getExerciseLeaderboard(e){return this.getExerciseRanking(e).then(e=>{if(e.status){const t=e.data;return{status:!0,data:pug.renderFile(path.join(__dirname,"../app/views/non-pages/ranking.pug"),{exerciseData:t})}}return e})}getCurrentRanking(e,t){return new Promise((r,s)=>{const i=`SELECT COUNT(*) AS total\nFROM (SELECT COUNT(*) FROM generatedTopicExercises\nWHERE submitted = TRUE AND timeFinish < ${e} AND topicId = ${t} AND score = 100 AND timeFinish IS NOT NULL\nGROUP BY userId\nORDER BY MIN(timeFinish)) AS totalrow;`;return this.getSequelize().query(i,{type:Sequelize.QueryTypes.SELECT}).then(e=>{r({status:!0,data:{count:e[0].total}})}).catch(e=>{s(e)})})}getTotalRanking(e){return new Promise((t,r)=>{let s=`SELECT COUNT(*) AS total\nFROM (SELECT COUNT(*) FROM generatedTopicExercises WHERE submitted = TRUE AND topicId = ${e} AND score = 100 AND timeFinish IS NOT NULL\nGROUP BY userId\nORDER BY MIN(timeFinish)) AS totalrow;`;return this.getSequelize().query(s,{type:Sequelize.QueryTypes.SELECT}).then(e=>{t({status:!0,data:{count:e[0].total}})}).catch(e=>{r(e)})})}}exports.default=new TopicExerciseService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
