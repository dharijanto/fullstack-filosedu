"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),crud_service_neo_1=require("./crud-service-neo"),exercise_generator_1=require("../lib/exercise_generator/exercise-generator"),exercise_service_1=require("./exercise-service");let path=require("path"),log=require("npmlog"),pug=require("pug"),moment=require("moment"),Sequelize=require("sequelize");const AppConfig=require(path.join(__dirname,"../app-config")),Utils=require(path.join(__dirname,"../lib/utils")),TAG="TopicExerciseService";class TopicExerciseService extends crud_service_neo_1.default{getTopic(e){return this.readOne({modelName:"Topic",searchClause:{id:e}})}getFormattedExercise(e,t){return e&&t?Promise.join(this.getExercises(e),this.getGeneratedTopicExercise(t,e),this.getExercisesHash(e),this.getTopic(e)).spread((r,s,i,a)=>{if(i.status&&a.status){const a=i.data;if(s.status&&s.data&&s.data.topicExerciseHash===a)return this.formatGeneratedTopicExercise(s.data);if(r.status&&r.data&&(s.status&&s.data&&s.data.topicExerciseHash!==a||!s.status))return this.generateAndSaveExercise(e,t,r.data).then(e=>e.status&&e.data?this.formatGeneratedTopicExercise(e.data):{status:!1,errMessage:e.errMessage});throw new Error("Unexpected error!")}throw new Error(`Failed to retrieve topic or topicExerciseHash: ${i.errMessage||a.errMessage}`)}):Promise.resolve({status:!1,errMessage:"topicId and userId are required!"})}getExercises(e){return this.getSequelize().query(`\nSELECT exercises.id, exercises.data, exercises.createdAt, exercises.updatedAt, exercises.subtopicId\nFROM exercises AS exercises\nINNER JOIN subtopics AS subtopic ON exercises.subtopicId = subtopic.id AND subtopic.topicId = ${e}\nORDER BY subtopic.subtopicNo ASC, exercises.id ASC;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>({status:!0,data:e}))}getExercisesHash(e){return this.getExercises(e).then(e=>{if(e.status&&e.data){const t=e.data.reduce((e,t)=>e+exercise_generator_1.default.getHash(t),"");return{status:!0,data:exercise_generator_1.default.getHash(t)}}return{status:!1,errMessage:e.errMessage}})}generateAndSaveExercise(e,t,r){return this.getExercisesHash(e).then(s=>{if(s.status&&s.data){const i=s.data;return Promise.map(r,e=>exercise_service_1.default.generateExercise(e,!0).then(e=>{if(e.status&&e.data){return JSON.parse(e.data.knowns||"[]").length>0?e.data:null}return null})).then(r=>{const s=[];let a=0;return r.filter(function(e){return null!=e}).forEach(e=>{a+=e.idealTime||0,s.push(e)}),this.getModels("GeneratedTopicExercise").destroy({where:{topicId:e,userId:t,submitted:!1,onCloud:AppConfig.CLOUD_SERVER}}).then(()=>this.create({modelName:"GeneratedTopicExercise",data:{topicId:e,userId:t,exerciseDetail:JSON.stringify(s),topicExerciseHash:i,idealTime:a,onCloud:AppConfig.CLOUD_SERVER}}))})}return{status:!1,errMessage:"Failed to retrieve exercise hash!"}})}formatGeneratedTopicExercise(e){const t=e.topicId,r=JSON.parse(e.exerciseDetail);return Promise.map(r,e=>this.readOne({modelName:"Exercise",searchClause:{id:e.exerciseId}}).then(t=>{if(t.status&&t.data){let r=exercise_generator_1.default.getExerciseSolver(t.data.data),s=[],i=[];return JSON.parse(e.knowns).forEach(e=>{i.push(r.formatQuestion(e))}),JSON.parse(e.unknowns).forEach(e=>{s.push(Object.keys(e))}),Promise.all(i).then(e=>({renderedQuestions:e,unknowns:s}))}throw new Error(t.errMessage)})).then(r=>this.readOne({modelName:"Topic",searchClause:{id:t}}).then(t=>t.status&&t.data?{status:!0,data:{topicName:t.data.topic,formattedExercises:r,idealTime:e.idealTime,elapsedTime:Utils.getElapsedTime(e.createdAt)}}:{status:!1,errMessage:""}))}gradeExercise(e,t){return Promise.map(e,e=>this.readOne({modelName:"Exercise",searchClause:{id:e.exerciseId}}).then(t=>{if(t.status&&t.data){const r=t.data,s=exercise_generator_1.default.getExerciseSolver(r.data),i=JSON.parse(e.knowns),a=JSON.parse(e.unknowns);return i.map((e,t)=>({known:e,correctAnswer:a[t],isAnswerFn:s.isAnswer.bind(s)}))}throw new Error("Exercise with id="+e.exerciseId+" could not be found!")})).then(e=>e.reduce((e,t)=>e.concat(t),[]).reduce((e,t)=>e.concat(t),[])).then(e=>{console.dir(e);const{numCorrectAnswers:r,correctAnswers:s,isCorrect:i}=e.reduce((e,r,s)=>{const i=r.isAnswerFn(r.known,t[s]);return e.numCorrectAnswers+=i?1:0,e.correctAnswers.push(r.correctAnswer),e.isCorrect.push(i),e},{numCorrectAnswers:0,correctAnswers:[],isCorrect:[]}),a=e.length;return{status:!0,data:{numQuestions:a,numCorrectAnswers:r,correctAnswers:s,isCorrect:i,score:parseFloat(r)/a*100}}})}finishExercise(e,t,r,s,i){let a=0;const n=JSON.stringify(s.map(e=>{console.dir(e);const t=[];return JSON.parse(e.knowns).forEach(e=>{t.push(i[a]),a++}),e.userAnswer=JSON.stringify(t),e}));return this.update({modelName:"GeneratedTopicExercise",data:{id:e,submitted:!0,submittedAt:moment().local().format("YYYY-MM-DD HH:mm:ss"),onCloud:AppConfig.CLOUD_SERVER,score:t,timeFinish:r,exerciseDetail:n}})}getGeneratedTopicExercise(e,t){return this.readOne({modelName:"GeneratedTopicExercise",searchClause:{userId:e,topicId:t,submitted:!1,onCloud:AppConfig.CLOUD_SERVER}})}getStarBadges(e,t){return this.getSequelize().query(`\nSELECT score FROM generatedTopicExercises\nWHERE submitted = 1 AND topicId = ${t} AND userId = ${e}\nORDER BY score DESC LIMIT 4;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>{return{status:!0,data:{stars:e.reduce((e,t)=>parseInt(t.score,10)>=80?e+1:e,0)}}})}getRenderedStarBadges(e,t){return this.getStarBadges(e,t).then(e=>{if(e.status){const t=e.data.stars;return{status:!0,data:{html:pug.renderFile(path.join(__dirname,"../app/views/non-pages/stars.pug"),{stars:t}),stars:t}}}return e})}getCheckmarkBadge(e,t,r=!1){return this.getSequelize().query(`\nSELECT score FROM generatedTopicExercises\nWHERE submitted = 1 AND topicId = ${t} AND userId = ${e} AND score > 80\nORDER BY score DESC LIMIT 1;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>{const t=e.length>0;if(r){return{status:!0,data:pug.renderFile(path.join(__dirname,"../app/views/non-pages/ceckmark.pug"),{isChecked:t})}}return{status:!0,data:{isChecked:t}}})}getTimerBadges(e,t){return this.getSequelize().query(`\nSELECT score FROM generatedTopicExercises\nWHERE submitted = 1 AND topicId = ${t} AND userId = ${e}\nAND timeFinish < idealTime AND score = 100\nORDER BY score DESC LIMIT 1;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>{return{status:!0,data:{timers:e.reduce((e,t)=>parseInt(t.score,10)>=80?e+1:e,0)}}})}getRenderedTimerBadges(e,t){return this.getTimerBadges(e,t).then(e=>{if(e.status){const t=e.data.timers;return{status:!0,data:pug.renderFile(path.join(__dirname,"../app/views/non-pages/timers.pug"),{timers:t})}}return e})}getRanking(e){return this.getSequelize().query(`SELECT MIN(timeFinish) AS timeFinish, userId, users.fullName AS fullName, users.grade AS grade, schools.name AS schoolName\nFROM generatedTopicExercises INNER JOIN users ON users.id = generatedTopicExercises.userId INNER JOIN schools ON schools.id = users.schoolId\nWHERE submitted = TRUE AND topicId = ${e} AND score = 100 AND timeFinish IS NOT NULL GROUP BY userId ORDER BY MIN(timeFinish) LIMIT 10;`,{type:Sequelize.QueryTypes.SELECT}).then(e=>({status:!0,data:e}))}getRenderedLeaderboard(e){return this.getRanking(e).then(e=>{if(e.status){const t=e.data;return{status:!0,data:pug.renderFile(path.join(__dirname,"../app/views/non-pages/ranking.pug"),{exerciseData:t})}}return e})}getCurrentRanking(e,t){return new Promise((r,s)=>{const i=`SELECT COUNT(*) AS total\nFROM (SELECT COUNT(*) FROM generatedTopicExercises\nWHERE submitted = TRUE AND timeFinish < ${e} AND topicId = ${t} AND score = 100 AND timeFinish IS NOT NULL\nGROUP BY userId\nORDER BY MIN(timeFinish)) AS totalrow;`;return this.getSequelize().query(i,{type:Sequelize.QueryTypes.SELECT}).then(e=>{r({status:!0,data:{count:e[0].total}})}).catch(e=>{s(e)})})}getTotalRanking(e){return new Promise((t,r)=>{let s=`SELECT COUNT(*) AS total\nFROM (SELECT COUNT(*) FROM generatedTopicExercises WHERE submitted = TRUE AND topicId = ${e} AND score = 100 AND timeFinish IS NOT NULL\nGROUP BY userId\nORDER BY MIN(timeFinish)) AS totalrow;`;return this.getSequelize().query(s,{type:Sequelize.QueryTypes.SELECT}).then(e=>{t({status:!0,data:{count:e[0].total}})}).catch(e=>{r(e)})})}}exports.default=new TopicExerciseService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXJ2aWNlcy90b3BpYy1leGVyY2lzZS1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbIlByb21pc2UiLCJyZXF1aXJlIiwiY3J1ZF9zZXJ2aWNlX25lb18xIiwiZXhlcmNpc2VfZ2VuZXJhdG9yXzEiLCJleGVyY2lzZV9zZXJ2aWNlXzEiLCJwYXRoIiwibG9nIiwicHVnIiwibW9tZW50IiwiU2VxdWVsaXplIiwiQXBwQ29uZmlnIiwiam9pbiIsIl9fZGlybmFtZSIsIlV0aWxzIiwiVEFHIiwiVG9waWNFeGVyY2lzZVNlcnZpY2UiLCJkZWZhdWx0IiwiW29iamVjdCBPYmplY3RdIiwidG9waWNJZCIsInRoaXMiLCJyZWFkT25lIiwibW9kZWxOYW1lIiwic2VhcmNoQ2xhdXNlIiwiaWQiLCJ1c2VySWQiLCJnZXRFeGVyY2lzZXMiLCJnZXRHZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlIiwiZ2V0RXhlcmNpc2VzSGFzaCIsImdldFRvcGljIiwic3ByZWFkIiwicmVzcCIsInJlc3AyIiwicmVzcDMiLCJyZXNwNCIsInN0YXR1cyIsInRvcGljRXhlcmNpc2VIYXNoIiwiZGF0YSIsImZvcm1hdEdlbmVyYXRlZFRvcGljRXhlcmNpc2UiLCJnZW5lcmF0ZUFuZFNhdmVFeGVyY2lzZSIsInRoZW4iLCJyZXNwNSIsImVyck1lc3NhZ2UiLCJFcnJvciIsInJlc29sdmUiLCJnZXRTZXF1ZWxpemUiLCJxdWVyeSIsInR5cGUiLCJRdWVyeVR5cGVzIiwiU0VMRUNUIiwiY29tYmluZWRIYXNoIiwicmVkdWNlIiwiYWNjIiwiaGFzaCIsImdldEhhc2giLCJleGVyY2lzZXMiLCJtYXAiLCJleGVyY2lzZSIsImdlbmVyYXRlRXhlcmNpc2UiLCJKU09OIiwicGFyc2UiLCJrbm93bnMiLCJsZW5ndGgiLCJyZXN1bHRzIiwiZXhlcmNpc2VEZXRhaWwiLCJpZGVhbFRpbWUiLCJmaWx0ZXIiLCJ2YWx1ZSIsImZvckVhY2giLCJyZXN1bHQiLCJwdXNoIiwiZ2V0TW9kZWxzIiwiZGVzdHJveSIsIndoZXJlIiwic3VibWl0dGVkIiwib25DbG91ZCIsIkNMT1VEX1NFUlZFUiIsImNyZWF0ZSIsInN0cmluZ2lmeSIsImdlbmVyYXRlZFRvcGljRXhlcmNpc2UiLCJnZW5lcmF0ZWRFeGVyY2lzZXMiLCJnZW5lcmF0ZWRFeGVyY2lzZSIsImV4ZXJjaXNlSWQiLCJleGVyY2lzZVNvbHZlciIsImdldEV4ZXJjaXNlU29sdmVyIiwidW5rbm93bnMiLCJmb3JtYXR0ZWRRdWVzdGlvbnNQcm9taXNlcyIsImZvcm1hdFF1ZXN0aW9uIiwiX3Vua25vd25zIiwiT2JqZWN0Iiwia2V5cyIsImFsbCIsInJlbmRlcmVkUXVlc3Rpb25zIiwiZm9ybWF0dGVkRXhlcmNpc2VzIiwidG9waWNOYW1lIiwidG9waWMiLCJlbGFwc2VkVGltZSIsImdldEVsYXBzZWRUaW1lIiwiY3JlYXRlZEF0IiwiZ2VuZXJhdGVkRXhlcmNpc2VEZXRhaWxzIiwiYW5zd2VycyIsImtub3duIiwiaW5kZXgiLCJjb3JyZWN0QW5zd2VyIiwiaXNBbnN3ZXJGbiIsImlzQW5zd2VyIiwiYmluZCIsInRvcGljRXhlcmNpc2VBcnJheSIsImV4ZXJjaXNlQXJyYXkiLCJjb25jYXQiLCJxdWVzdGlvbkFycmF5IiwiY29uc29sZSIsImRpciIsIm51bUNvcnJlY3RBbnN3ZXJzIiwiY29ycmVjdEFuc3dlcnMiLCJpc0NvcnJlY3QiLCJudW1RdWVzdGlvbnMiLCJzY29yZSIsInBhcnNlRmxvYXQiLCJnZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlSWQiLCJ0aW1lRmluaXNoIiwiZXhlcmNpc2VEZXRhaWxzIiwiYW5zd2VySW5kZXgiLCJleGVyY2lzZURldGFpbEFuc3dlcnMiLCJfIiwidXNlckFuc3dlciIsInVwZGF0ZSIsInN1Ym1pdHRlZEF0IiwibG9jYWwiLCJmb3JtYXQiLCJkYXRhcyIsInN0YXJzIiwicGFyc2VJbnQiLCJnZXRTdGFyQmFkZ2VzIiwiaHRtbCIsInJlbmRlckZpbGUiLCJyZW5kZXIiLCJpc0NoZWNrZWQiLCJ0aW1lcnMiLCJnZXRUaW1lckJhZGdlcyIsImdldFJhbmtpbmciLCJleGVyY2lzZURhdGEiLCJyZWplY3QiLCJxdWVyeURCIiwiY291bnQiLCJ0b3RhbCIsImNhdGNoIiwiZXJyIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Im9FQUFBLE1BQUFBLFFBQUFDLFFBQUEsWUFFQUMsbUJBQUFELFFBQUEsc0JBQ0FFLHFCQUFBRixRQUFBLGdEQUNBRyxtQkFBQUgsUUFBQSxzQkFFQSxJQUFJSSxLQUFPSixRQUFRLFFBRWZLLElBQU1MLFFBQVEsVUFDZE0sSUFBTU4sUUFBUSxPQUNkTyxPQUFTUCxRQUFRLFVBQ2pCUSxVQUFZUixRQUFRLGFBRXhCLE1BQU1TLFVBQVlULFFBQVFJLEtBQUtNLEtBQUtDLFVBQVcsa0JBQ3pDQyxNQUFRWixRQUFRSSxLQUFLTSxLQUFLQyxVQUFXLGlCQUVyQ0UsSUFBTSw2QkFvQlpDLDZCQUFtQ2IsbUJBQUFjLFFBRXpCQyxTQUFVQyxHQUNoQixPQUFPQyxLQUFLQyxTQUFpQkMsVUFBVyxRQUFTQyxjQUFnQkMsR0FBSUwsS0FLdkVELHFCQUFzQkMsRUFBU00sR0FDN0IsT0FBSU4sR0FBV00sRUFDTnhCLFFBQVFXLEtBQ2JRLEtBQUtNLGFBQWFQLEdBQ2xCQyxLQUFLTywwQkFBMEJGLEVBQVFOLEdBQ3ZDQyxLQUFLUSxpQkFBaUJULEdBQ3RCQyxLQUFLUyxTQUFTVixJQUNkVyxPQUFPLENBQUNDLEVBQThCQyxFQUM5QkMsRUFBMkJDLEtBQ25DLEdBQUlELEVBQU1FLFFBQVVELEVBQU1DLE9BQVEsQ0FDaEMsTUFBTUMsRUFBb0JILEVBQU1JLEtBRWhDLEdBQUlMLEVBQU1HLFFBQVVILEVBQU1LLE1BQVFMLEVBQU1LLEtBQUtELG9CQUFzQkEsRUFDakUsT0FBT2hCLEtBQUtrQiw2QkFBNkJOLEVBQU1LLE1BRTFDLEdBQUlOLEVBQUtJLFFBQVVKLEVBQUtNLE9BQ25CTCxFQUFNRyxRQUFVSCxFQUFNSyxNQUFRTCxFQUFNSyxLQUFLRCxvQkFBc0JBLElBQ2hFSixFQUFNRyxRQUNmLE9BQU9mLEtBQUttQix3QkFBd0JwQixF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SCx3R0FHcEYsT0FBT0MsS0FBS3lCLGVBQWVDLE1BQU1pRyxHQUM3QmhHLEtBQU1yQyxVQUFVc0MsV0FBV0MsU0FBVVQsS0FBS1QsSUFDMUNhLEdBQVVULFFBQVEsRUFBTUUsTUFBUTJHLE1BQU9qSCxFQUFLLEdBQUdrSCxXQUM5Q0MsTUFBTUMsSUFDUEwsRUFBT0ssUUFNakJDLFFBQUFuSSxRQUFlLElBQUlEIiwiZmlsZSI6InNlcnZpY2VzL3RvcGljLWV4ZXJjaXNlLXNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gJ2JsdWViaXJkJ1xuaW1wb3J0IEJydXRlZm9yY2VTb2x2ZXIsIHsgR2VuZXJhdGVkUXVlc3Rpb25EYXRhIH0gZnJvbSAnLi4vbGliL2V4ZXJjaXNlX2dlbmVyYXRvci9leGVyY2lzZV9zb2x2ZXJzL2JydXRlZm9yY2Utc29sdmVyJ1xuaW1wb3J0IENSVURTZXJ2aWNlIGZyb20gJy4vY3J1ZC1zZXJ2aWNlLW5lbydcbmltcG9ydCBFeGVyY2lzZUdlbmVyYXRvciBmcm9tICcuLi9saWIvZXhlcmNpc2VfZ2VuZXJhdG9yL2V4ZXJjaXNlLWdlbmVyYXRvcidcbmltcG9ydCBFeGVyY2lzZVNlcnZpY2UgZnJvbSAnLi9leGVyY2lzZS1zZXJ2aWNlJ1xuXG5sZXQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuXG5sZXQgbG9nID0gcmVxdWlyZSgnbnBtbG9nJylcbmxldCBwdWcgPSByZXF1aXJlKCdwdWcnKVxubGV0IG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpXG5sZXQgU2VxdWVsaXplID0gcmVxdWlyZSgnc2VxdWVsaXplJylcblxuY29uc3QgQXBwQ29uZmlnID0gcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vYXBwLWNvbmZpZycpKVxuY29uc3QgVXRpbHMgPSByZXF1aXJlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9saWIvdXRpbHMnKSlcblxuY29uc3QgVEFHID0gJ1RvcGljRXhlcmNpc2VTZXJ2aWNlJ1xuXG5leHBvcnQgaW50ZXJmYWNlIEdlbmVyYXRlZFRvcGljRXhlcmNpc2VEZXRhaWwge1xuICBrbm93bnM6IHN0cmluZywgLy8gc3RyaW5naWZpZWQgSlNPTlxuICB1bmtub3duczogc3RyaW5nLCAvLyBzdHJpbmdpZmllZCBKU09OXG4gIHVzZXJBbnN3ZXI6IHN0cmluZywgLy8gc3RyaW5naWZpZWQgSlNPTlxuICBleGVyY2lzZUhhc2g6IHN0cmluZ1xuICBleGVyY2lzZUlkOiBudW1iZXJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUb3BpY0V4ZXJjaXNlR3JhZGUge1xuICBudW1RdWVzdGlvbnM6IG51bWJlclxuICBudW1Db3JyZWN0QW5zd2VyczogbnVtYmVyXG4gIGNvcnJlY3RBbnN3ZXJzOiBBcnJheTx7W2tleTogc3RyaW5nXTogYW55fT5cbiAgaXNDb3JyZWN0OiBBcnJheTxib29sZWFuPlxuICBzY29yZTogbnVtYmVyXG59XG5cbmV4cG9ydCB0eXBlIFRvcGljRXhlcmNpc2VBbnN3ZXIgPSBBcnJheTx7W2tleTogc3RyaW5nXTogYW55fT5cblxuY2xhc3MgVG9waWNFeGVyY2lzZVNlcnZpY2UgZXh0ZW5kcyBDUlVEU2VydmljZSB7XG4gIC8vIFRPRE86IFdlIHNob3VsZCB1c2UgdmVyc2lvbiBvbiBjb3Vyc2VTZXJ2aWNlIGluc3RlYWQgb2YgdGhpc1xuICBwcml2YXRlIGdldFRvcGljICh0b3BpY0lkKTogUHJvbWlzZTxOQ1Jlc3BvbnNlPFRvcGljPj4ge1xuICAgIHJldHVybiB0aGlzLnJlYWRPbmU8VG9waWM+KHsgbW9kZWxOYW1lOiAnVG9waWMnLCBzZWFyY2hDbGF1c2U6IHsgaWQ6IHRvcGljSWQgfSB9KVxuICB9XG5cbiAgLy8gR2V0IGEgR2VuZXJhdGVkVG9waWNFeGVyY2lzZSBpbiBhIGZvcm1hdCByZWFkeSBmb3IgdXNlLiBJZiB0aGVyZSdzIHByZXZpb3VzbHkgZ2VuZXJhdGVkXG4gIC8vIHRoYXQgaGFzbid0IGJlZW4gc3VibWl0dGVkLCB0aGlzIHdpbGwgcmVzdG9yZSBpdC4gT3RoZXJ3aXNlLCBpdCdsbCBnZW5lcmF0ZSBvbmUuXG4gIGdldEZvcm1hdHRlZEV4ZXJjaXNlICh0b3BpY0lkLCB1c2VySWQpOiBQcm9taXNlPE5DUmVzcG9uc2U8Rm9ybWF0dGVkVG9waWNFeGVyY2lzZT4+IHtcbiAgICBpZiAodG9waWNJZCAmJiB1c2VySWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLmpvaW48YW55PihcbiAgICAgICAgdGhpcy5nZXRFeGVyY2lzZXModG9waWNJZCksXG4gICAgICAgIHRoaXMuZ2V0R2VuZXJhdGVkVG9waWNFeGVyY2lzZSh1c2VySWQsIHRvcGljSWQpLFxuICAgICAgICB0aGlzLmdldEV4ZXJjaXNlc0hhc2godG9waWNJZCksXG4gICAgICAgIHRoaXMuZ2V0VG9waWModG9waWNJZClcbiAgICAgICkuc3ByZWFkKChyZXNwOiBOQ1Jlc3BvbnNlPEV4ZXJjaXNlW10+LCByZXNwMjogTkNSZXNwb25zZTxHZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlPixcbiAgICAgICAgICAgICAgICByZXNwMzogTkNSZXNwb25zZTxzdHJpbmc+LCByZXNwNDogTkNSZXNwb25zZTxUb3BpYz4pID0+IHtcbiAgICAgICAgaWYgKHJlc3AzLnN0YXR1cyAmJiByZXNwNC5zdGF0dXMpIHtcbiAgICAgICAgICBjb25zdCB0b3BpY0V4ZXJjaXNlSGFzaCA9IHJlc3AzLmRhdGFcbiAgICAgICAgICAvLyBJZiB0aGVyZSdzIHZhbGlkIGV4ZXJjaXNlIHRvIGJlIHJlc3RvcmVkXG4gICAgICAgICAgaWYgKHJlc3AyLnN0YXR1cyAmJiByZXNwMi5kYXRhICYmIHJlc3AyLmRhdGEudG9waWNFeGVyY2lzZUhhc2ggPT09IHRvcGljRXhlcmNpc2VIYXNoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRHZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlKHJlc3AyLmRhdGEpXG4gICAgICAgICAgLy8gSWYgdGhlcmUncyBleHBpcmVkIGdlbmVyYXRlZCBleGVyY2lzZSBvciBubyBnZW5lcmF0ZWQgZXhlcmNpc2UgdG8gYmUgcmVzdG9yZWRcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3Auc3RhdHVzICYmIHJlc3AuZGF0YSAmJlxuICAgICAgICAgICAgICAgICAgICAoKHJlc3AyLnN0YXR1cyAmJiByZXNwMi5kYXRhICYmIHJlc3AyLmRhdGEudG9waWNFeGVyY2lzZUhhc2ggIT09IHRvcGljRXhlcmNpc2VIYXNoKSB8fFxuICAgICAgICAgICAgICAgICAgICAhcmVzcDIuc3RhdHVzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVBbmRTYXZlRXhlcmNpc2UodG9waWNJZCwgdXNlcklkLCByZXNwLmRhdGEpLnRoZW4ocmVzcDUgPT4ge1xuICAgICAgICAgICAgICBpZiAocmVzcDUuc3RhdHVzICYmIHJlc3A1LmRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRHZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlKHJlc3A1LmRhdGEpXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBmYWxzZSwgZXJyTWVzc2FnZTogcmVzcDUuZXJyTWVzc2FnZSB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFdlIHNob3VsZCBuZXZlciBnZXQgaGVyZS4uXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgZXJyb3IhJylcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcmV0cmlldmUgdG9waWMgb3IgdG9waWNFeGVyY2lzZUhhc2g6ICR7cmVzcDMuZXJyTWVzc2FnZSB8fCByZXNwNC5lcnJNZXNzYWdlfWApXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBzdGF0dXM6IGZhbHNlLCBlcnJNZXNzYWdlOiAndG9waWNJZCBhbmQgdXNlcklkIGFyZSByZXF1aXJlZCEnIH0pXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRFeGVyY2lzZXMgKHRvcGljSWQpOiBQcm9taXNlPE5DUmVzcG9uc2U8RXhlcmNpc2VbXT4+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRTZXF1ZWxpemUoKS5xdWVyeShgXG5TRUxFQ1QgZXhlcmNpc2VzLmlkLCBleGVyY2lzZXMuZGF0YSwgZXhlcmNpc2VzLmNyZWF0ZWRBdCwgZXhlcmNpc2VzLnVwZGF0ZWRBdCwgZXhlcmNpc2VzLnN1YnRvcGljSWRcbkZST00gZXhlcmNpc2VzIEFTIGV4ZXJjaXNlc1xuSU5ORVIgSk9JTiBzdWJ0b3BpY3MgQVMgc3VidG9waWMgT04gZXhlcmNpc2VzLnN1YnRvcGljSWQgPSBzdWJ0b3BpYy5pZCBBTkQgc3VidG9waWMudG9waWNJZCA9ICR7dG9waWNJZH1cbk9SREVSIEJZIHN1YnRvcGljLnN1YnRvcGljTm8gQVNDLCBleGVyY2lzZXMuaWQgQVNDO2AsIHsgdHlwZTogU2VxdWVsaXplLlF1ZXJ5VHlwZXMuU0VMRUNUIH1cbiAgICApLnRoZW4ocmVzcCA9PiB7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IHRydWUsIGRhdGE6IHJlc3AgfVxuICAgIH0pXG4gIH1cblxuICAvLyBHaXZlbiB0b3BpY0lkLCBjb21wdXRlcyBoYXNoIHZhbHVlIG9mIHRoZSBhc3NvY2lhdGVkIFRvcGljRXhlcmNpc2UuXG4gIC8vIFRoZSBoYXNoIGlzIGNvbXB1dGVkIGZyb20gZWFjaCBvZiB0aGUgYnVpbGRpbmcgc3VidG9waWMgRXhlcmNpc2VzLlxuICAvLyBJbiBvdGhlciB3b3JkcywgaWYgYW55IHN1YnRvcGljIEV4ZXJjaXNlIGNoYW5nZXMsIGhhc2ggZm9yIHJlc3BlY3RpdmVcbiAgLy8gVG9waWNFeGVyY2lzZSB0aGF0IGRlcGVuZHMgb24gaXQgYWxzbyBjaGFuZ2VzLlxuICBwcml2YXRlIGdldEV4ZXJjaXNlc0hhc2ggKHRvcGljSWQpOiBQcm9taXNlPE5DUmVzcG9uc2U8c3RyaW5nPj4ge1xuICAgIHJldHVybiB0aGlzLmdldEV4ZXJjaXNlcyh0b3BpY0lkKS50aGVuKHJlc3AgPT4ge1xuICAgICAgaWYgKHJlc3Auc3RhdHVzICYmIHJlc3AuZGF0YSkge1xuICAgICAgICBjb25zdCBjb21iaW5lZEhhc2ggPSByZXNwLmRhdGEucmVkdWNlKChhY2MsIGhhc2gpID0+IHtcbiAgICAgICAgICByZXR1cm4gYWNjICsgRXhlcmNpc2VHZW5lcmF0b3IuZ2V0SGFzaChoYXNoKVxuICAgICAgICB9LCAnJylcbiAgICAgICAgbGV0IHRvcGljRXhlcmNpc2VIYXNoID0gRXhlcmNpc2VHZW5lcmF0b3IuZ2V0SGFzaChjb21iaW5lZEhhc2gpXG4gICAgICAgIHJldHVybiB7IHN0YXR1czogdHJ1ZSwgZGF0YTogdG9waWNFeGVyY2lzZUhhc2ggfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBmYWxzZSwgZXJyTWVzc2FnZTogcmVzcC5lcnJNZXNzYWdlIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZUFuZFNhdmVFeGVyY2lzZSAodG9waWNJZCwgdXNlcklkLCBleGVyY2lzZXM6IEV4ZXJjaXNlW10pOiBQcm9taXNlPE5DUmVzcG9uc2U8R2VuZXJhdGVkVG9waWNFeGVyY2lzZT4+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRFeGVyY2lzZXNIYXNoKHRvcGljSWQpLnRoZW4ocmVzcCA9PiB7XG4gICAgICBpZiAocmVzcC5zdGF0dXMgJiYgcmVzcC5kYXRhKSB7XG4gICAgICAgIGNvbnN0IHRvcGljRXhlcmNpc2VIYXNoID0gcmVzcC5kYXRhXG4gICAgICAgIHJldHVybiBQcm9taXNlLm1hcChleGVyY2lzZXMsIGV4ZXJjaXNlID0+IHtcbiAgICAgICAgICByZXR1cm4gRXhlcmNpc2VTZXJ2aWNlLmdlbmVyYXRlRXhlcmNpc2UoZXhlcmNpc2UsIHRydWUpLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcC5zdGF0dXMgJiYgcmVzcC5kYXRhKSB7XG4gICAgICAgICAgICAgIC8vIENoZWNrIHRoaXMgaGFzIHF1ZXN0aW9uc1xuICAgICAgICAgICAgICBjb25zdCBwYXJzZWRLbm93bnMgPSBKU09OLnBhcnNlKHJlc3AuZGF0YS5rbm93bnMgfHwgJ1tdJylcbiAgICAgICAgICAgICAgaWYgKHBhcnNlZEtub3ducy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3AuZGF0YVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFNraXAgb3ZlciBlbXB0eSBxdWVzdGlvbnNcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pLnRoZW4oKHJlc3VsdHM6IEFycmF5PFBhcnRpYWw8R2VuZXJhdGVkRXhlcmNpc2UgfCBudWxsPj4pID0+IHtcbiAgICAgICAgICBjb25zdCBleGVyY2lzZURldGFpbDogYW55W10gPSBbXVxuICAgICAgICAgIGxldCBpZGVhbFRpbWUgPSAwXG5cbiAgICAgICAgICAvLyBOZWVkZWQgZm9yIFRTIHRvIHR5cGVjaGVja1xuICAgICAgICAgIGZ1bmN0aW9uIG5vdEVtcHR5PFRWYWx1ZT4gKHZhbHVlOiBUVmFsdWUgfCBudWxsIHwgdW5kZWZpbmVkKTogdmFsdWUgaXMgVFZhbHVlIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVzdWx0cy5maWx0ZXIobm90RW1wdHkpLmZvckVhY2gocmVzdWx0ID0+IHtcbiAgICAgICAgICAgIGlkZWFsVGltZSArPSByZXN1bHQuaWRlYWxUaW1lIHx8IDBcbiAgICAgICAgICAgIGV4ZXJjaXNlRGV0YWlsLnB1c2gocmVzdWx0KVxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICAvLyBJbiBjYXNlIHRoYXQgdGhlIGV4ZXJjaXNlIGlzIG5vIGxvbmdlciB1cC10by1kYXRlLCB3ZSBoYXZlIHRvIGRlbGV0ZSBzdGFsZSBnZW5lcmF0ZWQgZXhlcmNpc2VcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZXRNb2RlbHMoJ0dlbmVyYXRlZFRvcGljRXhlcmNpc2UnKS5kZXN0cm95KHt3aGVyZToge1xuICAgICAgICAgICAgdG9waWNJZCxcbiAgICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICAgIHN1Ym1pdHRlZDogZmFsc2UsXG4gICAgICAgICAgICBvbkNsb3VkOiBBcHBDb25maWcuQ0xPVURfU0VSVkVSXG4gICAgICAgICAgfX0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlPEdlbmVyYXRlZFRvcGljRXhlcmNpc2U+KHtcbiAgICAgICAgICAgICAgbW9kZWxOYW1lOiAnR2VuZXJhdGVkVG9waWNFeGVyY2lzZScsXG4gICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICB0b3BpY0lkLFxuICAgICAgICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICAgICAgICBleGVyY2lzZURldGFpbDogSlNPTi5zdHJpbmdpZnkoZXhlcmNpc2VEZXRhaWwpLFxuICAgICAgICAgICAgICAgIHRvcGljRXhlcmNpc2VIYXNoLFxuICAgICAgICAgICAgICAgIGlkZWFsVGltZSxcbiAgICAgICAgICAgICAgICBvbkNsb3VkOiBBcHBDb25maWcuQ0xPVURfU0VSVkVSXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogZmFsc2UsIGVyck1lc3NhZ2U6ICdGYWlsZWQgdG8gcmV0cmlldmUgZXhlcmNpc2UgaGFzaCEnIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gIH1cblxuICAvLyBGb3JtYXQgR2VuZXJhdGVkVG9waWNFeGVyY2lzZSBmb3IgY29udHJvbGxlciB1c2VzLlxuICBwcml2YXRlIGZvcm1hdEdlbmVyYXRlZFRvcGljRXhlcmNpc2UgKGdlbmVyYXRlZFRvcGljRXhlcmNpc2U6IEdlbmVyYXRlZFRvcGljRXhlcmNpc2UpOiBQcm9taXNlPE5DUmVzcG9uc2U8Rm9ybWF0dGVkVG9waWNFeGVyY2lzZT4+IHtcbiAgICBjb25zdCB0b3BpY0lkID0gZ2VuZXJhdGVkVG9waWNFeGVyY2lzZS50b3BpY0lkXG4gICAgY29uc3QgZ2VuZXJhdGVkRXhlcmNpc2VzOiBHZW5lcmF0ZWRFeGVyY2lzZVtdID0gSlNPTi5wYXJzZShnZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlLmV4ZXJjaXNlRGV0YWlsKVxuICAgIHJldHVybiBQcm9taXNlLm1hcChnZW5lcmF0ZWRFeGVyY2lzZXMsIGdlbmVyYXRlZEV4ZXJjaXNlID0+IHtcbiAgICAgIHJldHVybiB0aGlzLnJlYWRPbmU8RXhlcmNpc2U+KHsgbW9kZWxOYW1lOiAnRXhlcmNpc2UnLCBzZWFyY2hDbGF1c2U6IHsgaWQ6IGdlbmVyYXRlZEV4ZXJjaXNlLmV4ZXJjaXNlSWQgfSB9KS50aGVuKHJlc3AyID0+IHtcbiAgICAgICAgaWYgKHJlc3AyLnN0YXR1cyAmJiByZXNwMi5kYXRhKSB7XG4gICAgICAgICAgbGV0IGV4ZXJjaXNlU29sdmVyID0gRXhlcmNpc2VHZW5lcmF0b3IuZ2V0RXhlcmNpc2VTb2x2ZXIocmVzcDIuZGF0YS5kYXRhKVxuICAgICAgICAgIGxldCB1bmtub3duczogQXJyYXk8c3RyaW5nW10+ID0gW11cbiAgICAgICAgICBsZXQgZm9ybWF0dGVkUXVlc3Rpb25zUHJvbWlzZXM6IEFycmF5PFByb21pc2U8c3RyaW5nPj4gPSBbXVxuICAgICAgICAgIEpTT04ucGFyc2UoZ2VuZXJhdGVkRXhlcmNpc2Uua25vd25zKS5mb3JFYWNoKGtub3ducyA9PiB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRRdWVzdGlvbnNQcm9taXNlcy5wdXNoKGV4ZXJjaXNlU29sdmVyLmZvcm1hdFF1ZXN0aW9uKGtub3ducykpXG4gICAgICAgICAgfSlcbiAgICAgICAgICBKU09OLnBhcnNlKGdlbmVyYXRlZEV4ZXJjaXNlLnVua25vd25zKS5mb3JFYWNoKF91bmtub3ducyA9PiB7XG4gICAgICAgICAgICB1bmtub3ducy5wdXNoKE9iamVjdC5rZXlzKF91bmtub3ducykpXG4gICAgICAgICAgfSlcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoZm9ybWF0dGVkUXVlc3Rpb25zUHJvbWlzZXMpLnRoZW4ocmVuZGVyZWRRdWVzdGlvbnMgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgcmVuZGVyZWRRdWVzdGlvbnMsXG4gICAgICAgICAgICAgIHVua25vd25zXG4gICAgICAgICAgICB9IGFzIEZvcm1hdHRlZEV4ZXJjaXNlXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcDIuZXJyTWVzc2FnZSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KS50aGVuKGZvcm1hdHRlZEV4ZXJjaXNlcyA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5yZWFkT25lPFRvcGljPih7IG1vZGVsTmFtZTogJ1RvcGljJywgc2VhcmNoQ2xhdXNlOiB7IGlkOiB0b3BpY0lkIH0gfSkudGhlbihyZXNwID0+IHtcbiAgICAgICAgaWYgKHJlc3Auc3RhdHVzICYmIHJlc3AuZGF0YSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXM6IHRydWUsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIHRvcGljTmFtZTogcmVzcC5kYXRhLnRvcGljLFxuICAgICAgICAgICAgICBmb3JtYXR0ZWRFeGVyY2lzZXMsXG4gICAgICAgICAgICAgIGlkZWFsVGltZTogZ2VuZXJhdGVkVG9waWNFeGVyY2lzZS5pZGVhbFRpbWUsXG4gICAgICAgICAgICAgIGVsYXBzZWRUaW1lOiBVdGlscy5nZXRFbGFwc2VkVGltZShnZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlLmNyZWF0ZWRBdClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBmYWxzZSwgZXJyTWVzc2FnZTogJycgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICAvLyBHcmFkZSBhIFRvcGljRXhlcmNpc2VcbiAgZ3JhZGVFeGVyY2lzZSAoZ2VuZXJhdGVkRXhlcmNpc2VEZXRhaWxzOiBHZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlRGV0YWlsW10sIGFuc3dlcnM6IFRvcGljRXhlcmNpc2VBbnN3ZXIpOiBQcm9taXNlPE5DUmVzcG9uc2U8VG9waWNFeGVyY2lzZUdyYWRlPj4ge1xuICAgIHJldHVybiBQcm9taXNlLm1hcChnZW5lcmF0ZWRFeGVyY2lzZURldGFpbHMsIGV4ZXJjaXNlRGV0YWlsID0+IHtcbiAgICAgIHJldHVybiB0aGlzLnJlYWRPbmU8RXhlcmNpc2U+KHsgbW9kZWxOYW1lOiAnRXhlcmNpc2UnLCBzZWFyY2hDbGF1c2U6IHsgaWQ6IGV4ZXJjaXNlRGV0YWlsLmV4ZXJjaXNlSWQgfSB9KS50aGVuKHJlc3AgPT4ge1xuICAgICAgICBpZiAocmVzcC5zdGF0dXMgJiYgcmVzcC5kYXRhKSB7XG4gICAgICAgICAgY29uc3QgZXhlcmNpc2UgPSByZXNwLmRhdGFcbiAgICAgICAgICBjb25zdCBleGVyY2lzZVNvbHZlciA9IEV4ZXJjaXNlR2VuZXJhdG9yLmdldEV4ZXJjaXNlU29sdmVyKGV4ZXJjaXNlLmRhdGEpXG4gICAgICAgICAgY29uc3Qga25vd25zID0gSlNPTi5wYXJzZShleGVyY2lzZURldGFpbC5rbm93bnMpXG4gICAgICAgICAgY29uc3QgdW5rbm93bnMgPSBKU09OLnBhcnNlKGV4ZXJjaXNlRGV0YWlsLnVua25vd25zKVxuICAgICAgICAgIHJldHVybiBrbm93bnMubWFwKChrbm93biwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7IGtub3duLCBjb3JyZWN0QW5zd2VyOiB1bmtub3duc1tpbmRleF0sIGlzQW5zd2VyRm46IGV4ZXJjaXNlU29sdmVyLmlzQW5zd2VyLmJpbmQoZXhlcmNpc2VTb2x2ZXIpIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhlcmNpc2Ugd2l0aCBpZD0nICsgZXhlcmNpc2VEZXRhaWwuZXhlcmNpc2VJZCArICcgY291bGQgbm90IGJlIGZvdW5kIScpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSkudGhlbih0b3BpY0V4ZXJjaXNlQXJyYXkgPT4ge1xuICAgICAgLy8gTm93LCB3ZSBoYXZlIDMgbGV2ZWwgYXJyYXlzOlxuICAgICAgLy8gMSAtPiBUb3BpYyBFeGVyY2lzZS4gMiAtPiBFeGVyY2lzZS4gMyAtPiBRdWVzdGlvblxuICAgICAgLy8gQnV0IHNpbmNlIHVzZXJBbnN3ZXIgaXMgYSAxLWxldmVsIGFycmF5IG9mIHF1ZXN0aW9uLCB3ZSBuZWVkIHRvIGZsYXR0ZW4gd2hhdCB3ZSBoYXZlIHRvIGJlIGVhc2lseSB1c2VkXG4gICAgICByZXR1cm4gdG9waWNFeGVyY2lzZUFycmF5LnJlZHVjZSgoYWNjLCBleGVyY2lzZUFycmF5KSA9PiB7XG4gICAgICAgIHJldHVybiBhY2MuY29uY2F0KGV4ZXJjaXNlQXJyYXkpXG4gICAgICB9LCBbXSkucmVkdWNlKChhY2MsIHF1ZXN0aW9uQXJyYXkpID0+IHtcbiAgICAgICAgcmV0dXJuIGFjYy5jb25jYXQocXVlc3Rpb25BcnJheSlcbiAgICAgIH0sIFtdKVxuICAgIH0pLnRoZW4ocmVzdWx0cyA9PiB7XG4gICAgICBjb25zb2xlLmRpcihyZXN1bHRzKVxuICAgICAgY29uc3QgeyBudW1Db3JyZWN0QW5zd2VycywgY29ycmVjdEFuc3dlcnMsIGlzQ29ycmVjdCB9ID0gcmVzdWx0cy5yZWR1Y2UoKGFjYywgcmVzdWx0LCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBpc0NvcnJlY3QgPSByZXN1bHQuaXNBbnN3ZXJGbihyZXN1bHQua25vd24sIGFuc3dlcnNbaW5kZXhdKVxuICAgICAgICBhY2MubnVtQ29ycmVjdEFuc3dlcnMgKz0gaXNDb3JyZWN0ID8gMSA6IDBcbiAgICAgICAgYWNjLmNvcnJlY3RBbnN3ZXJzLnB1c2gocmVzdWx0LmNvcnJlY3RBbnN3ZXIpXG4gICAgICAgIGFjYy5pc0NvcnJlY3QucHVzaChpc0NvcnJlY3QpXG4gICAgICAgIHJldHVybiBhY2NcbiAgICAgIH0sIHsgbnVtQ29ycmVjdEFuc3dlcnM6IDAsIGNvcnJlY3RBbnN3ZXJzOiBbXSwgaXNDb3JyZWN0OiBbXSB9KVxuICAgICAgY29uc3QgbnVtUXVlc3Rpb25zID0gcmVzdWx0cy5sZW5ndGhcbiAgICAgIGNvbnN0IGdyYWRlOiBUb3BpY0V4ZXJjaXNlR3JhZGUgPSB7XG4gICAgICAgIG51bVF1ZXN0aW9ucyxcbiAgICAgICAgbnVtQ29ycmVjdEFuc3dlcnMsXG4gICAgICAgIGNvcnJlY3RBbnN3ZXJzLFxuICAgICAgICBpc0NvcnJlY3QsXG4gICAgICAgIHNjb3JlOiBwYXJzZUZsb2F0KG51bUNvcnJlY3RBbnN3ZXJzKSAvIG51bVF1ZXN0aW9ucyAqIDEwMFxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgc3RhdHVzOiB0cnVlLCBkYXRhOiBncmFkZSB9XG4gICAgfSlcbiAgfVxuXG4gIC8vIFVwZGF0ZSBHZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlIGFzIHN1Ym1pdHRlZFxuICBmaW5pc2hFeGVyY2lzZSAoZ2VuZXJhdGVkVG9waWNFeGVyY2lzZUlkOiBudW1iZXIsIHNjb3JlOiBudW1iZXIsIHRpbWVGaW5pc2g6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgIGV4ZXJjaXNlRGV0YWlsczogR2VuZXJhdGVkVG9waWNFeGVyY2lzZURldGFpbFtdLCBhbnN3ZXJzOiBUb3BpY0V4ZXJjaXNlQW5zd2VyW10pOiBQcm9taXNlPE5DUmVzcG9uc2U8bnVtYmVyPj4ge1xuICAgIC8vIFRoaXMgaXMgYSBiaXQgYW5ub3lpbmcuLlxuICAgIC8vIFNvIGFuc3dlciBpcyB3aGF0IGEgc3R1ZGVudCB3b3VsZCBzdWJtaXQuIEl0J3MgYSBvbmUgZGltZW5zaW9uYWwgYXJyYXkgb2YgYW5zd2VycyBmb3IgZWFjaCBvZiB0aGUgZXhlcmNpc2VzXG4gICAgLy8gV2Ugd2FudCB0byBzYXZlIHVzZXIgYW5zd2VyIGludG8gZXhlcmNpc2VEZXRhaWwgc28gdGhhdCB3ZSBjYW4gZGVidWcgcHJvYmxlbXMuIChpLmUuIHdyb25nIHNjb3JpbmcpXG4gICAgLy8gSW4gb3JkZXIgdG8gbWFrZSBzdXJlIGVhY2ggYW5zd2VyIGdvZXMgdG8gY29ycmVjdCBleGVyY2lzZSBkZXRhaWwsIHdlIGhhdmUgd2luZCB0aGVtIHVwXG4gICAgLy8gaW4gdGhlIHNhbWUgb3JkZXIgd2hlbiB3ZSB1bndpbmQuIElmIHlvdSdyZSBjb25mdXNlZCBhYm91dCB0aGlzIGNvZGU6XG4gICAgLy8gMS4gVHJ5IHRvIGxvb2sgYXQgTXlTUUwgdGFibGUgc3RydWN0dXJlIGZvciBnZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlc1xuICAgIC8vIDIuIFJlbWVtYmVyIHRoYXQgZXhlcmNpc2VEZXRhaWwgdGhlcmUgaXMgc3RyaW5naWZpZWQgdmVyc2lvbiBvZiBlYWNoIG9mIGdlbmVyYXRlZEV4ZXJjaXNlcyB0aGF0IG1ha2VzIHVwXG4gICAgLy8gICAgYSB0b3BpYyBleGVyY2lzZS5cbiAgICBsZXQgYW5zd2VySW5kZXggPSAwXG4gICAgY29uc3QgZXhlcmNpc2VEZXRhaWwgPSBKU09OLnN0cmluZ2lmeShleGVyY2lzZURldGFpbHMubWFwKGV4ZXJjaXNlRGV0YWlsID0+IHtcbiAgICAgIGNvbnNvbGUuZGlyKGV4ZXJjaXNlRGV0YWlsKVxuICAgICAgY29uc3QgZXhlcmNpc2VEZXRhaWxBbnN3ZXJzOiBBcnJheTxhbnk+ID0gW11cbiAgICAgIEpTT04ucGFyc2UoZXhlcmNpc2VEZXRhaWwua25vd25zKS5mb3JFYWNoKF8gPT4ge1xuICAgICAgICBleGVyY2lzZURldGFpbEFuc3dlcnMucHVzaChhbnN3ZXJzW2Fuc3dlckluZGV4XSlcbiAgICAgICAgYW5zd2VySW5kZXgrK1xuICAgICAgfSlcbiAgICAgIGV4ZXJjaXNlRGV0YWlsLnVzZXJBbnN3ZXIgPSBKU09OLnN0cmluZ2lmeShleGVyY2lzZURldGFpbEFuc3dlcnMpXG4gICAgICByZXR1cm4gZXhlcmNpc2VEZXRhaWxcbiAgICB9KSlcbiAgICByZXR1cm4gdGhpcy51cGRhdGU8R2VuZXJhdGVkVG9waWNFeGVyY2lzZT4oe1xuICAgICAgbW9kZWxOYW1lOiAnR2VuZXJhdGVkVG9waWNFeGVyY2lzZScsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGlkOiBnZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlSWQsXG4gICAgICAgIHN1Ym1pdHRlZDogdHJ1ZSxcbiAgICAgICAgc3VibWl0dGVkQXQ6IG1vbWVudCgpLmxvY2FsKCkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyksXG4gICAgICAgIG9uQ2xvdWQ6IEFwcENvbmZpZy5DTE9VRF9TRVJWRVIsXG4gICAgICAgIHNjb3JlLFxuICAgICAgICB0aW1lRmluaXNoLFxuICAgICAgICBleGVyY2lzZURldGFpbFxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvLyBXaGVuIHVzZXIgd2FudHMgdG8gZG8gVG9waWNFeGVyY2lzZSwgYSBHZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlIG1ldGEgaW5mb3JtYXRpb24gaXMgY3JlYXRlZFxuICAvLyB0byBzdG9yZSBsb2NhbCBpbmZvcm1hdGlvbiBhYm91dCB0aGF0IHBhcnRpY3VsYXIgZXhlcmNpc2UgKGkuZS4gcmFuZG9tIHF1ZXN0aW9ucylcbiAgLy8gRm9yIGVhY2ggdXNlciwgdGhlcmUncyBleGFjdGx5IG9uZSBHZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlIHdpdGggc3VibWl0dGVkID0gZmFsc2UgZm9yIGVhY2hcbiAgLy8gVG9waWNFeGVyY2lzZXNcbiAgZ2V0R2VuZXJhdGVkVG9waWNFeGVyY2lzZSAodXNlcklkLCB0b3BpY0lkKTogUHJvbWlzZTxOQ1Jlc3BvbnNlPEdlbmVyYXRlZFRvcGljRXhlcmNpc2U+PiB7XG4gICAgcmV0dXJuIHRoaXMucmVhZE9uZTxHZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlPih7XG4gICAgICBtb2RlbE5hbWU6ICdHZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlJyxcbiAgICAgIHNlYXJjaENsYXVzZToge1xuICAgICAgICB1c2VySWQsXG4gICAgICAgIHRvcGljSWQsXG4gICAgICAgIHN1Ym1pdHRlZDogZmFsc2UsXG4gICAgICAgIG9uQ2xvdWQ6IEFwcENvbmZpZy5DTE9VRF9TRVJWRVJcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZ2V0U3RhckJhZGdlcyAodXNlcklkLCB0b3BpY0lkKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U2VxdWVsaXplKCkucXVlcnkoYFxuU0VMRUNUIHNjb3JlIEZST00gZ2VuZXJhdGVkVG9waWNFeGVyY2lzZXNcbldIRVJFIHN1Ym1pdHRlZCA9IDEgQU5EIHRvcGljSWQgPSAke3RvcGljSWR9IEFORCB1c2VySWQgPSAke3VzZXJJZH1cbk9SREVSIEJZIHNjb3JlIERFU0MgTElNSVQgNDtgLFxuICAgIHsgdHlwZTogU2VxdWVsaXplLlF1ZXJ5VHlwZXMuU0VMRUNUIH0pLnRoZW4oZGF0YXMgPT4ge1xuICAgICAgY29uc3Qgc3RhcnMgPSBkYXRhcy5yZWR1Y2UoKGFjYywgZGF0YSkgPT4ge1xuICAgICAgICBpZiAocGFyc2VJbnQoZGF0YS5zY29yZSwgMTApID49IDgwKSB7XG4gICAgICAgICAgcmV0dXJuIGFjYyArIDFcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gYWNjXG4gICAgICAgIH1cbiAgICAgIH0sIDApXG4gICAgICByZXR1cm4geyBzdGF0dXM6IHRydWUsIGRhdGE6IHsgc3RhcnMgfSB9XG4gICAgfSlcbiAgfVxuXG4gIGdldFJlbmRlcmVkU3RhckJhZGdlcyAodXNlcklkLCB0b3BpY0lkKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RhckJhZGdlcyh1c2VySWQsIHRvcGljSWQpLnRoZW4ocmVzcCA9PiB7XG4gICAgICBpZiAocmVzcC5zdGF0dXMpIHtcbiAgICAgICAgY29uc3Qgc3RhcnMgPSByZXNwLmRhdGEuc3RhcnNcbiAgICAgICAgY29uc3QgaHRtbCA9IHB1Zy5yZW5kZXJGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9hcHAvdmlld3Mvbm9uLXBhZ2VzL3N0YXJzLnB1ZycpLCB7IHN0YXJzIH0pXG4gICAgICAgIHJldHVybiB7IHN0YXR1czogdHJ1ZSwgZGF0YTogeyBodG1sLCBzdGFycyB9IH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZXNwXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q2hlY2ttYXJrQmFkZ2UgKHVzZXJJZCwgdG9waWNJZCwgcmVuZGVyID0gZmFsc2UpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTZXF1ZWxpemUoKS5xdWVyeShgXG5TRUxFQ1Qgc2NvcmUgRlJPTSBnZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlc1xuV0hFUkUgc3VibWl0dGVkID0gMSBBTkQgdG9waWNJZCA9ICR7dG9waWNJZH0gQU5EIHVzZXJJZCA9ICR7dXNlcklkfSBBTkQgc2NvcmUgPiA4MFxuT1JERVIgQlkgc2NvcmUgREVTQyBMSU1JVCAxO2AsXG4gICAgeyB0eXBlOiBTZXF1ZWxpemUuUXVlcnlUeXBlcy5TRUxFQ1QgfSkudGhlbihkYXRhcyA9PiB7XG4gICAgICBjb25zdCBpc0NoZWNrZWQgPSBkYXRhcy5sZW5ndGggPiAwXG4gICAgICBpZiAocmVuZGVyKSB7XG4gICAgICAgIGNvbnN0IGh0bWwgPSBwdWcucmVuZGVyRmlsZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vYXBwL3ZpZXdzL25vbi1wYWdlcy9jZWNrbWFyay5wdWcnKSwgeyBpc0NoZWNrZWQgfSlcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiB0cnVlLCBkYXRhOiBodG1sIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogdHJ1ZSwgZGF0YTogeyBpc0NoZWNrZWQgfSB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGdldFRpbWVyQmFkZ2VzICh1c2VySWQsIHRvcGljSWQpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTZXF1ZWxpemUoKS5xdWVyeShgXG5TRUxFQ1Qgc2NvcmUgRlJPTSBnZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlc1xuV0hFUkUgc3VibWl0dGVkID0gMSBBTkQgdG9waWNJZCA9ICR7dG9waWNJZH0gQU5EIHVzZXJJZCA9ICR7dXNlcklkfVxuQU5EIHRpbWVGaW5pc2ggPCBpZGVhbFRpbWUgQU5EIHNjb3JlID0gMTAwXG5PUkRFUiBCWSBzY29yZSBERVNDIExJTUlUIDE7YCxcbiAgICB7IHR5cGU6IFNlcXVlbGl6ZS5RdWVyeVR5cGVzLlNFTEVDVCB9KS50aGVuKGRhdGFzID0+IHtcbiAgICAgIGNvbnN0IHRpbWVycyA9IGRhdGFzLnJlZHVjZSgoYWNjLCBkYXRhKSA9PiB7XG4gICAgICAgIGlmIChwYXJzZUludChkYXRhLnNjb3JlLCAxMCkgPj0gODApIHtcbiAgICAgICAgICByZXR1cm4gYWNjICsgMVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBhY2NcbiAgICAgICAgfVxuICAgICAgfSwgMClcblxuICAgICAgcmV0dXJuIHsgc3RhdHVzOiB0cnVlLCBkYXRhOiB7IHRpbWVycyB9IH1cbiAgICB9KVxuICB9XG5cbiAgZ2V0UmVuZGVyZWRUaW1lckJhZGdlcyAodXNlcklkLCB0b3BpY0lkKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGltZXJCYWRnZXModXNlcklkLCB0b3BpY0lkKS50aGVuKHJlc3AgPT4ge1xuICAgICAgaWYgKHJlc3Auc3RhdHVzKSB7XG4gICAgICAgIGNvbnN0IHRpbWVycyA9IHJlc3AuZGF0YS50aW1lcnNcbiAgICAgICAgY29uc3QgaHRtbCA9IHB1Zy5yZW5kZXJGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9hcHAvdmlld3Mvbm9uLXBhZ2VzL3RpbWVycy5wdWcnKSwgeyB0aW1lcnMgfSlcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiB0cnVlLCBkYXRhOiBodG1sIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAocmVzcClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgICAvLyBHZXQgbGVhZGVyYm9hcmQgZGF0YVxuICBnZXRSYW5raW5nICh0b3BpY0lkKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U2VxdWVsaXplKCkucXVlcnkoXG5gU0VMRUNUIE1JTih0aW1lRmluaXNoKSBBUyB0aW1lRmluaXNoLCB1c2VySWQsIHVzZXJzLmZ1bGxOYW1lIEFTIGZ1bGxOYW1lLCB1c2Vycy5ncmFkZSBBUyBncmFkZSwgc2Nob29scy5uYW1lIEFTIHNjaG9vbE5hbWVcbkZST00gZ2VuZXJhdGVkVG9waWNFeGVyY2lzZXMgSU5ORVIgSk9JTiB1c2VycyBPTiB1c2Vycy5pZCA9IGdlbmVyYXRlZFRvcGljRXhlcmNpc2VzLnVzZXJJZCBJTk5FUiBKT0lOIHNjaG9vbHMgT04gc2Nob29scy5pZCA9IHVzZXJzLnNjaG9vbElkXG5XSEVSRSBzdWJtaXR0ZWQgPSBUUlVFIEFORCB0b3BpY0lkID0gJHt0b3BpY0lkfSBBTkQgc2NvcmUgPSAxMDAgQU5EIHRpbWVGaW5pc2ggSVMgTk9UIE5VTEwgR1JPVVAgQlkgdXNlcklkIE9SREVSIEJZIE1JTih0aW1lRmluaXNoKSBMSU1JVCAxMDtgLFxuICAgIHsgdHlwZTogU2VxdWVsaXplLlF1ZXJ5VHlwZXMuU0VMRUNUIH0pLnRoZW4ocmVzcCA9PiB7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IHRydWUsIGRhdGE6IHJlc3AgfVxuICAgIH0pXG4gIH1cblxuICBnZXRSZW5kZXJlZExlYWRlcmJvYXJkICh0b3BpY0lkKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UmFua2luZyh0b3BpY0lkKS50aGVuKHJlc3AgPT4ge1xuICAgICAgaWYgKHJlc3Auc3RhdHVzKSB7XG4gICAgICAgIGNvbnN0IGV4ZXJjaXNlRGF0YSA9IHJlc3AuZGF0YVxuICAgICAgICBjb25zdCBodG1sID0gcHVnLnJlbmRlckZpbGUocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL2FwcC92aWV3cy9ub24tcGFnZXMvcmFua2luZy5wdWcnKSwgeyBleGVyY2lzZURhdGEgfSlcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiB0cnVlLCBkYXRhOiBodG1sIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZXNwXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8vIEdldCB0aGUgbnVtYmVyIG9mIHJhbmsgaW4gbGVhZGVyYm9hcmRcbiAgZ2V0Q3VycmVudFJhbmtpbmcgKHRpbWVGaW5pc2gsIHRvcGljSWQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgcXVlcnlEQiA9IGBTRUxFQ1QgQ09VTlQoKikgQVMgdG90YWxcbkZST00gKFNFTEVDVCBDT1VOVCgqKSBGUk9NIGdlbmVyYXRlZFRvcGljRXhlcmNpc2VzXG5XSEVSRSBzdWJtaXR0ZWQgPSBUUlVFIEFORCB0aW1lRmluaXNoIDwgJHt0aW1lRmluaXNofSBBTkQgdG9waWNJZCA9ICR7dG9waWNJZH0gQU5EIHNjb3JlID0gMTAwIEFORCB0aW1lRmluaXNoIElTIE5PVCBOVUxMXG5HUk9VUCBCWSB1c2VySWRcbk9SREVSIEJZIE1JTih0aW1lRmluaXNoKSkgQVMgdG90YWxyb3c7YFxuICAgICAgcmV0dXJuIHRoaXMuZ2V0U2VxdWVsaXplKCkucXVlcnkocXVlcnlEQixcbiAgICAgICAgeyB0eXBlOiBTZXF1ZWxpemUuUXVlcnlUeXBlcy5TRUxFQ1QgfSkudGhlbihyZXNwID0+IHtcbiAgICAgICAgICByZXNvbHZlKHsgc3RhdHVzOiB0cnVlLCBkYXRhOiB7IGNvdW50OiByZXNwWzBdLnRvdGFsIH0gfSlcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICB9KVxuICAgIH0pXG4gIH1cblxuICAvLyBHZXQgdGhlIG51bWJlciBvZiBzdWJtaXNzaW9ucyBpbiB0aGUgbGVhZGVyYm9hcmRcbiAgZ2V0VG90YWxSYW5raW5nICh0b3BpY0lkKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCBxdWVyeURCID0gYFNFTEVDVCBDT1VOVCgqKSBBUyB0b3RhbFxuRlJPTSAoU0VMRUNUIENPVU5UKCopIEZST00gZ2VuZXJhdGVkVG9waWNFeGVyY2lzZXMgV0hFUkUgc3VibWl0dGVkID0gVFJVRSBBTkQgdG9waWNJZCA9ICR7dG9waWNJZH0gQU5EIHNjb3JlID0gMTAwIEFORCB0aW1lRmluaXNoIElTIE5PVCBOVUxMXG5HUk9VUCBCWSB1c2VySWRcbk9SREVSIEJZIE1JTih0aW1lRmluaXNoKSkgQVMgdG90YWxyb3c7YFxuICAgICAgcmV0dXJuIHRoaXMuZ2V0U2VxdWVsaXplKCkucXVlcnkocXVlcnlEQixcbiAgICAgICAgeyB0eXBlOiBTZXF1ZWxpemUuUXVlcnlUeXBlcy5TRUxFQ1QgfSkudGhlbihyZXNwID0+IHtcbiAgICAgICAgICByZXNvbHZlKHsgc3RhdHVzOiB0cnVlLCBkYXRhOiB7IGNvdW50OiByZXNwWzBdLnRvdGFsIH0gfSlcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICB9KVxuICAgIH0pXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IFRvcGljRXhlcmNpc2VTZXJ2aWNlKClcbiJdfQ==
