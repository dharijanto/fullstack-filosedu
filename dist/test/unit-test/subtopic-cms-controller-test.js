"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const path=require("path"),Promise=require("bluebird");let _=require("lodash"),chai=require("chai"),expect=chai.expect,log=require("npmlog");log.level="info";let request=require("supertest"),Sequelize=require("sequelize"),AppConfig=require(path.join(__dirname,"../../app-config")),createSequelizeModel=require(path.join(__dirname,"../../db-structure")),MainController=require(path.join(__dirname,"../../cms/main-controller"));describe("Subtopic Controller",function(){let e,t,a={};const o={hash:"JustARandomValue"};beforeEach(function(s){const i={sequelize:e,models:a};this.timeout(1e4),e=new Sequelize(AppConfig.testDbPath,{logging:!1}),createSequelizeModel(e,a),e.sync({force:!0}).then(()=>{const e=new MainController({site:o,db:i,logTag:"SubtopicController-Test"});t=e.getRouter(),(void 0).create({modelName:"Subject",data:{subject:"Matematika"}}).then(e=>{expect(e.status).to.be.ok(),(void 0).create({modelName:"Topic",data:{topic:"Aljabar",topicId:e.data.id}}).then(e=>{expect(e.status).to.be.ok(),(void 0).create({modelName:"Subtopic",data:{subtopic:"Mengenal Aljabar",topicId:e.data.id}}).then(e=>{expect(e.status).to.be.ok(),s()})})})})}),afterEach(function(){e.close().catch(e=>{console.error(e)})}),it("GET subtopic/[id] should work",function(e){(void 0).read({modelName:"Subtopic",searchClause:{subtopic:"Mengenal Aljabar"}}).then(a=>{expect(a.status).to.be.ok();const s=a.data[0].id;request(t).get(`/${o.hash}/subtopic/${s}`).expect(200,function(t){e(t)})})}),it("POST subtopic/submit/[id] should update subtopic detail",function(e){(void 0).read({modelName:"Subtopic",searchClause:{subtopic:"Mengenal Aljabar"}}).then(a=>{expect(a.status).to.be.ok();const s=a.data[0].id;request(t).post(`/${o.hash}/subtopic/submit/${s}`).send({subtopicData:{youtube_url:"https://www.youtube.com/watch?v=GBu2jofRJtk",detail:"Aljabar adalah...."}}).expect(200,function(t,a){expect(a.body.status,a.body.errMessage).to.be.ok(),(void 0).read({modelName:"Subtopic",searchClause:{subtopic:"Mengenal Aljabar"}}).then(a=>{expect(a.status).to.be.ok(),expect(a.data[0]).to.exist();const o=JSON.parse(a.data[0].data);expect(o).to.have.all.keys(["youtube_url","detail"]),expect(o.youtube_url).to.equal("https://www.youtube.com/watch?v=GBu2jofRJtk"),expect(o.detail).to.equal("Aljabar adalah...."),e(t)})})})}),it("POST subtopic/submit/[id] should add new exercises",function(e){(void 0).read({modelName:"Subtopic",searchClause:{subtopic:"Mengenal Aljabar"}}).then(a=>{expect(a.status).to.be.ok();const s=a.data[0].id;request(t).post(`/${o.hash}/subtopic/submit/${s}`).send({"new-exercise-1":"hello this is new exercise 1"}).send({"new-exercise-2":"hello this is new exercise 2"}).expect(200,function(t,a){if(t)e(t);else{expect(a.body.status,a.body.errMessage).to.be.ok();const t=a.body.data.newExerciseIds;expect(t).to.exist(),expect(Object.keys(t),`IDs: ${t}`).to.have.length(2);const o=t["new-exercise-1"],i=t["new-exercise-2"];expect(o).to.be.a("number"),expect(i).to.be.a("number"),(void 0).read({modelName:"Exercise",searchClause:{subtopicId:s}}).then(t=>{expect(t.status).to.be.ok(),expect(t.data,`Exercises: ${JSON.stringify(t.data)}`).to.have.length(2),expect(t.data[0].data).to.equal("hello this is new exercise 1"),expect(t.data[1].data).to.equal("hello this is new exercise 2"),expect(t.data[0].id).to.equal(o),expect(t.data[1].id).to.equal(i),e()})}})})}),it("POST subtopic/submit/[id] should update existing exercise",function(e){(void 0).read({modelName:"Subtopic",searchClause:{subtopic:"Mengenal Aljabar"}}).then(a=>{const s=a.data[0].id;Promise.join((void 0).create({modelName:"Exercise",data:{data:"Hello World 1",subtopicId:s}}),(void 0).create({modelName:"Exercise",data:{data:"Hello World 2",subtopicId:s}})).spread((a,i)=>{expect(a.status).to.be.ok(),expect(i.status).to.be.ok();const c={};c[`exercise-${a.data&&a.data.id}`]="World Hello 1",c[`exercise-${i.data&&i.data.id}`]="World Hello 2",request(t).post(`/${o.hash}/subtopic/submit/${s}`).send(c).expect(200,function(t,a){t?e(t):(expect(a.body.status).to.be.ok(),expect(a.body.newExerciseIds).to.not.exist(),(void 0).read({modelName:"Exercise",searchClause:{subtopicId:s}}).then(t=>{expect(t.status).to.be.ok(),expect(t.data).to.have.length(2),expect(t.data[0].data).to.equal("World Hello 1"),expect(t.data[1].data).to.equal("World Hello 2"),e()}))})})})}),it("POST subtopic/submit/[id] should add new and update existing exercises",function(e){(void 0).read({modelName:"Subtopic",searchClause:{subtopic:"Mengenal Aljabar"}}).then(a=>{const s=a.data[0].id;(void 0).create({modelName:"Exercise",data:{data:"Hello World 1",subtopicId:s}}).then(a=>{expect(a.status).to.be.ok();const i={"new-exercise":"New Exercise"};i[`exercise-${a.data.id}`]="Existing Exercise",request(t).post(`/${o.hash}/subtopic/submit/${s}`).send(i).expect(200,function(t,a){if(t)e(t);else{expect(a.body.status).to.be.ok();const t=a.body.data.newExerciseIds;expect(t).to.exist(),expect(Object.keys(t)).to.have.length(1),expect(t["new-exercise"]).to.exist(),(void 0).read({modelName:"Exercise",searchClause:{subtopicId:s}}).then(a=>{expect(a.status).to.be.true(),expect(a.data).to.have.length(2),expect(a.data[0].data).to.equal("Existing Exercise"),expect(a.data[1].data).to.equal("New Exercise"),expect(a.data[1].id).to.equal(t["new-exercise"]),e()})}})})})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXN0L3VuaXQtdGVzdC9zdWJ0b3BpYy1jbXMtY29udHJvbGxlci10ZXN0LnRzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiUHJvbWlzZSIsIl8iLCJjaGFpIiwiZXhwZWN0IiwibG9nIiwibGV2ZWwiLCJyZXF1ZXN0IiwiU2VxdWVsaXplIiwiQXBwQ29uZmlnIiwiam9pbiIsIl9fZGlybmFtZSIsImNyZWF0ZVNlcXVlbGl6ZU1vZGVsIiwiTWFpbkNvbnRyb2xsZXIiLCJkZXNjcmliZSIsInNlcXVlbGl6ZSIsImFwcCIsIm1vZGVscyIsInNpdGUiLCJoYXNoIiwiYmVmb3JlRWFjaCIsImRvbmUiLCJkYiIsInRoaXMiLCJ0aW1lb3V0IiwidGVzdERiUGF0aCIsImxvZ2dpbmciLCJzeW5jIiwiZm9yY2UiLCJ0aGVuIiwibWFpbkNvbnRyb2xsZXIiLCJsb2dUYWciLCJnZXRSb3V0ZXIiLCJDb3Vyc2VTZXJ2aWNlIiwiY3JlYXRlIiwibW9kZWxOYW1lIiwiZGF0YSIsInN1YmplY3QiLCJyZXNwIiwic3RhdHVzIiwidG8iLCJiZSIsIm9rIiwidG9waWMiLCJ0b3BpY0lkIiwiaWQiLCJyZXNwMiIsInN1YnRvcGljIiwicmVzcDMiLCJhZnRlckVhY2giLCJjbG9zZSIsImNhdGNoIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiaXQiLCJyZWFkIiwic2VhcmNoQ2xhdXNlIiwic3VidG9waWNJZCIsImdldCIsInBvc3QiLCJzZW5kIiwic3VidG9waWNEYXRhIiwieW91dHViZV91cmwiLCJkZXRhaWwiLCJyZXMiLCJib2R5IiwiZXJyTWVzc2FnZSIsImV4aXN0IiwiSlNPTiIsInBhcnNlIiwiaGF2ZSIsImFsbCIsImtleXMiLCJlcXVhbCIsIm5ldy1leGVyY2lzZS0xIiwibmV3LWV4ZXJjaXNlLTIiLCJuZXdFeGVyY2lzZUlkcyIsIk9iamVjdCIsImxlbmd0aCIsImV4ZXJjaXNlSWQxIiwiZXhlcmNpc2VJZDIiLCJhIiwic3RyaW5naWZ5Iiwic3By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S0ksSUFBaUJyQyxHQUFHK0IsS0FBS1EsT0FBTyxHQUNuRDNFLE9BQU95RSxFQUFlLGlCQUFpQnJDLEdBQUc0QixjQTdLbERuQyxHQThLc0J1QixNQUFPckIsVUFBVyxXQUFZc0IsY0FBZ0JDLFdBQUFBLEtBQWdCN0IsS0FBS2lCLElBQy9FMUMsT0FBTzBDLEVBQU1QLFFBQVFDLEdBQUdDLEdBQUdnRCxPQUMzQnJGLE9BQU8wQyxFQUFNVixNQUFNSSxHQUFHK0IsS0FBS1EsT0FBTyxHQUNsQzNFLE9BQU8wQyxFQUFNVixLQUFLLEdBQUdBLE1BQU1JLEdBQUdrQyxNQUFNLHFCQUNwQ3RFLE9BQU8wQyxFQUFNVixLQUFLLEdBQUdBLE1BQU1JLEdBQUdrQyxNQUFNLGdCQUNwQ3RFLE9BQU8wQyxFQUFNVixLQUFLLEdBQUdTLElBQUlMLEdBQUdrQyxNQUFNRyxFQUFlLGlCQUNqRHhEIiwiZmlsZSI6InRlc3QvdW5pdC10ZXN0L3N1YnRvcGljLWNtcy1jb250cm9sbGVyLXRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnXG5cbmltcG9ydCAqIGFzIFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnXG5cbmltcG9ydCAqIGFzIENvdXJzZVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvY291cnNlLXNlcnZpY2UnXG5cbmxldCBfID0gcmVxdWlyZSgnbG9kYXNoJylcbmxldCBjaGFpID0gcmVxdWlyZSgnY2hhaScpXG5sZXQgZXhwZWN0ID0gY2hhaS5leHBlY3RcbmxldCBsb2cgPSByZXF1aXJlKCducG1sb2cnKVxubG9nLmxldmVsID0gJ2luZm8nXG5sZXQgcmVxdWVzdCA9IHJlcXVpcmUoJ3N1cGVydGVzdCcpXG5sZXQgU2VxdWVsaXplID0gcmVxdWlyZSgnc2VxdWVsaXplJylcblxubGV0IEFwcENvbmZpZyA9IHJlcXVpcmUocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uL2FwcC1jb25maWcnKSlcbmxldCBjcmVhdGVTZXF1ZWxpemVNb2RlbCA9IHJlcXVpcmUocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uL2RiLXN0cnVjdHVyZScpKVxubGV0IE1haW5Db250cm9sbGVyID0gcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vY21zL21haW4tY29udHJvbGxlcicpKVxuXG5kZXNjcmliZSgnU3VidG9waWMgQ29udHJvbGxlcicsIGZ1bmN0aW9uICgpIHtcbiAgbGV0IHNlcXVlbGl6ZVxuICBsZXQgbW9kZWxzID0ge31cbiAgbGV0IGFwcFxuICBsZXQgQ291cnNlU2VydmljZVxuICBjb25zdCBzaXRlID0ge1xuICAgIGhhc2g6ICdKdXN0QVJhbmRvbVZhbHVlJ1xuICB9XG5cbiAgYmVmb3JlRWFjaChmdW5jdGlvbiAoZG9uZSkge1xuICAgIGNvbnN0IGRiID0ge1xuICAgICAgc2VxdWVsaXplLFxuICAgICAgbW9kZWxzXG4gICAgfVxuXG4gICAgdGhpcy50aW1lb3V0KDEwMDAwKVxuICAgIHNlcXVlbGl6ZSA9IG5ldyBTZXF1ZWxpemUoQXBwQ29uZmlnLnRlc3REYlBhdGgsIHsgbG9nZ2luZzogZmFsc2UgfSlcbiAgICBjcmVhdGVTZXF1ZWxpemVNb2RlbChzZXF1ZWxpemUsIG1vZGVscylcblxuICAgIHNlcXVlbGl6ZS5zeW5jKHsgZm9yY2U6IHRydWUgfSkudGhlbigoKSA9PiB7XG4gICAgICBjb25zdCBtYWluQ29udHJvbGxlciA9IG5ldyBNYWluQ29udHJvbGxlcih7IHNpdGUsIGRiLCBsb2dUYWc6ICdTdWJ0b3BpY0NvbnRyb2xsZXItVGVzdCcgfSlcbiAgICAgIGFwcCA9IG1haW5Db250cm9sbGVyLmdldFJvdXRlcigpXG5cbiAgICAgIENvdXJzZVNlcnZpY2UuY3JlYXRlKHsgbW9kZWxOYW1lOiAnU3ViamVjdCcsIGRhdGE6IHsgc3ViamVjdDogJ01hdGVtYXRpa2EnIH0gfSkudGhlbihyZXNwID0+IHtcbiAgICAgICAgZXhwZWN0KHJlc3Auc3RhdHVzKS50by5iZS5vaygpXG4gICAgICAgIENvdXJzZVNlcnZpY2UuY3JlYXRlKHsgbW9kZWxOYW1lOiAnVG9waWMnLCBkYXRhOiB7IHRvcGljOiAnQWxqYWJhcicsIHRvcGljSWQ6IHJlc3AuZGF0YS5pZCB9IH0pLnRoZW4ocmVzcDIgPT4ge1xuICAgICAgICAgIGV4cGVjdChyZXNwMi5zdGF0dXMpLnRvLmJlLm9rKClcbiAgICAgICAgICBDb3Vyc2VTZXJ2aWNlLmNyZWF0ZSh7IG1vZGVsTmFtZTogJ1N1YnRvcGljJywgZGF0YTogeyBzdWJ0b3BpYzogJ01lbmdlbmFsIEFsamFiYXInLCB0b3BpY0lkOiByZXNwMi5kYXRhLmlkIH0gfSkudGhlbihyZXNwMyA9PiB7XG4gICAgICAgICAgICBleHBlY3QocmVzcDMuc3RhdHVzKS50by5iZS5vaygpXG4gICAgICAgICAgICBkb25lKClcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuICB9KVxuXG4gIGFmdGVyRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgLy8gQ2xvc2UgY29ubmVjdGlvbiBzbyBtb2NoYSBleGl0cyBncmFjZWZ1bGx5XG4gICAgc2VxdWVsaXplLmNsb3NlKCkuY2F0Y2goZXJyID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ0dFVCBzdWJ0b3BpYy9baWRdIHNob3VsZCB3b3JrJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICBDb3Vyc2VTZXJ2aWNlLnJlYWQoeyBtb2RlbE5hbWU6ICdTdWJ0b3BpYycsIHNlYXJjaENsYXVzZTogeyBzdWJ0b3BpYzogJ01lbmdlbmFsIEFsamFiYXInIH0gfSkudGhlbihyZXNwID0+IHtcbiAgICAgIGV4cGVjdChyZXNwLnN0YXR1cykudG8uYmUub2soKVxuICAgICAgY29uc3Qgc3VidG9waWNJZCA9IHJlc3AuZGF0YVswXS5pZFxuICAgICAgcmVxdWVzdChhcHApLmdldChgLyR7c2l0ZS5oYXNofS9zdWJ0b3BpYy8ke3N1YnRvcGljSWR9YCkuZXhwZWN0KDIwMCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBkb25lKGVycilcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcblxuICAvLyBVcGRhdGUgb25seSBzdWJ0b3BpY0RhdGEgYW5kIGNoZWNrIGlmIGl0IGlzIHVwZGF0ZWRcbiAgaXQoJ1BPU1Qgc3VidG9waWMvc3VibWl0L1tpZF0gc2hvdWxkIHVwZGF0ZSBzdWJ0b3BpYyBkZXRhaWwnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgIENvdXJzZVNlcnZpY2UucmVhZCh7IG1vZGVsTmFtZTogJ1N1YnRvcGljJywgc2VhcmNoQ2xhdXNlOiB7IHN1YnRvcGljOiAnTWVuZ2VuYWwgQWxqYWJhcicgfSB9KS50aGVuKHJlc3AgPT4ge1xuICAgICAgZXhwZWN0KHJlc3Auc3RhdHVzKS50by5iZS5vaygpXG4gICAgICBjb25zdCBzdWJ0b3BpY0lkID0gcmVzcC5kYXRhWzBdLmlkXG4gICAgICByZXF1ZXN0KGFwcCkucG9zdChgLyR7c2l0ZS5oYXNofS9zdWJ0b3BpYy9zdWJtaXQvJHtzdWJ0b3BpY0lkfWApXG4gICAgICAgIC8vIFdyaXRlIHN1YnRvcGljIGRhdGFcbiAgICAgICAgLnNlbmQoe3N1YnRvcGljRGF0YToge1xuICAgICAgICAgIHlvdXR1YmVfdXJsOiAnaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1HQnUyam9mUkp0aycsXG4gICAgICAgICAgZGV0YWlsOiAnQWxqYWJhciBhZGFsYWguLi4uJ1xuICAgICAgICB9fSlcbiAgICAgICAgLy8gLmVuZCgoZXJyLCByZXMpID0+IHtcbiAgICAgICAgICAvLyBkb25lKGVycilcbiAgICAgICAgLy8gfSlcbiAgICAgICAgLmV4cGVjdCgyMDAsIGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICAgIGV4cGVjdChyZXMuYm9keS5zdGF0dXMsIHJlcy5ib2R5LmVyck1lc3NhZ2UpLnRvLmJlLm9rKClcbiAgICAgICAgICBDb3Vyc2VTZXJ2aWNlLnJlYWQoeyBtb2RlbE5hbWU6ICdTdWJ0b3BpYycsIHNlYXJjaENsYXVzZTogeyBzdWJ0b3BpYzogJ01lbmdlbmFsIEFsamFiYXInIH0gfSkudGhlbihyZXNwMiA9PiB7XG4gICAgICAgICAgICBleHBlY3QocmVzcDIuc3RhdHVzKS50by5iZS5vaygpXG4gICAgICAgICAgICBleHBlY3QocmVzcDIuZGF0YVswXSkudG8uZXhpc3QoKVxuICAgICAgICAgICAgY29uc3Qgc3VidG9waWNEYXRhID0gSlNPTi5wYXJzZShyZXNwMi5kYXRhWzBdLmRhdGEpXG4gICAgICAgICAgICBleHBlY3Qoc3VidG9waWNEYXRhKS50by5oYXZlLmFsbC5rZXlzKFsneW91dHViZV91cmwnLCAnZGV0YWlsJ10pXG4gICAgICAgICAgICBleHBlY3Qoc3VidG9waWNEYXRhLnlvdXR1YmVfdXJsKS50by5lcXVhbCgnaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1HQnUyam9mUkp0aycpXG4gICAgICAgICAgICBleHBlY3Qoc3VidG9waWNEYXRhLmRldGFpbCkudG8uZXF1YWwoJ0FsamFiYXIgYWRhbGFoLi4uLicpXG4gICAgICAgICAgICBkb25lKGVycilcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH0pXG4gIH0pXG5cbiAgLy8gQ3JlYXRlIG9ubHkgbmV3IGV4ZXJjaXNlcyBhbmQgY2hlY2sgaWYgdGhleSBhcmUgY3JlYXRlZFxuICBpdCgnUE9TVCBzdWJ0b3BpYy9zdWJtaXQvW2lkXSBzaG91bGQgYWRkIG5ldyBleGVyY2lzZXMnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgIENvdXJzZVNlcnZpY2UucmVhZCh7IG1vZGVsTmFtZTogJ1N1YnRvcGljJywgc2VhcmNoQ2xhdXNlOiB7IHN1YnRvcGljOiAnTWVuZ2VuYWwgQWxqYWJhcicgfSB9KS50aGVuKHJlc3AgPT4ge1xuICAgICAgZXhwZWN0KHJlc3Auc3RhdHVzKS50by5iZS5vaygpXG4gICAgICBjb25zdCBzdWJ0b3BpY0lkID0gcmVzcC5kYXRhWzBdLmlkXG4gICAgICByZXF1ZXN0KGFwcCkucG9zdChgLyR7c2l0ZS5oYXNofS9zdWJ0b3BpYy9zdWJtaXQvJHtzdWJ0b3BpY0lkfWApXG4gICAgICAgIC5zZW5kKHsgJ25ldy1leGVyY2lzZS0xJzogJ2hlbGxvIHRoaXMgaXMgbmV3IGV4ZXJjaXNlIDEnIH0pXG4gICAgICAgIC5zZW5kKHsgJ25ldy1leGVyY2lzZS0yJzogJ2hlbGxvIHRoaXMgaXMgbmV3IGV4ZXJjaXNlIDInIH0pXG4gICAgICAgIC5leHBlY3QoMjAwLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBkb25lKGVycilcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gU3RhdHVzIHNob3VsZCBiZSB0cnVlXG4gICAgICAgICAgICBleHBlY3QocmVzLmJvZHkuc3RhdHVzLCByZXMuYm9keS5lcnJNZXNzYWdlKS50by5iZS5vaygpXG4gICAgICAgICAgICAvLyBuZXdFeGVyY2lzZUlkcyBzaG91bGQgYmUgcmV0dXJuZWRcbiAgICAgICAgICAgIGNvbnN0IG5ld0V4ZXJjaXNlSWRzID0gcmVzLmJvZHkuZGF0YS5uZXdFeGVyY2lzZUlkc1xuICAgICAgICAgICAgZXhwZWN0KG5ld0V4ZXJjaXNlSWRzKS50by5leGlzdCgpXG4gICAgICAgICAgICBleHBlY3QoT2JqZWN0LmtleXMobmV3RXhlcmNpc2VJZHMpLCBgSURzOiAke25ld0V4ZXJjaXNlSWRzfWApLnRvLmhhdmUubGVuZ3RoKDIpXG4gICAgICAgICAgICBjb25zdCBleGVyY2lzZUlkMSA9IG5ld0V4ZXJjaXNlSWRzWyduZXctZXhlcmNpc2UtMSddXG4gICAgICAgICAgICBjb25zdCBleGVyY2lzZUlkMiA9IG5ld0V4ZXJjaXNlSWRzWyduZXctZXhlcmNpc2UtMiddXG4gICAgICAgICAgICBleHBlY3QoZXhlcmNpc2VJZDEpLnRvLmJlLmEoJ251bWJlcicpXG4gICAgICAgICAgICBleHBlY3QoZXhlcmNpc2VJZDIpLnRvLmJlLmEoJ251bWJlcicpXG4gICAgICAgICAgICBDb3Vyc2VTZXJ2aWNlLnJlYWQoeyBtb2RlbE5hbWU6ICdFeGVyY2lzZScsIHNlYXJjaENsYXVzZTogeyBzdWJ0b3BpY0lkIH0gfSkudGhlbihyZXNwID0+IHtcbiAgICAgICAgICAgICAgZXhwZWN0KHJlc3Auc3RhdHVzKS50by5iZS5vaygpXG4gICAgICAgICAgICAgIGV4cGVjdChyZXNwLmRhdGEsIGBFeGVyY2lzZXM6ICR7SlNPTi5zdHJpbmdpZnkocmVzcC5kYXRhKX1gKS50by5oYXZlLmxlbmd0aCgyKVxuICAgICAgICAgICAgICBleHBlY3QocmVzcC5kYXRhWzBdLmRhdGEpLnRvLmVxdWFsKCdoZWxsbyB0aGlzIGlzIG5ldyBleGVyY2lzZSAxJylcbiAgICAgICAgICAgICAgZXhwZWN0KHJlc3AuZGF0YVsxXS5kYXRhKS50by5lcXVhbCgnaGVsbG8gdGhpcyBpcyBuZXcgZXhlcmNpc2UgMicpXG4gICAgICAgICAgICAgIC8vIG5ld0V4ZXJjaXNlSWRzIHNob3VsZCBiZSBjb3JyZWN0XG4gICAgICAgICAgICAgIGV4cGVjdChyZXNwLmRhdGFbMF0uaWQpLnRvLmVxdWFsKGV4ZXJjaXNlSWQxKVxuICAgICAgICAgICAgICBleHBlY3QocmVzcC5kYXRhWzFdLmlkKS50by5lcXVhbChleGVyY2lzZUlkMilcbiAgICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KVxuICB9KVxuXG4gIGl0KCdQT1NUIHN1YnRvcGljL3N1Ym1pdC9baWRdIHNob3VsZCB1cGRhdGUgZXhpc3RpbmcgZXhlcmNpc2UnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgIENvdXJzZVNlcnZpY2UucmVhZCh7IG1vZGVsTmFtZTogJ1N1YnRvcGljJywgc2VhcmNoQ2xhdXNlOiB7IHN1YnRvcGljOiAnTWVuZ2VuYWwgQWxqYWJhcicgfSB9KS50aGVuKHJlc3AgPT4ge1xuICAgICAgY29uc3Qgc3VidG9waWNJZCA9IHJlc3AuZGF0YVswXS5pZFxuICAgICAgLy8gQ3JlYXRlIDIgbmV3IGV4ZXJjaXNlc1xuICAgICAgUHJvbWlzZS5qb2luKFxuICAgICAgICBDb3Vyc2VTZXJ2aWNlLmNyZWF0ZSh7IG1vZGVsTmFtZTogJ0V4ZXJjaXNlJywgZGF0YTogeyBkYXRhOiAnSGVsbG8gV29ybGQgMScsIHN1YnRvcGljSWQgfSB9KSxcbiAgICAgICAgQ291cnNlU2VydmljZS5jcmVhdGUoeyBtb2RlbE5hbWU6ICdFeGVyY2lzZScsIGRhdGE6IHsgZGF0YTogJ0hlbGxvIFdvcmxkIDInLCBzdWJ0b3BpY0lkIH0gfSlcbiAgICAgICkuc3ByZWFkKChyZXNwMTogTkNSZXNwb25zZTxFeGVyY2lzZT4sIHJlc3AyOiBOQ1Jlc3BvbnNlPEV4ZXJjaXNlPikgPT4ge1xuICAgICAgICBleHBlY3QocmVzcDEuc3RhdHVzKS50by5iZS5vaygpXG4gICAgICAgIGV4cGVjdChyZXNwMi5zdGF0dXMpLnRvLmJlLm9rKClcbiAgICAgICAgY29uc3QgcmVxdWVzdEJvZHkgPSB7fVxuICAgICAgICByZXF1ZXN0Qm9keVtgZXhlcmNpc2UtJHtyZXNwMS5kYXRhICYmIHJlc3AxLmRhdGEuaWR9YF0gPSAnV29ybGQgSGVsbG8gMSdcbiAgICAgICAgcmVxdWVzdEJvZHlbYGV4ZXJjaXNlLSR7cmVzcDIuZGF0YSAmJiByZXNwMi5kYXRhLmlkfWBdID0gJ1dvcmxkIEhlbGxvIDInXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgMiBleGVyY2lzZXNcbiAgICAgICAgcmVxdWVzdChhcHApLnBvc3QoYC8ke3NpdGUuaGFzaH0vc3VidG9waWMvc3VibWl0LyR7c3VidG9waWNJZH1gKVxuICAgICAgICAgIC5zZW5kKHJlcXVlc3RCb2R5KVxuICAgICAgICAgIC5leHBlY3QoMjAwLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgZG9uZShlcnIpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBleHBlY3QocmVzLmJvZHkuc3RhdHVzKS50by5iZS5vaygpXG4gICAgICAgICAgICAgIGV4cGVjdChyZXMuYm9keS5uZXdFeGVyY2lzZUlkcykudG8ubm90LmV4aXN0KClcbiAgICAgICAgICAgICAgQ291cnNlU2VydmljZS5yZWFkKHsgbW9kZWxOYW1lOiAnRXhlcmNpc2UnLCBzZWFyY2hDbGF1c2U6IHsgc3VidG9waWNJZCB9IH0pLnRoZW4ocmVzcDMgPT4ge1xuICAgICAgICAgICAgICAgIGV4cGVjdChyZXNwMy5zdGF0dXMpLnRvLmJlLm9rKClcbiAgICAgICAgICAgICAgICBleHBlY3QocmVzcDMuZGF0YSkudG8uaGF2ZS5sZW5ndGgoMilcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgdXBkYXRlIG1hZGUgaXRcbiAgICAgICAgICAgICAgICBleHBlY3QocmVzcDMuZGF0YVswXS5kYXRhKS50by5lcXVhbCgnV29ybGQgSGVsbG8gMScpXG4gICAgICAgICAgICAgICAgZXhwZWN0KHJlc3AzLmRhdGFbMV0uZGF0YSkudG8uZXF1YWwoJ1dvcmxkIEhlbGxvIDInKVxuICAgICAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ1BPU1Qgc3VidG9waWMvc3VibWl0L1tpZF0gc2hvdWxkIGFkZCBuZXcgYW5kIHVwZGF0ZSBleGlzdGluZyBleGVyY2lzZXMnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgIENvdXJzZVNlcnZpY2UucmVhZCh7IG1vZGVsTmFtZTogJ1N1YnRvcGljJywgc2VhcmNoQ2xhdXNlOiB7IHN1YnRvcGljOiAnTWVuZ2VuYWwgQWxqYWJhcicgfSB9KS50aGVuKHJlc3AgPT4ge1xuICAgICAgY29uc3Qgc3VidG9waWNJZCA9IHJlc3AuZGF0YVswXS5pZFxuICAgICAgLy8gQ3JlYXRlIGFuIGV4ZXJjaXNlIG1hbnVhbGx5XG4gICAgICBDb3Vyc2VTZXJ2aWNlLmNyZWF0ZSh7IG1vZGVsTmFtZTogJ0V4ZXJjaXNlJywgZGF0YTogeyBkYXRhOiAnSGVsbG8gV29ybGQgMScsIHN1YnRvcGljSWQgfSB9KS50aGVuKHJlc3AxID0+IHtcbiAgICAgICAgZXhwZWN0KHJlc3AxLnN0YXR1cykudG8uYmUub2soKVxuICAgICAgICBjb25zdCByZXF1ZXN0Qm9keSA9IHt9XG4gICAgICAgIC8vIENyZWF0ZSBhbiBleGVyY2lzZSBwcm9ncmFtbWF0aWNhbGx5XG4gICAgICAgIHJlcXVlc3RCb2R5WyduZXctZXhlcmNpc2UnXSA9ICdOZXcgRXhlcmNpc2UnXG4gICAgICAgIC8vIFVwZGF0ZSBtYW51YWxseSBjcmVhdGVkIGV4ZXJjaXNlXG4gICAgICAgIHJlcXVlc3RCb2R5W2BleGVyY2lzZS0ke3Jlc3AxLmRhdGEuaWR9YF0gPSAnRXhpc3RpbmcgRXhlcmNpc2UnXG4gICAgICAgIHJlcXVlc3QoYXBwKS5wb3N0KGAvJHtzaXRlLmhhc2h9L3N1YnRvcGljL3N1Ym1pdC8ke3N1YnRvcGljSWR9YClcbiAgICAgICAgICAuc2VuZChyZXF1ZXN0Qm9keSlcbiAgICAgICAgICAuZXhwZWN0KDIwMCwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgIGRvbmUoZXJyKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gVGVzdCB0aGF0IGNyZWF0ZSBhbmQgdXBkYXRlIHdvcmtcbiAgICAgICAgICAgICAgZXhwZWN0KHJlcy5ib2R5LnN0YXR1cykudG8uYmUub2soKVxuICAgICAgICAgICAgICBjb25zdCBuZXdFeGVyY2lzZUlkcyA9IHJlcy5ib2R5LmRhdGEubmV3RXhlcmNpc2VJZHNcbiAgICAgICAgICAgICAgZXhwZWN0KG5ld0V4ZXJjaXNlSWRzKS50by5leGlzdCgpXG4gICAgICAgICAgICAgIGV4cGVjdChPYmplY3Qua2V5cyhuZXdFeGVyY2lzZUlkcykpLnRvLmhhdmUubGVuZ3RoKDEpXG4gICAgICAgICAgICAgIGV4cGVjdChuZXdFeGVyY2lzZUlkc1snbmV3LWV4ZXJjaXNlJ10pLnRvLmV4aXN0KClcbiAgICAgICAgICAgICAgQ291cnNlU2VydmljZS5yZWFkKHsgbW9kZWxOYW1lOiAnRXhlcmNpc2UnLCBzZWFyY2hDbGF1c2U6IHsgc3VidG9waWNJZCB9IH0pLnRoZW4ocmVzcDIgPT4ge1xuICAgICAgICAgICAgICAgIGV4cGVjdChyZXNwMi5zdGF0dXMpLnRvLmJlLnRydWUoKVxuICAgICAgICAgICAgICAgIGV4cGVjdChyZXNwMi5kYXRhKS50by5oYXZlLmxlbmd0aCgyKVxuICAgICAgICAgICAgICAgIGV4cGVjdChyZXNwMi5kYXRhWzBdLmRhdGEpLnRvLmVxdWFsKCdFeGlzdGluZyBFeGVyY2lzZScpXG4gICAgICAgICAgICAgICAgZXhwZWN0KHJlc3AyLmRhdGFbMV0uZGF0YSkudG8uZXF1YWwoJ05ldyBFeGVyY2lzZScpXG4gICAgICAgICAgICAgICAgZXhwZWN0KHJlc3AyLmRhdGFbMV0uaWQpLnRvLmVxdWFsKG5ld0V4ZXJjaXNlSWRzWyduZXctZXhlcmNpc2UnXSlcbiAgICAgICAgICAgICAgICBkb25lKClcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuICB9KVxuXG59KVxuIl19
