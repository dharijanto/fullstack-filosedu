var path=require("path"),_=require("lodash"),chai=require("chai"),expect=chai.expect,log=require("npmlog");log.level="verbose";var Sequelize=require("sequelize"),Promise=require("bluebird"),AppConfig=require(path.join(__dirname,"../../app-config")),createSequelizeModel=require(path.join(__dirname,"../../db-structure")),CourseService=require(path.join(__dirname,"../../services/course-service"));describe("Course Service",function(){var e,t,a={};function o(e){return t.create({modelName:"Subject",data:{id:`${e}`,subject:`Test Subject ${e}`,description:`Test Description ${e}`}})}beforeEach(function(o){this.timeout(1e4),e=new Sequelize(AppConfig.testDbPath,{logging:!1}),a=createSequelizeModel(e,a),e.sync({force:!0}).then(()=>{t=new CourseService(e,a),o()})}),afterEach(function(){e.close().catch(e=>{console.error(e)})}),it("create() should work",function(e){o(1).then(e=>{expect(e.status).to.be.ok,expect(e.data.id).to.exist,expect(e.data.subject).to.equal("Test Subject 1"),expect(e.data.description).to.equal("Test Description 1")}),e()}),it("parallel create() should work",function(e){Promise.join(o(1),o(2),o(3),o(4)).then(t=>{t.forEach((e,t)=>{expect(e.status).to.be.ok,expect(e.data.id).to.exist,expect(e.data.subject).to.equal(`Test Subject ${t+1}`),expect(e.data.description).to.equal(`Test Description ${t+1}`)}),e()})}),it("read() should work",function(e){o(1).then(a=>{const o=[{id:a.data.id},{subject:a.data.subject},{description:a.data.description}];Promise.map(o,e=>t.read({modelName:"Subject",searchClause:e})).then(t=>{expect(t.length).to.equal(o.length),t.forEach(e=>{expect(e.status).to.be.ok,expect(e.data).to.exist,expect(e.data).to.have.length(1);const t=e.data[0];expect(t.id).to.equal(a.data.id),expect(t.subject).to.equal(a.data.subject),expect(t.description).to.equal(a.data.description)}),e()})})}),it("parallel read() should work",function(e){const a=[1,2,3,4];Promise.map(a,e=>o(e)).then(o=>{expect(o).to.have.length(a.length),Promise.map(a,e=>t.read({modelName:"Subject",searchClause:{subject:`Test Subject ${e}`}})).then(t=>{t.forEach((e,t)=>{expect(e.status).to.be.ok,expect(e.data).to.have.length(1),expect(e.data[0].subject).to.equal(`Test Subject ${t+1}`)}),e()})})}),it("update() should work",function(e){o(1).then(a=>{const o=a.data;t.update({modelName:"Subject",data:{id:o.id,subject:"Updated Subject",description:"Updated Description"}}).then(o=>{expect(o.status).to.be.ok,t.read({modelName:"Subject",searchClause:{id:a.data.id}}).then(t=>{expect(t.status).to.be.ok,expect(t.data[0].subject).to.equal("Updated Subject"),expect(t.data[0].description).to.equal("Updated Description"),e()})})})}),it("parallel update() should work",function(e){const a=[1,2,3,4];Promise.map(a,e=>o(e)).then(o=>{expect(o).to.have.length(a.length),Promise.map(a,e=>(function(e){return t.update({modelName:"Subject",data:{id:`${e}`,subject:`Updated Subject ${e}`,description:`Updated Description ${e}`}})})(e)).then(o=>{expect(o).to.have.length(a.length),a.map(e=>{t.read({modelName:"Subject",searchClause:{id:e}}).then(t=>{expect(t.status).to.be.ok,expect(t.data[0].subject).to.equal(`Updated Subject ${e}`),expect(t.data[0].description).to.equal(`Updated Description ${e}`)})}),e()})})}),it("delete() should work",function(e){o(1).then(a=>{const o=a.data;t.delete({modelName:"Subject",data:{id:o.id}}).then(a=>{expect(a.status).to.be.ok,t.read({modelName:"Subject",searchClause:{id:1}}).then(t=>{expect(t.status).to.be.false,e()})})})}),it("parallel delete() should work",function(e){const a=[1,2,3,4];Promise.map(a,e=>o(e)).then(o=>{expect(o).to.have.length(a.length),Promise.map(a,e=>t.delete({modelName:"Subject",data:{id:e}})).then(o=>{o.forEach(e=>{expect(e.status).to.be.ok}),a.map(e=>{t.read({modelName:"Subject",searchClause:{id:e}}).then(e=>{expect(e.status).to.be.false})}),e()})})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
