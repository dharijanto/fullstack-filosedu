"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),course_service_1=require("../../services/course-service"),exercise_helper_1=require("../utils/exercise-helper"),topic_exercise_service_1=require("../../services/topic-exercise-service");let path=require("path"),log=require("npmlog"),pug=require("pug"),BaseController=require(path.join(__dirname,"base-controller")),PathFormatter=require(path.join(__dirname,"../../lib/path-formatter")),PassportHelper=require(path.join(__dirname,"../utils/passport-helper")),Utils=require(path.join(__dirname,"../../lib/utils"));const TAG="CourseController";class CourseController extends BaseController{constructor(e){super(e),this.addInterceptor((e,t,r)=>{log.verbose(TAG,"req.path="+e.path),r()}),this.routeGet("/",(e,t,r)=>{course_service_1.default.getTopicDetails(e.user?e.user.id:null).then(e=>{e.status&&e.data?(t.locals.topics=e.data.topics,t.render("topics")):r(e.errMessage)}).catch(e=>{r(e)})}),this.routeGet("/topics/:topicId/:topicSlug/review",PassportHelper.ensureLoggedIn(),(e,t,r)=>{let s=e.params.topicId,i=e.user.id;topic_exercise_service_1.default.getFormattedExercise(s,i).then(e=>{e.status&&e.data?(console.dir("Elapsed time="+e.data.elapsedTime),t.locals.idealTime=e.data.idealTime,t.locals.elapsedTime=e.data.elapsedTime,t.locals.topicName=e.data.topicName,t.locals.bundle=this.topicExerciseFrontendJS,t.locals.formattedExercises=e.data.formattedExercises,t.render("topic-exercise")):r(e.errMessage)}).catch(e=>{r(e)})}),this.routeGet("/topics/:topicId/getLeaderboard",(e,t,r)=>{let s=e.params.topicId;void 0===s?t.json({status:!1,errMessage:"topicId is needed"}):e.isAuthenticated?topic_exercise_service_1.default.getRenderedLeaderboard(s).then(e=>{t.json(e)}).catch(e=>{r(e)}):t.json({status:!1,errMessage:"Unauthorized"})}),this.routePost("/topics/:topicId/:topicSlug/review",(e,t,r)=>{let s=e.body.userAnswers,i=e.params.topicId,a=e.user.id;return log.verbose(TAG,`submitAnswer.POST(): userId=${a} topicId=${i} userAnswers=${s}`),topic_exercise_service_1.default.getGeneratedTopicExercise(a,i).then(e=>{if(e.status&&e.data){const r=e.data,o=e.data.id;let c=JSON.parse(e.data.exerciseDetail);return topic_exercise_service_1.default.gradeExercise(c,s).then(e=>{if(e.status&&e.data){const d=e.data,n=exercise_helper_1.default.countTimeFinish(r.createdAt);return topic_exercise_service_1.default.finishExercise(o,d.score,n,c,s).then(e=>{if(!e.status)return t.json({status:!1,errMessage:e.errMessage});Promise.join(topic_exercise_service_1.default.getStarBadges(a,i),topic_exercise_service_1.default.getCurrentRanking(n,i),topic_exercise_service_1.default.getTotalRanking(i),topic_exercise_service_1.default.getRenderedLeaderboard(i),topic_exercise_service_1.default.getTimerBadges(a,i)).spread((e,r,s,i,a)=>{t.json({status:!0,data:{grade:d,starsHTML:e.data,timersHTML:a.data,ranking:i.data,timeFinish:n,currentRanking:r.data.count,totalRanking:s.data.count}})})})}return t.json({status:!1,errMessage:e.errMessage})})}throw new Error(e.errMessage)})})}initialize(){return new Promise((e,t)=>{PathFormatter.hashAsset("app","/assets/js/topic-exercise-app-bundle.js").then(t=>{this.topicExerciseFrontendJS=t,e()}).catch(e=>{t(e)})})}}module.exports=CourseController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
