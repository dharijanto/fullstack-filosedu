"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),course_service_1=require("../../services/course-service"),exercise_helper_1=require("../utils/exercise-helper"),topic_exercise_service_1=require("../../services/topic-exercise-service");let path=require("path"),log=require("npmlog"),pug=require("pug"),BaseController=require(path.join(__dirname,"base-controller")),PathFormatter=require(path.join(__dirname,"../../lib/path-formatter")),PassportHelper=require(path.join(__dirname,"../utils/passport-helper")),Utils=require(path.join(__dirname,"../../lib/utils"));const TAG="CourseController";class CourseController extends BaseController{constructor(e){super(e),this.addInterceptor((e,t,r)=>{r()}),this.routeGet("/",(e,t,r)=>{course_service_1.default.getTopicDetails(e.user?e.user.id:null).then(e=>{e.status&&e.data?(t.locals.topics=e.data.topics,t.render("topics")):r(e.errMessage)}).catch(e=>{r(e)})}),this.routeGet("/topics/:topicId/:topicSlug/review",PassportHelper.ensureLoggedIn(),(e,t,r)=>{let s=e.params.topicId,i=e.user.id;topic_exercise_service_1.default.getFormattedExercise(s,i).then(e=>{e.status&&e.data?(t.locals.idealTime=e.data.idealTime,t.locals.elapsedTime=e.data.elapsedTime,t.locals.topicName=e.data.topicName,t.locals.bundle=this.topicExerciseFrontendJS,t.locals.formattedExercises=e.data.formattedExercises,t.render("topic-exercise")):r(e.errMessage)}).catch(e=>{r(e)})}),this.routeGet("/topics/:topicId/getLeaderboard",(e,t,r)=>{let s=e.params.topicId;void 0===s?t.json({status:!1,errMessage:"topicId is needed"}):e.isAuthenticated?topic_exercise_service_1.default.getRenderedLeaderboard(s).then(e=>{t.json(e)}).catch(e=>{r(e)}):t.json({status:!1,errMessage:"Unauthorized"})}),this.routePost("/topics/:topicId/:topicSlug/review",(e,t,r)=>{let s=e.body.userAnswers,i=e.params.topicId,a=e.user.id;return log.verbose(TAG,`submitAnswer.POST(): userId=${a} topicId=${i} userAnswers=${s}`),topic_exercise_service_1.default.getGeneratedTopicExercise(a,i).then(e=>{if(e.status&&e.data){const r=e.data,o=e.data.id;let c=JSON.parse(e.data.exerciseDetail);return topic_exercise_service_1.default.gradeExercise(c,s).then(e=>{if(e.status&&e.data){const d=e.data,n=exercise_helper_1.default.countTimeFinish(r.createdAt);return topic_exercise_service_1.default.finishExercise(o,d.score,n,c,s).then(e=>{if(!e.status)return t.json({status:!1,errMessage:e.errMessage});Promise.join(topic_exercise_service_1.default.getStarBadges(a,i),topic_exercise_service_1.default.getCurrentRanking(n,i),topic_exercise_service_1.default.getTotalRanking(i),topic_exercise_service_1.default.getRenderedLeaderboard(i),topic_exercise_service_1.default.getTimerBadges(a,i)).spread((e,r,s,i,a)=>{t.json({status:!0,data:{grade:d,starsHTML:e.data,timersHTML:a.data,ranking:i.data,timeFinish:n,currentRanking:r.data.count,totalRanking:s.data.count}})})})}return t.json({status:!1,errMessage:e.errMessage})})}throw new Error(e.errMessage)})})}initialize(){return new Promise((e,t)=>{PathFormatter.hashAsset("app","/assets/js/topic-exercise-app-bundle.js").then(t=>{this.topicExerciseFrontendJS=t,e()}).catch(e=>{t(e)})})}}module.exports=CourseController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAvY29udHJvbGxlcnMvY291cnNlLWNvbnRyb2xsZXIudHMiXSwibmFtZXMiOlsiUHJvbWlzZSIsInJlcXVpcmUiLCJjb3Vyc2Vfc2VydmljZV8xIiwiZXhlcmNpc2VfaGVscGVyXzEiLCJ0b3BpY19leGVyY2lzZV9zZXJ2aWNlXzEiLCJwYXRoIiwibG9nIiwicHVnIiwiQmFzZUNvbnRyb2xsZXIiLCJqb2luIiwiX19kaXJuYW1lIiwiUGF0aEZvcm1hdHRlciIsIlBhc3Nwb3J0SGVscGVyIiwiVXRpbHMiLCJUQUciLCJDb3Vyc2VDb250cm9sbGVyIiwiW29iamVjdCBPYmplY3RdIiwiaW5pdERhdGEiLCJzdXBlciIsInRoaXMiLCJhZGRJbnRlcmNlcHRvciIsInJlcSIsInJlcyIsIm5leHQiLCJyb3V0ZUdldCIsImRlZmF1bHQiLCJnZXRUb3BpY0RldGFpbHMiLCJ1c2VyIiwiaWQiLCJ0aGVuIiwicmVzcCIsInN0YXR1cyIsImRhdGEiLCJsb2NhbHMiLCJ0b3BpY3MiLCJyZW5kZXIiLCJlcnJNZXNzYWdlIiwiY2F0Y2giLCJlcnIiLCJlbnN1cmVMb2dnZWRJbiIsInRvcGljSWQiLCJwYXJhbXMiLCJ1c2VySWQiLCJnZXRGb3JtYXR0ZWRFeGVyY2lzZSIsImlkZWFsVGltZSIsImVsYXBzZWRUaW1lIiwidG9waWNOYW1lIiwiYnVuZGxlIiwidG9waWNFeGVyY2lzZUZyb250ZW5kSlMiLCJmb3JtYXR0ZWRFeGVyY2lzZXMiLCJ1bmRlZmluZWQiLCJqc29uIiwiaXNBdXRoZW50aWNhdGVkIiwiZ2V0UmVuZGVyZWRMZWFkZXJib2FyZCIsInJvdXRlUG9zdCIsInVzZXJBbnN3ZXJzIiwiYm9keSIsInZlcmJvc2UiLCJnZXRHZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlIiwiZ2VuZXJhdGVkVG9waWNFeGVyY2lzZSIsImdlbmVyYXRlZFRvcGljRXhlcmNpc2VJZCIsImV4ZXJjaXNlRGV0YWlscyIsIkpTT04iLCJwYXJzZSIsImV4ZXJjaXNlRGV0YWlsIiwiZ3JhZGVFeGVyY2lzZSIsInJlc3AyIiwiZ3JhZGUiLCJ0aW1lRmluaXNoIiwiY291bnRUaW1lRmluaXNoIiwiY3JlYXRlZEF0IiwiZmluaXNoRXhlcmNpc2UiLCJzY29yZSIsInJlc3AzIiwiZ2V0U3RhckJhZGdlcyIsImdldEN1cnJlbnRSYW5raW5nIiwiZ2V0VG90YWxSYW5raW5nIiwiZ2V0VGltZXJCYWRnZXMiLCJzcHJlYWQiLCJyZXNwMTEiLCJyZXNwMTIiLCJyZXNwMTMiLCJyZXNwMTQiLCJyZXNwMTUiLCJzdGFyc0hUTUwiLCJ0aW1lcnNIVE1MIiwicmFua2luZyIsImN1cnJlbnRSYW5raW5nIiwiY291bnQiLCJ0b3RhbFJhbmtpbmciLCJFcnJvciIsInJlc29sdmUiLCJyZWplY3QiLCJoYXNoQXNzZXQiLCJyZXN1bHQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoib0VBQUEsTUFBQUEsUUFBQUMsUUFBQSxZQUVBQyxpQkFBQUQsUUFBQSxpQ0FDQUUsa0JBQUFGLFFBQUEsNEJBQ0FHLHlCQUFBSCxRQUFBLHlDQUVBLElBQUlJLEtBQU9KLFFBQVEsUUFFZkssSUFBTUwsUUFBUSxVQUNkTSxJQUFNTixRQUFRLE9BRWRPLGVBQWlCUCxRQUFRSSxLQUFLSSxLQUFLQyxVQUFXLG9CQUM5Q0MsY0FBZ0JWLFFBQVFJLEtBQUtJLEtBQUtDLFVBQVcsNkJBQzdDRSxlQUFpQlgsUUFBUUksS0FBS0ksS0FBS0MsVUFBVyw2QkFDOUNHLE1BQVFaLFFBQVFJLEtBQUtJLEtBQUtDLFVBQVcsb0JBRXpDLE1BQU1JLElBQU0seUJBRVpDLHlCQUErQlAsZUFNN0JRLFlBQWFDLEdBQ1hDLE1BQU1ELEdBRU5FLEtBQUtDLGVBQWUsQ0FBQ0MsRUFBS0MsRUFBS0MsS0FDN0JBLE1BSUZKLEtBQUtLLFNBQVMsSUFBSyxDQUFDSCxFQUFLQyxFQUFLQyxLQUM1QnJCLGlCQUFBdUIsUUFBY0MsZ0JBQWdCTCxFQUFJTSxLQUFPTixFQUFJTSxLQUFLQyxHQUFLLE1BQU1DLEtBQUtDLElBQzVEQSxFQUFLQyxRQUFVRCxFQUFLRSxNQUN0QlYsRUFBSVcsT0FBT0MsT0FBU0osRUFBS0UsS0FBS0UsT0FFOUJaLEVBQUlhLE9BQU8sV0FFWFosRUFBS08sRUFBS00sY0FFWEMsTUFBTUMsSUFDUGYsRUFBS2UsT0FLVG5CLEtBQUtLLFNBQVMscUNBQXNDWixlQUFlMkIsaUJBQWtCLENBQUNsQixFQUFLQyxFQUFLQyxLQUM5RixJQUFJaUIsRUFBVW5CLEVBQUlvQixPQUFPRCxRQUNyQkUsRUFBU3JCLEVBQUlNLEtBQUtDLEdBQ3RCeEIseUJBQUFxQixRQUFxQmtCLHFCQUFxQkgsRUFBU0UsR0FBUWIsS0FBS0MsSUFDMURBLEVBQUtDLFFBQVVELEVBQUtFLE1BQ3RCVixFQUFJVyxPQUFPVyxVQUFZZCxFQUFLRSxLQUFLWSxVQUNqQ3RCLEVBQUlXLE9BQU9ZLFlBQWNmLEVBQUtFLEtBQUthLFlBQ25DdkIsRUFBSVcsT0FBT2EsVUFBWWhCLEVBQUtFLEtBQUtjLFVBQ2pDeEIsRUFBSVcsT0FBT2MsT0FBUzVCLEtBQUs2Qix3QkFDekIxQixFQUFJVyxPQUFPZ0IsbUJBQXFCbkIsRUFBS0UsS0FBS2lCLG1CQUMxQzNCLEVBQUlhLE9BQU8sbUJBRVhaLEVBQUtPLEVBQUtNLGNBRVhDLE1BQU1DLElBQ1BmLEVBQUtlLE9BS1RuQixLQUFLSyxTQUFTLGtDQUFtQyxDQUFDSCxFQUFLQyxFQUFLQyxLQUMxRCxJQUFJaUIsRUFBVW5CLEVBQUlvQixPQUFPRCxhQUNUVSxJQUFaVixFQUNGbEIsRUFBSTZCLE1BQU9wQixRQUFRLEVBQU9LLFdBQVksc0JBQzVCZixFQUFJK0IsZ0JBR2RoRCx5QkFBQXFCLFFBQXFCNEIsdUJBQXVCYixHQUFTWCxLQUFLQyxJQUN4RFIsRUFBSTZCLEtBQUtyQixLQUNSTyxNQUFNQyxJQUNQZixFQUFLZSxLQUxQaEIsRUFBSTZCLE1BQU9wQixRQUFRLEVBQU9LLFdBQVksbUJBYTFDakIsS0FBS21DLFVBQVUscUNBQXNDLENBQUNqQyxFQUFLQyxFQUFLQyxLQUU5RCxJQUFJZ0MsRUFBY2xDLEVBQUltQyxLQUFLRCxZQUN2QmYsRUFBVW5CLEVBQUlvQixPQUFPRCxRQUNyQkUsRUFBU3JCLEVBQUlNLEtBQUtDLEdBRXRCLE9BREF0QixJQUFJbUQsUUFBUTNDLG1DQUFvQzRCLGFBQWtCRixpQkFBdUJlLEtBQ2xGbkQseUJBQUFxQixRQUFxQmlDLDBCQUEwQmhCLEVBQVFGLEdBQVNYLEtBQUtDLElBQzFFLEdBQUlBLEVBQUtDLFFBQVVELEVBQUtFLEtBQU0sQ0FDNUIsTUFBTTJCLEVBQXlCN0IsRUFBS0UsS0FDOUI0QixFQUEyQjlCLEVBQUtFLEtBQUtKLEdBQzNDLElBQUlpQyxFQUFrREMsS0FBS0MsTUFBTWpDLEVBQUtFLEtBQUtnQyxnQkFDM0UsT0FBTzVELHlCQUFBcUIsUUFBcUJ3QyxjQUFjSixFQUFpQk4sR0FBYTFCLEtBQUtxQyxJQUUzRSxHQUFJQSxFQUFNbkMsUUFBVW1DLEVBQU1sQyxLQUFNLENBQzlCLE1BQU1tQyxFQUFRRCxFQUFNbEMsS0FDZG9DLEVBQWFqRSxrQkFBQXNCLFFBQWU0QyxnQkFBZ0JWLEVBQXVCVyxXQUN6RSxPQUFPbEUseUJBQUFxQixRQUFxQjhDLGVBQzFCWCxFQUEwQk8sRUFBTUssTUFDaENKLEVBQVlQLEVBQWlCTixHQUM3QjFCLEtBQUs0QyxJQUNMLElBQUlBLEVBQU0xQyxPQTBCUixPQUFPVCxFQUFJNkIsTUFDVHBCLFFBQVEsRUFDUkssV0FBWXFDLEVBQU1yQyxhQTNCcEJwQyxRQUFRUyxLQUNOTCx5QkFBQXFCLFFBQXFCaUQsY0FBY2hDLEVBQVFGLEdBQzNDcEMseUJBQUFxQixRQUFxQmtELGtCQUFrQlAsRUFBWTVCLEdBQ25EcEMseUJBQUFxQixRQUFxQm1ELGdCQUFnQnBDLEdBQ3JDcEMseUJBQUFxQixRQUFxQjRCLHVCQUF1QmIsR0FDNUNwQyx5QkFBQXFCLFFBQXFCb0QsZUFBZW5DLEVBQVFGLElBQzVDc0MsT0FBTyxDQUNQQyxFQUF5QkMsRUFDekJDLEVBQXlCQyxFQUN6QkMsS0FFQTdELEVBQUk2QixNQUNGcEIsUUFBUSxFQUNSQyxNQUNFbUMsTUFBQUEsRUFDQWlCLFVBQVdMLEVBQU8vQyxLQUNsQnFELFdBQVlGLEVBQU9uRCxLQUNuQnNELFFBQVNKLEVBQU9sRCxLQUNoQm9DLFdBQUFBLEVBQ0FtQixlQUFnQlAsRUFBT2hELEtBQUt3RCxNQUM1QkMsYUFBY1IsRUFBT2pELEtBQUt3RCxhQVlwQyxPQUFPbEUsRUFBSTZCLE1BQ1RwQixRQUFRLEVBQ1JLLFdBQVk4QixFQUFNOUIsZUFLeEIsTUFBTSxJQUFLc0QsTUFBTTVELEVBQUtNLGdCQU05QnBCLGFBQ0UsT0FBTyxJQUFJaEIsUUFBUSxDQUFDMkYsRUFBU0MsS0FDM0JqRixjQUFja0YsVUFBVSxNQUFPLDJDQUEyQ2hFLEtBQUtpRSxJQUM3RTNFLEtBQUs2Qix3QkFBMEI4QyxFQUMvQkgsTUFDQ3RELE1BQU1DLElBQ1BzRCxFQUFPdEQsUUFNZnlELE9BQU9DLFFBQVVqRiIsImZpbGUiOiJhcHAvY29udHJvbGxlcnMvY291cnNlLWNvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gJ2JsdWViaXJkJ1xuXG5pbXBvcnQgQ291cnNlU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jb3Vyc2Utc2VydmljZSdcbmltcG9ydCBFeGVyY2lzZUhlbHBlciBmcm9tICcuLi91dGlscy9leGVyY2lzZS1oZWxwZXInXG5pbXBvcnQgVG9waWNFeGVyY2lzZVNlcnZpY2UsIHsgR2VuZXJhdGVkVG9waWNFeGVyY2lzZURldGFpbCB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3RvcGljLWV4ZXJjaXNlLXNlcnZpY2UnXG5cbmxldCBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG5cbmxldCBsb2cgPSByZXF1aXJlKCducG1sb2cnKVxubGV0IHB1ZyA9IHJlcXVpcmUoJ3B1ZycpXG5cbmxldCBCYXNlQ29udHJvbGxlciA9IHJlcXVpcmUocGF0aC5qb2luKF9fZGlybmFtZSwgJ2Jhc2UtY29udHJvbGxlcicpKVxubGV0IFBhdGhGb3JtYXR0ZXIgPSByZXF1aXJlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi9saWIvcGF0aC1mb3JtYXR0ZXInKSlcbmxldCBQYXNzcG9ydEhlbHBlciA9IHJlcXVpcmUocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL3V0aWxzL3Bhc3Nwb3J0LWhlbHBlcicpKVxubGV0IFV0aWxzID0gcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vbGliL3V0aWxzJykpXG5cbmNvbnN0IFRBRyA9ICdDb3Vyc2VDb250cm9sbGVyJ1xuXG5jbGFzcyBDb3Vyc2VDb250cm9sbGVyIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXIge1xuICAvLyBTaW5jZSB3ZSdyZSBjYWNoaW5nIHN0YXRpYyBmaWxlcywgd2UgbmVlZCB0byBoYXNoXG4gIC8vIGJ1bmRsZWQgSlMgc28gdGhhdCB0aGV5J3JlIHJlbmV3ZWRcbiAgLy8gVE9ETzogQmV0dGVyIGFwcHJvYWNoIGlzIHRvIGNyZWF0ZSBwdWcgdXRsaXR5IGZ1bmN0aW9uXG4gIC8vICAgICAgIHRoYXQgZG9lcyB0aGUgY2FjaGluZyB0aGVyZS5cbiAgcHJpdmF0ZSB0b3BpY0V4ZXJjaXNlRnJvbnRlbmRKUzogc3RyaW5nXG4gIGNvbnN0cnVjdG9yIChpbml0RGF0YSkge1xuICAgIHN1cGVyKGluaXREYXRhKVxuXG4gICAgdGhpcy5hZGRJbnRlcmNlcHRvcigocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAgIG5leHQoKVxuICAgIH0pXG5cbiAgICAvLyBMYW5kaW5nIHBhZ2VcbiAgICB0aGlzLnJvdXRlR2V0KCcvJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICBDb3Vyc2VTZXJ2aWNlLmdldFRvcGljRGV0YWlscyhyZXEudXNlciA/IHJlcS51c2VyLmlkIDogbnVsbCkudGhlbihyZXNwID0+IHtcbiAgICAgICAgaWYgKHJlc3Auc3RhdHVzICYmIHJlc3AuZGF0YSkge1xuICAgICAgICAgIHJlcy5sb2NhbHMudG9waWNzID0gcmVzcC5kYXRhLnRvcGljc1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHJlc3AuZGF0YSwgbnVsbCwgMikpXG4gICAgICAgICAgcmVzLnJlbmRlcigndG9waWNzJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0KHJlc3AuZXJyTWVzc2FnZSlcbiAgICAgICAgfVxuICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgbmV4dChlcnIpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICAvLyBUb3BpYyBFeGVyY2lzZVxuICAgIHRoaXMucm91dGVHZXQoJy90b3BpY3MvOnRvcGljSWQvOnRvcGljU2x1Zy9yZXZpZXcnLCBQYXNzcG9ydEhlbHBlci5lbnN1cmVMb2dnZWRJbigpLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAgIGxldCB0b3BpY0lkID0gcmVxLnBhcmFtcy50b3BpY0lkXG4gICAgICBsZXQgdXNlcklkID0gcmVxLnVzZXIuaWRcbiAgICAgIFRvcGljRXhlcmNpc2VTZXJ2aWNlLmdldEZvcm1hdHRlZEV4ZXJjaXNlKHRvcGljSWQsIHVzZXJJZCkudGhlbihyZXNwID0+IHtcbiAgICAgICAgaWYgKHJlc3Auc3RhdHVzICYmIHJlc3AuZGF0YSkge1xuICAgICAgICAgIHJlcy5sb2NhbHMuaWRlYWxUaW1lID0gcmVzcC5kYXRhLmlkZWFsVGltZVxuICAgICAgICAgIHJlcy5sb2NhbHMuZWxhcHNlZFRpbWUgPSByZXNwLmRhdGEuZWxhcHNlZFRpbWVcbiAgICAgICAgICByZXMubG9jYWxzLnRvcGljTmFtZSA9IHJlc3AuZGF0YS50b3BpY05hbWVcbiAgICAgICAgICByZXMubG9jYWxzLmJ1bmRsZSA9IHRoaXMudG9waWNFeGVyY2lzZUZyb250ZW5kSlNcbiAgICAgICAgICByZXMubG9jYWxzLmZvcm1hdHRlZEV4ZXJjaXNlcyA9IHJlc3AuZGF0YS5mb3JtYXR0ZWRFeGVyY2lzZXNcbiAgICAgICAgICByZXMucmVuZGVyKCd0b3BpYy1leGVyY2lzZScpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dChyZXNwLmVyck1lc3NhZ2UpXG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIG5leHQoZXJyKVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgLy8gVG9waWNFeGVyY2lzZSBsZWFkZXJib2FyZFxuICAgIHRoaXMucm91dGVHZXQoJy90b3BpY3MvOnRvcGljSWQvZ2V0TGVhZGVyYm9hcmQnLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAgIGxldCB0b3BpY0lkID0gcmVxLnBhcmFtcy50b3BpY0lkXG4gICAgICBpZiAodG9waWNJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlcy5qc29uKHsgc3RhdHVzOiBmYWxzZSwgZXJyTWVzc2FnZTogYHRvcGljSWQgaXMgbmVlZGVkYCB9KVxuICAgICAgfSBlbHNlIGlmICghcmVxLmlzQXV0aGVudGljYXRlZCkge1xuICAgICAgICByZXMuanNvbih7IHN0YXR1czogZmFsc2UsIGVyck1lc3NhZ2U6IGBVbmF1dGhvcml6ZWRgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBUb3BpY0V4ZXJjaXNlU2VydmljZS5nZXRSZW5kZXJlZExlYWRlcmJvYXJkKHRvcGljSWQpLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgICAgcmVzLmpzb24ocmVzcClcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICBuZXh0KGVycilcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8gVG9waWNFeGVyY2lzZSBzdWJtaXNzaW9uXG4gICAgLy8gVE9ETzogUGVyaGFwcyB3ZSBzaG91bGQgY2FsbCBnZXRHZW5lcmF0ZWRUb3BpY0V4ZXJjaXNlIGFuZCBncmFkZUV4ZXJjaXNlIGluc2lkZSBvZiBmaW5pc2hFeGVyY2lzZSB0byBtYWtlXG4gICAgLy8gICAgICAgdGhlIGNvZGUgY2xlYW5lcj9cbiAgICB0aGlzLnJvdXRlUG9zdCgnL3RvcGljcy86dG9waWNJZC86dG9waWNTbHVnL3JldmlldycsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgLy8gW3tcInhcIjpcIjVcIixcInlcIjpcIjFcIn0se1wieFwiOlwiMlwiLFwieVwiOlwiM1wifSx7XCJ4XCI6XCJcIn0se1wieFwiOlwiXCJ9LHtcInhcIjpcIlwifSx7XCJ4XCI6XCJcIn0se1wieFwiOlwiXCJ9LHtcInhcIjpcIlwifSx7XCJ4XCI6XCJcIn0se1wieFwiOlwiXCJ9LHtcInhcIjpcIlwifSx7XCJ4XCI6XCJcIn1dXG4gICAgICBsZXQgdXNlckFuc3dlcnMgPSByZXEuYm9keS51c2VyQW5zd2Vyc1xuICAgICAgbGV0IHRvcGljSWQgPSByZXEucGFyYW1zLnRvcGljSWRcbiAgICAgIGxldCB1c2VySWQgPSByZXEudXNlci5pZFxuICAgICAgbG9nLnZlcmJvc2UoVEFHLCBgc3VibWl0QW5zd2VyLlBPU1QoKTogdXNlcklkPSR7dXNlcklkfSB0b3BpY0lkPSR7dG9waWNJZH0gdXNlckFuc3dlcnM9JHt1c2VyQW5zd2Vyc31gKVxuICAgICAgcmV0dXJuIFRvcGljRXhlcmNpc2VTZXJ2aWNlLmdldEdlbmVyYXRlZFRvcGljRXhlcmNpc2UodXNlcklkLCB0b3BpY0lkKS50aGVuKHJlc3AgPT4ge1xuICAgICAgICBpZiAocmVzcC5zdGF0dXMgJiYgcmVzcC5kYXRhKSB7XG4gICAgICAgICAgY29uc3QgZ2VuZXJhdGVkVG9waWNFeGVyY2lzZSA9IHJlc3AuZGF0YVxuICAgICAgICAgIGNvbnN0IGdlbmVyYXRlZFRvcGljRXhlcmNpc2VJZCA9IHJlc3AuZGF0YS5pZFxuICAgICAgICAgIGxldCBleGVyY2lzZURldGFpbHM6IEdlbmVyYXRlZFRvcGljRXhlcmNpc2VEZXRhaWxbXSA9IEpTT04ucGFyc2UocmVzcC5kYXRhLmV4ZXJjaXNlRGV0YWlsKVxuICAgICAgICAgIHJldHVybiBUb3BpY0V4ZXJjaXNlU2VydmljZS5ncmFkZUV4ZXJjaXNlKGV4ZXJjaXNlRGV0YWlscywgdXNlckFuc3dlcnMpLnRoZW4ocmVzcDIgPT4ge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocmVzcDIsIG51bGwsIDIpKVxuICAgICAgICAgICAgaWYgKHJlc3AyLnN0YXR1cyAmJiByZXNwMi5kYXRhKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGdyYWRlID0gcmVzcDIuZGF0YVxuICAgICAgICAgICAgICBjb25zdCB0aW1lRmluaXNoID0gRXhlcmNpc2VIZWxwZXIuY291bnRUaW1lRmluaXNoKGdlbmVyYXRlZFRvcGljRXhlcmNpc2UuY3JlYXRlZEF0KVxuICAgICAgICAgICAgICByZXR1cm4gVG9waWNFeGVyY2lzZVNlcnZpY2UuZmluaXNoRXhlcmNpc2UoXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVkVG9waWNFeGVyY2lzZUlkLCBncmFkZS5zY29yZSxcbiAgICAgICAgICAgICAgICB0aW1lRmluaXNoLCBleGVyY2lzZURldGFpbHMsIHVzZXJBbnN3ZXJzXG4gICAgICAgICAgICAgICkudGhlbihyZXNwMyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3AzLnN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgUHJvbWlzZS5qb2luKFxuICAgICAgICAgICAgICAgICAgICBUb3BpY0V4ZXJjaXNlU2VydmljZS5nZXRTdGFyQmFkZ2VzKHVzZXJJZCwgdG9waWNJZCksXG4gICAgICAgICAgICAgICAgICAgIFRvcGljRXhlcmNpc2VTZXJ2aWNlLmdldEN1cnJlbnRSYW5raW5nKHRpbWVGaW5pc2gsIHRvcGljSWQpLFxuICAgICAgICAgICAgICAgICAgICBUb3BpY0V4ZXJjaXNlU2VydmljZS5nZXRUb3RhbFJhbmtpbmcodG9waWNJZCksXG4gICAgICAgICAgICAgICAgICAgIFRvcGljRXhlcmNpc2VTZXJ2aWNlLmdldFJlbmRlcmVkTGVhZGVyYm9hcmQodG9waWNJZCksXG4gICAgICAgICAgICAgICAgICAgIFRvcGljRXhlcmNpc2VTZXJ2aWNlLmdldFRpbWVyQmFkZ2VzKHVzZXJJZCwgdG9waWNJZClcbiAgICAgICAgICAgICAgICAgICkuc3ByZWFkKChcbiAgICAgICAgICAgICAgICAgICAgcmVzcDExOiBOQ1Jlc3BvbnNlPGFueT4sIHJlc3AxMjogTkNSZXNwb25zZTxhbnk+LFxuICAgICAgICAgICAgICAgICAgICByZXNwMTM6IE5DUmVzcG9uc2U8YW55PiwgcmVzcDE0OiBOQ1Jlc3BvbnNlPGFueT4sXG4gICAgICAgICAgICAgICAgICAgIHJlc3AxNTogTkNSZXNwb25zZTxhbnk+XG4gICAgICAgICAgICAgICAgICApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLmpzb24oe1xuICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncmFkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJzSFRNTDogcmVzcDExLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lcnNIVE1MOiByZXNwMTUuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmtpbmc6IHJlc3AxNC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZUZpbmlzaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSYW5raW5nOiByZXNwMTIuZGF0YS5jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsUmFua2luZzogcmVzcDEzLmRhdGEuY291bnRcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oe1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBlcnJNZXNzYWdlOiByZXNwMy5lcnJNZXNzYWdlXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXMuanNvbih7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJNZXNzYWdlOiByZXNwMi5lcnJNZXNzYWdlXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyAobmV3IEVycm9yKHJlc3AuZXJyTWVzc2FnZSkpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGluaXRpYWxpemUgKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBQYXRoRm9ybWF0dGVyLmhhc2hBc3NldCgnYXBwJywgJy9hc3NldHMvanMvdG9waWMtZXhlcmNpc2UtYXBwLWJ1bmRsZS5qcycpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgdGhpcy50b3BpY0V4ZXJjaXNlRnJvbnRlbmRKUyA9IHJlc3VsdFxuICAgICAgICByZXNvbHZlKClcbiAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIHJlamVjdChlcnIpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb3Vyc2VDb250cm9sbGVyXG4iXX0=
