"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),course_service_1=require("../../services/course-service"),exercise_service_1=require("../../services/exercise-service"),exercise_generator_1=require("../../lib/exercise_generator/exercise-generator"),exercise_helper_1=require("../utils/exercise-helper");let path=require("path"),moment=require("moment-timezone"),log=require("npmlog"),AnalyticsService=require(path.join(__dirname,"../../services/analytics-service")),BaseController=require(path.join(__dirname,"base-controller")),PassportHelper=require(path.join(__dirname,"../utils/passport-helper")),PathFormatter=require(path.join(__dirname,"../../lib/path-formatter")),Formatter=require(path.join(__dirname,"../../lib/utils/formatter")),Utils=require(path.join(__dirname,"../utils/utils"));const TAG="ExerciseController";class ExerciseController extends BaseController{initialize(){return new Promise((e,s)=>{PathFormatter.hashAsset("app","/assets/js/exercise-app-bundle.js").then(s=>{this.exerciseFrontendJS=s,e()}).catch(e=>{s(e)})})}constructor(e){super(e);const s=new AnalyticsService(this.getDb().sequelize,this.getDb().models);this.addInterceptor((e,s,r)=>{r()}),this.routeGet("/:topicId/:topicSlug/:subtopicId/:subtopicSlug/:exerciseId/:exerciseSlug",PassportHelper.ensureLoggedIn(),(e,s,r)=>{const t=e.user.id,i=e.params.exerciseId,a=e.params.subtopicId;Promise.join(exercise_service_1.default.getFormattedExercise(i,t),exercise_service_1.default.getRenderedExerciseStars(t,i),exercise_service_1.default.getRenderedExerciseTimers(t,i),course_service_1.default.getPreviousAndNextExercise(a,i),course_service_1.default.getPreviousAndNextSubtopic(a),course_service_1.default.getSubtopic(a)).spread((e,t,i,a,o,n)=>{if(e.status&&e.data&&a.status&&a.data&&o.status&&o.data&&n.status&&n.data){const r=a.data,c=o.data;s.locals.formattedExercise=e.data.formattedExercise,s.locals.elapsedTime=e.data.elapsedTime,s.locals.idealTime=e.data.idealTime,s.locals.exerciseId=e.data.exerciseId,s.locals.prevLink=r&&r.prev?Formatter.getExerciseURL(r.prev):c&&c.prev?Formatter.getSubtopicURL(c.prev):null,s.locals.nextLink=r&&r.next?Formatter.getExerciseURL(r.next):c&&c.next?Formatter.getSubtopicURL(c.next):null,s.locals.starsHTML=t.status?t.data:'<p style="color:red;"> Unable to retrieve stars... </p>',s.locals.timersHTML=i.status?i.data:'<p style="color:red;"> Unable to retrieve timers... </p>',s.locals.subtopic=n.data,s.locals.bundle=this.exerciseFrontendJS,s.render("exercise")}else r(new Error(e.errMessage||a.errMessage||o.errMessage||n.errMessage))}).catch(r)}),this.routeGet("/getExerciseStars",PassportHelper.ensureLoggedIn(),(e,s,r)=>{const t=parseInt(e.query.exerciseId,10);void 0===t?s.json({status:!1,errMessage:"exerciseId is needed"}):e.isAuthenticated?exercise_service_1.default.getExerciseStars(e.user.id,t).then(e=>{s.json(e)}).catch(e=>{r(e)}):s.json({status:!1,errMessage:"Unauthorized"})}),this.routePost("/exercise/getLeaderboard",(e,s,r)=>{const t=parseInt(e.body.exerciseId,10);void 0===t?s.json({status:!1,errMessage:"exerciseId is needed"}):e.isAuthenticated?exercise_service_1.default.getExerciseLeaderboard(t).then(e=>{s.json(e)}).catch(e=>{r(e)}):s.json({status:!1,errMessage:"Unauthorized"})}),this.routePost("/:topicId/:topicSlug/:subtopicId/:subtopicSlug/:exerciseId/:exerciseSlug",PassportHelper.ensureLoggedIn(),(e,r,t)=>{const i=e.user.id,a=e.body.exerciseId;log.verbose(TAG,`submitAnswer.POST(): userId=${i} exerciseId=${a}`),e.isAuthenticated?Promise.join(exercise_service_1.default.getGeneratedExercise({userId:i,exerciseId:a}),exercise_service_1.default.getSubmittedExercises({userId:i,exerciseId:a}),exercise_service_1.default.getExercise(a)).spread((t,o,n)=>{if(t.status){if(n.status){const c=t.data;let d=JSON.parse(c.knowns);const u=o.status?o.data:[],l=exercise_generator_1.default.getExerciseSolver(n.data.data),g=e.body.userAnswers;if(log.verbose(TAG,`submitAnswer.POST(): userAnswer=${JSON.stringify(g)}`),log.verbose(TAG,`submitAnswer.POST(): generatedQuestions=${JSON.stringify(d)}`),g.length!==d.length)return r.json({status:!1,errMessage:"Number of submitted answers doesn't match number of questions!"});{const e=g.reduce((e,s)=>{const r=Object.keys(s);let t=!1;return r.forEach(e=>{s[e].length>0&&(t=!0)}),t?e+1:e},0)/parseFloat(d.length)*100;log.verbose(TAG,"submitAnswer.POST(): attemptedAnswers= "+e);const t=[],o=d.reduce((e,s,r)=>{const i=g;log.verbose(TAG,`submitAnswer.POST(): knowns=${JSON.stringify(s)}, unknowns=${JSON.stringify(i[r])} isAnswer=${l.isAnswer(s,i[r])}`);const a=l.isAnswer(s,i[r]);return t.push(a),a?e+1:e},0)/parseFloat(d.length)*100,n=u.reduce((e,s)=>s.score>e?s.score:e,0);Promise.join(s.addExerciseData("correctAnswers",o,a,i),s.addExerciseData("attemptedAnswers",e,a,i)).spread((e,s)=>{e.status||log.error(TAG,"submitAnswer.POST(): addExerciseData.resp="+JSON.stringify(e)),s.status||log.error(TAG,"submitAnswer.POST(): addExerciseData.resp2="+JSON.stringify(s))}).catch(e=>{log.error(TAG,e)});const x=exercise_helper_1.default.countTimeFinish(c.createdAt);return exercise_service_1.default.updateGeneratedExercise({id:c.id,score:o,userAnswer:JSON.stringify(g),submitted:!0,submittedAt:moment().local().format("YYYY-MM-DD HH:mm:ss"),timeFinish:x}).then(e=>{e.status?Promise.join(exercise_service_1.default.getRenderedExerciseStars(i,a),exercise_service_1.default.getExerciseLeaderboard(a),exercise_service_1.default.getCurrentRanking(x,a),exercise_service_1.default.getTotalRanking(a),exercise_service_1.default.getRenderedExerciseTimers(i,a)).spread((e,s,i,a,d)=>{r.json({status:!0,data:{realAnswers:JSON.parse(c.unknowns),isAnswerCorrect:t,currentScore:o,bestScore:n,starsHTML:e.data,timersHTML:d.data,ranking:s.data,currentTimeFinish:x,currentRanking:i.data.count,totalRanking:a.data.count,isPerfectScore:100===o}})}):r.json({status:!1,errMessage:"Failed to save generated exercise"})})}}return r.json({status:!1,errMessage:"Exercise information be found"})}return log.error(TAG,"geResp.status="+t.status+" geResp.errMessage="+t.errMessage),r.json({status:!1,errMessage:"Current exercise cannot be found"})}).catch(e=>{log.error(TAG,e),r.json({status:!1,errMessage:e.message})}):(log.verbose(TAG,"submitAnswer.POST: request is not authenticated!"),r.status(500).send("Request not authenticated!"))}),this.routePost("/exercise/analytics",(e,r,t)=>{const i=e.body.key,a=e.body.exerciseId,o=e.user&&e.user.id||-1,n=e.body.value;s.addExerciseData(i,n,a,o).then(e=>{r.json(e)}).catch(e=>{t(e)})})}}module.exports=ExerciseController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
