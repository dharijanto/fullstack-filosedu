"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),course_service_1=require("../../services/course-service"),exercise_service_1=require("../../services/exercise-service"),exercise_generator_1=require("../../lib/exercise_generator/exercise-generator"),exercise_helper_1=require("../utils/exercise-helper");let path=require("path"),moment=require("moment-timezone"),log=require("npmlog"),AnalyticsService=require(path.join(__dirname,"../../services/analytics-service")),BaseController=require(path.join(__dirname,"base-controller")),PassportHelper=require(path.join(__dirname,"../utils/passport-helper")),PathFormatter=require(path.join(__dirname,"../../lib/path-formatter")),Formatter=require(path.join(__dirname,"../../lib/utils/formatter")),Utils=require(path.join(__dirname,"../utils/utils"));const TAG="ExerciseController";class ExerciseController extends BaseController{constructor(e){super(e);const s=new AnalyticsService(this.getDb().sequelize,this.getDb().models);this.addInterceptor((e,s,r)=>{r()}),this.routeGet("/:topicId/:topicSlug/:subtopicId/:subtopicSlug/:exerciseId/:exerciseSlug",PassportHelper.ensureLoggedIn(),(e,s,r)=>{let t=e.params.exerciseId,i=e.params.subtopicId,a=e.params.topicId;Promise.join(exercise_service_1.default.getExercise(t),exercise_service_1.default.getGeneratedExercise({userId:e.user.id,exerciseId:t}),course_service_1.default.getPreviousAndNextExercise(i,t),exercise_service_1.default.getRenderedExerciseStars(e.user.id,t),exercise_service_1.default.getRenderedExerciseTimers(e.user.id,t),course_service_1.default.getPreviousAndNextSubtopic(i)).spread((s,r,t,o,n,c)=>{if(s.status){const i=exercise_generator_1.default.getHash(s.data.data),a=exercise_generator_1.default.getExerciseSolver(s.data.data),d=o.status?o.data:'<p style="color:red;"> Unable to retrieve stars... </p>',u=o.status?o.data.stars:0,l=n.status?n.data:'<p style="color:red;"> Unable to retrieve timers... </p>',x=s.data.subtopic.topic,g=s.data.subtopic,p=t.data,m=c.data,_=p&&p.prev?Formatter.getExerciseURL(p.prev):m&&m.prev?Formatter.getSubtopicURL(m.prev):null,h=p&&p.next?Formatter.getExerciseURL(p.next):m&&m.next?Formatter.getSubtopicURL(m.next):null;if(r.status&&r.data.exerciseHash===i)return exercise_service_1.default.formatExercise(r.data,a).then(e=>Object.assign({elapsedTime:Utils.getElapsedTime(r.data.createdAt)},{formatted:e.formatted,exerciseId:e.exerciseId,idealTime:e.idealTime,topic:x,subtopic:g,starsHTML:d,stars:u,timersHTML:l,prevLink:_,nextLink:h}));if(r.status&&r.data.exerciseHash!==i||!r.status)return exercise_service_1.default.generateExercise(s.data).then(r=>{if(r.status)return exercise_service_1.default.saveGeneratedExercise(e.user.id,r.data.exerciseData,i).then(e=>{if(e.status)return Object.assign({elapsedTime:Utils.getElapsedTime(r.data.createdAt)},{formatted:r.data.formatted,exerciseId:s.data.id,idealTime:r.data.exerciseData.idealTime,topic:x,subtopic:g,starsHTML:d,stars:u,timersHTML:l,prevLink:_,nextLink:h});throw new Error("Could not create new generatedExercise!")});throw new Error("Exercise does not exists:"+r.errMessage)});throw new Error("Unknown error!")}throw new Error(`exercseId${e.params.exerciseId} or subtopicId=${i} or topicId=${a} does not exist!`)}).then(e=>{Object.assign(s.locals,e),s.locals.bundle=this._assetBundle,s.render("exercise")})}),this.routeGet("/getExerciseStars",PassportHelper.ensureLoggedIn(),(e,s,r)=>{const t=parseInt(e.query.exerciseId,10);void 0===t?s.json({status:!1,errMessage:"exerciseId is needed"}):e.isAuthenticated?exercise_service_1.default.getExerciseStars(e.user.id,t).then(e=>{s.json(e)}).catch(e=>{r(e)}):s.json({status:!1,errMessage:"Unauthorized"})}),this.routePost("/exercise/getLeaderboard",(e,s,r)=>{const t=parseInt(e.body.exerciseId,10);void 0===t?s.json({status:!1,errMessage:"exerciseId is needed"}):e.isAuthenticated?exercise_service_1.default.getExerciseLeaderboard(t).then(e=>{s.json(e)}).catch(e=>{r(e)}):s.json({status:!1,errMessage:"Unauthorized"})}),this.routePost("/:topicId/:topicSlug/:subtopicId/:subtopicSlug/:exerciseId/:exerciseSlug",PassportHelper.ensureLoggedIn(),(e,r,t)=>{const i=e.user.id,a=e.body.exerciseId;log.verbose(TAG,`submitAnswer.POST(): userId=${i} exerciseId=${a}`),e.isAuthenticated?Promise.join(exercise_service_1.default.getGeneratedExercise({userId:i,exerciseId:a}),exercise_service_1.default.getSubmittedExercises({userId:i,exerciseId:a}),exercise_service_1.default.getExercise(a)).spread((t,o,n)=>{if(t.status){if(n.status){const c=t.data;let d=JSON.parse(c.knowns);const u=o.status?o.data:[],l=exercise_generator_1.default.getExerciseSolver(n.data.data),x=e.body.userAnswers;if(log.verbose(TAG,`submitAnswer.POST(): userAnswer=${JSON.stringify(x)}`),log.verbose(TAG,`submitAnswer.POST(): generatedQuestions=${JSON.stringify(d)}`),x.length!==d.length)return r.json({status:!1,errMessage:"Number of submitted answers doesn't match number of questions!"});{const e=x.reduce((e,s)=>{const r=Object.keys(s);let t=!1;return r.forEach(e=>{s[e].length>0&&(t=!0)}),t?e+1:e},0)/parseFloat(d.length)*100;log.verbose(TAG,"submitAnswer.POST(): attemptedAnswers= "+e);const t=[],o=d.reduce((e,s,r)=>{const i=x;log.verbose(TAG,`submitAnswer.POST(): knowns=${JSON.stringify(s)}, unknowns=${JSON.stringify(i[r])} isAnswer=${l.isAnswer(s,i[r])}`);const a=l.isAnswer(s,i[r]);return t.push(a),a?e+1:e},0)/parseFloat(d.length)*100,n=u.reduce((e,s)=>s.score>e?s.score:e,0);Promise.join(s.addExerciseData("correctAnswers",o,a,i),s.addExerciseData("attemptedAnswers",e,a,i)).spread((e,s)=>{e.status||log.error(TAG,"submitAnswer.POST(): addExerciseData.resp="+JSON.stringify(e)),s.status||log.error(TAG,"submitAnswer.POST(): addExerciseData.resp2="+JSON.stringify(s))}).catch(e=>{log.error(TAG,e)});const g=exercise_helper_1.default.countTimeFinish(c.createdAt);return exercise_service_1.default.updateGeneratedExercise({id:c.id,score:o,userAnswer:JSON.stringify(x),submitted:!0,submittedAt:moment().local().format("YYYY-MM-DD HH:mm:ss"),timeFinish:g}).then(e=>{e.status?Promise.join(exercise_service_1.default.getRenderedExerciseStars(i,a),exercise_service_1.default.getExerciseLeaderboard(a),exercise_service_1.default.getCurrentRanking(g,a),exercise_service_1.default.getTotalRanking(a),exercise_service_1.default.getRenderedExerciseTimers(i,a)).spread((e,s,i,a,d)=>{r.json({status:!0,data:{realAnswers:JSON.parse(c.unknowns),isAnswerCorrect:t,currentScore:o,bestScore:n,starsHTML:e.data,timersHTML:d.data,ranking:s.data,currentTimeFinish:g,currentRanking:i.data.count,totalRanking:a.data.count,isPerfectScore:100===o}})}):r.json({status:!1,errMessage:"Failed to save generated exercise"})})}}return r.json({status:!1,errMessage:"Exercise information be found"})}return log.error(TAG,"geResp.status="+t.status+" geResp.errMessage="+t.errMessage),r.json({status:!1,errMessage:"Current exercise cannot be found"})}).catch(e=>{log.error(TAG,e),r.json({status:!1,errMessage:e.message})}):(log.verbose(TAG,"submitAnswer.POST: request is not authenticated!"),r.status(500).send("Request not authenticated!"))}),this.routePost("/exercise/analytics",(e,r,t)=>{const i=e.body.key,a=e.body.exerciseId,o=e.user&&e.user.id||-1,n=e.body.value;s.addExerciseData(i,n,a,o).then(e=>{r.json(e)}).catch(e=>{t(e)})})}initialize(){return new Promise((e,s)=>{PathFormatter.hashAsset("app","/assets/js/exercise-app-bundle.js").then(s=>{this._assetBundle=s,e()}).catch(e=>{s(e)})})}}module.exports=ExerciseController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
