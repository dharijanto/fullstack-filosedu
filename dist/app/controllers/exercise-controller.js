"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),course_service_1=require("../../services/course-service"),exercise_service_1=require("../../services/exercise-service");let path=require("path"),moment=require("moment-timezone"),log=require("npmlog"),AnalyticsService=require(path.join(__dirname,"../../services/analytics-service")),BaseController=require(path.join(__dirname,"base-controller")),PassportHelper=require(path.join(__dirname,"../utils/passport-helper")),PathFormatter=require(path.join(__dirname,"../../lib/path-formatter")),Formatter=require(path.join(__dirname,"../../lib/utils/formatter")),Utils=require(path.join(__dirname,"../utils/utils"));const TAG="ExerciseController";class ExerciseController extends BaseController{initialize(){return Promise.join(PathFormatter.hashAsset("app","/assets/js/exercise-app-bundle.js"),PathFormatter.hashAsset("app","/assets/js/competency-exercise-logistic-app-bundle.js"),PathFormatter.hashAsset("app","/assets/js/competency-exercise-app-bundle.js")).spread((e,s,r)=>{this.exerciseFrontendJS=e,this.competencyExerciseLogiscticJS=s,this.competencyExerciseJS=r})}constructor(e){super(e);const s=new AnalyticsService(this.getDb().sequelize,this.getDb().models);this.addInterceptor((e,s,r)=>{r()}),this.routeGet("/:topicId/:topicSlug/:subtopicId/:subtopicSlug/:exerciseId/:exerciseSlug",PassportHelper.ensureLoggedIn(),(e,s,r)=>{const t=e.user.id,i=e.params.exerciseId,a=e.params.subtopicId;Promise.join(exercise_service_1.default.getFormattedExercise(i,t),exercise_service_1.default.getRenderedExerciseStars(t,i),exercise_service_1.default.getRenderedExerciseTimers(t,i),course_service_1.default.getPreviousAndNextExercise(a,i),course_service_1.default.getPreviousAndNextSubtopic(a),course_service_1.default.getSubtopic(a)).spread((e,t,i,a,c,o)=>{if(e.status&&e.data&&a.status&&a.data&&c.status&&c.data&&o.status&&o.data){const r=a.data,d=c.data;s.locals.formattedExercise=e.data.formattedExercise,s.locals.elapsedTime=e.data.elapsedTime,s.locals.idealTime=e.data.idealTime,s.locals.exerciseId=e.data.exerciseId,s.locals.prevLink=r&&r.prev?Formatter.getExerciseURL(r.prev):d&&d.prev?Formatter.getSubtopicURL(d.prev):null,s.locals.nextLink=r&&r.next?Formatter.getExerciseURL(r.next):d&&d.next?Formatter.getSubtopicURL(d.next):null,s.locals.starsHTML=t.status?t.data:'<p style="color:red;"> Unable to retrieve stars... </p>',s.locals.timersHTML=i.status?i.data:'<p style="color:red;"> Unable to retrieve timers... </p>',s.locals.subtopic=o.data,s.locals.bundle=this.exerciseFrontendJS,s.render("exercise")}else r(new Error(e.errMessage||a.errMessage||c.errMessage||o.errMessage))}).catch(r)}),this.routeGet("/getExerciseStars",PassportHelper.ensureLoggedIn(),(e,s,r)=>{const t=parseInt(e.query.exerciseId,10);void 0===t?s.json({status:!1,errMessage:"exerciseId is needed"}):e.isAuthenticated?exercise_service_1.default.getExerciseStars(e.user.id,t).then(e=>{s.json(e)}).catch(e=>{r(e)}):s.json({status:!1,errMessage:"Unauthorized"})}),this.routePost("/exercise/getLeaderboard",(e,s,r)=>{const t=parseInt(e.body.exerciseId,10);void 0===t?s.json({status:!1,errMessage:"exerciseId is needed"}):e.isAuthenticated?exercise_service_1.default.getExerciseLeaderboard(t).then(e=>{s.json(e)}).catch(e=>{r(e)}):s.json({status:!1,errMessage:"Unauthorized"})}),this.routePost("/:topicId/:topicSlug/:subtopicId/:subtopicSlug/:exerciseId/:exerciseSlug",PassportHelper.ensureLoggedIn(),(e,r,t)=>{const i=e.user.id,a=e.body.exerciseId,c=e.body.answers;console.dir(e.body),exercise_service_1.default.finishExercise(a,i,c).then(e=>{if(r.status&&e.data){const t=e.data,o=c.reduce((e,s)=>{return Object.values(s).reduce((e,s)=>e||s.length>0,!1)?e+1:0},0)/c.length*100;s.addExerciseSubmissionStats(t.score,o,a,i).then(e=>{e.status||log.error(TAG,"submitAnswer.POST(): failed to add analytics: "+JSON.stringify(e))}).catch(e=>log.error(TAG,e)),Promise.join(exercise_service_1.default.getRenderedExerciseStars(i,a),exercise_service_1.default.getExerciseLeaderboard(a),exercise_service_1.default.getCurrentRanking(t.timeFinish,a),exercise_service_1.default.getTotalRanking(a),exercise_service_1.default.getRenderedExerciseTimers(i,a)).spread((e,s,i,a,c)=>{r.json({status:!0,data:{correctAnswers:t.correctAnswers,isCorrect:t.isCorrect,score:t.score,starsHTML:e.data,timersHTML:c.data,ranking:s.data,timeFinish:t.timeFinish,currentRanking:i.data.count,totalRanking:a.data.count}})})}})}),this.routePost("/exercise/analytics",(e,r,t)=>{const i=e.body.key,a=e.body.exerciseId,c=e.user&&e.user.id||-1,o=e.body.value;s.addExerciseData(i,o,a,c).then(e=>{r.json(e)}).catch(e=>{t(e)})})}}module.exports=ExerciseController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
