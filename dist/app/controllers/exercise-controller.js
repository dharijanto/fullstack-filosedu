"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),course_service_1=require("../../services/course-service"),exercise_service_1=require("../../services/exercise-service");let path=require("path"),moment=require("moment-timezone"),log=require("npmlog"),AnalyticsService=require(path.join(__dirname,"../../services/analytics-service")),BaseController=require(path.join(__dirname,"base-controller")),PassportHelper=require(path.join(__dirname,"../utils/passport-helper")),PathFormatter=require(path.join(__dirname,"../../lib/path-formatter")),Formatter=require(path.join(__dirname,"../../lib/utils/formatter")),Utils=require(path.join(__dirname,"../utils/utils"));const TAG="ExerciseController";class ExerciseController extends BaseController{initialize(){return new Promise((e,r)=>{PathFormatter.hashAsset("app","/assets/js/exercise-app-bundle.js").then(r=>{this.exerciseFrontendJS=r,e()}).catch(e=>{r(e)})})}constructor(e){super(e);const r=new AnalyticsService(this.getDb().sequelize,this.getDb().models);this.addInterceptor((e,r,s)=>{s()}),this.routeGet("/:topicId/:topicSlug/:subtopicId/:subtopicSlug/:exerciseId/:exerciseSlug",PassportHelper.ensureLoggedIn(),(e,r,s)=>{const t=e.user.id,i=e.params.exerciseId,a=e.params.subtopicId;Promise.join(exercise_service_1.default.getFormattedExercise(i,t),exercise_service_1.default.getRenderedExerciseStars(t,i),exercise_service_1.default.getRenderedExerciseTimers(t,i),course_service_1.default.getPreviousAndNextExercise(a,i),course_service_1.default.getPreviousAndNextSubtopic(a),course_service_1.default.getSubtopic(a)).spread((e,t,i,a,c,o)=>{if(e.status&&e.data&&a.status&&a.data&&c.status&&c.data&&o.status&&o.data){const s=a.data,d=c.data;r.locals.formattedExercise=e.data.formattedExercise,r.locals.elapsedTime=e.data.elapsedTime,r.locals.idealTime=e.data.idealTime,r.locals.exerciseId=e.data.exerciseId,r.locals.prevLink=s&&s.prev?Formatter.getExerciseURL(s.prev):d&&d.prev?Formatter.getSubtopicURL(d.prev):null,r.locals.nextLink=s&&s.next?Formatter.getExerciseURL(s.next):d&&d.next?Formatter.getSubtopicURL(d.next):null,r.locals.starsHTML=t.status?t.data:'<p style="color:red;"> Unable to retrieve stars... </p>',r.locals.timersHTML=i.status?i.data:'<p style="color:red;"> Unable to retrieve timers... </p>',r.locals.subtopic=o.data,r.locals.bundle=this.exerciseFrontendJS,r.render("exercise")}else s(new Error(e.errMessage||a.errMessage||c.errMessage||o.errMessage))}).catch(s)}),this.routeGet("/getExerciseStars",PassportHelper.ensureLoggedIn(),(e,r,s)=>{const t=parseInt(e.query.exerciseId,10);void 0===t?r.json({status:!1,errMessage:"exerciseId is needed"}):e.isAuthenticated?exercise_service_1.default.getExerciseStars(e.user.id,t).then(e=>{r.json(e)}).catch(e=>{s(e)}):r.json({status:!1,errMessage:"Unauthorized"})}),this.routePost("/exercise/getLeaderboard",(e,r,s)=>{const t=parseInt(e.body.exerciseId,10);void 0===t?r.json({status:!1,errMessage:"exerciseId is needed"}):e.isAuthenticated?exercise_service_1.default.getExerciseLeaderboard(t).then(e=>{r.json(e)}).catch(e=>{s(e)}):r.json({status:!1,errMessage:"Unauthorized"})}),this.routePost("/:topicId/:topicSlug/:subtopicId/:subtopicSlug/:exerciseId/:exerciseSlug",PassportHelper.ensureLoggedIn(),(e,s,t)=>{const i=e.user.id,a=e.body.exerciseId,c=e.body.answers;console.dir(e.body),exercise_service_1.default.finishExercise(a,i,c).then(e=>{if(s.status&&e.data){const t=e.data,o=c.reduce((e,r)=>{return Object.values(r).reduce((e,r)=>e||r.length>0,!1)?e+1:0},0)/c.length*100;r.addExerciseSubmissionStats(t.score,o,a,i).then(e=>{e.status||log.error(TAG,"submitAnswer.POST(): failed to add analytics: "+JSON.stringify(e))}).catch(e=>log.error(TAG,e)),Promise.join(exercise_service_1.default.getRenderedExerciseStars(i,a),exercise_service_1.default.getExerciseLeaderboard(a),exercise_service_1.default.getCurrentRanking(t.timeFinish,a),exercise_service_1.default.getTotalRanking(a),exercise_service_1.default.getRenderedExerciseTimers(i,a)).spread((e,r,i,a,c)=>{s.json({status:!0,data:{correctAnswers:t.correctAnswers,isCorrect:t.isCorrect,score:t.score,starsHTML:e.data,timersHTML:c.data,ranking:r.data,timeFinish:t.timeFinish,currentRanking:i.data.count,totalRanking:a.data.count}})})}})}),this.routePost("/exercise/analytics",(e,s,t)=>{const i=e.body.key,a=e.body.exerciseId,c=e.user&&e.user.id||-1,o=e.body.value;r.addExerciseData(i,o,a,c).then(e=>{s.json(e)}).catch(e=>{t(e)})})}}module.exports=ExerciseController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
