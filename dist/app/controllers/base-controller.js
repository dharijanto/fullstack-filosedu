const express=require("express"),path=require("path"),fs=require("fs"),log=require("npmlog");var Promise=require("bluebird"),AppConfig=require(path.join(__dirname,"../../app-config"));class BaseController{constructor({site:t,user:e,socketIO:s,db:r,logTag:i}){this._router=express(),this._viewPath=path.join(__dirname,"../views"),this._assetsPath=path.join(this._viewPath,"/assets"),this._db=r,this.getRouter().set("views",this._viewPath),this.getRouter().set("view engine","pug"),this.getRouter().use("/assets",express.static(this._assetsPath,{maxAge:"1h"})),this._interceptors=[]}initialize(){return this._initializeStaticHostRoute(),Promise.resolve()}getDb(){return this._db}isUpToDate(){return Promise.resolve(!0)}getRouter(){return this._router}_fileExists(t){return new Promise((e,s)=>{fs.access(t,fs.constants.F_OK,t=>{e(!t)})})}_initializeStaticHostRoute(){this.routeUse((t,e,s)=>{log.info(this.getTag(),"req.path="+t.path);const r=t.path.indexOf("/");if(log.info(this.getTag(),"firstSlash="+r),-1!==r&&r!==t.path.length-1){const i=t.path.substring(r)+".pug",o=path.resolve(path.join(this._viewPath,i));log.info(this.getTag(),"PrivateHostController: fullPath="+o),this._fileExists(o).then(t=>{t?e.render(o):s()})}else{const t=path.resolve(path.join(this._viewPath,"index.pug"));this._fileExists(t).then(s=>{if(!s)throw new Error;e.render(t)}).catch(()=>{e.status(404).send("Not Found!")})}})}_extendInterceptors(t){return this._interceptors.concat(t)}addInterceptor(t){this._interceptors=this._extendInterceptors(t)}routeGet(t,...e){this._router.get(this.getMountPath(t),this._extendInterceptors(e))}routePost(t,...e){this._router.post(this.getMountPath(t),this._extendInterceptors(e))}routeUse(t,...e){this._router.use(this.getMountPath(t),this._extendInterceptors(e))}getMountPath(t){return t||""}getTag(){return this._logTag}}module.exports=BaseController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
