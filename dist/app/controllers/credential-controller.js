var path=require("path"),Promise=require("bluebird"),log=require("npmlog"),PassportHelper=require(path.join(__dirname,"../utils/passport-helper")),passportManager=require(path.join(__dirname,"../../lib/passport-manager")),BaseController=require(path.join(__dirname,"base-controller")),SchoolService=require(path.join(__dirname,"../../services/school-service"));const TAG="CredentialController";class CredentialController extends BaseController{constructor(e){super(e);const r=new SchoolService(this.getDb().sequelize,this.getDb().models);this.addInterceptor((e,r,t)=>{t()}),this.routeGet("/login",(e,t,s)=>{r.getAll().then(r=>{r.status?t.locals.schools=r.data:s(new Error(r.errMessage)),t.locals.error=e.flash("error"),t.render("login")}).catch(e=>{s(e)})}),this.routeGet("/register",(e,t,s)=>{r.getAll().then(r=>{r.status?t.locals.schools=r.data:s(new Error(r.errMessage)),t.locals.error=e.flash("error"),t.render("register")}).catch(e=>{s(e)})}),this.routePost("/register",passportManager.authAppRegistration({failureRedirect:"/register",failureFlash:!0}),(e,r,t)=>{r.redirect(e.session.returnTo||"/")}),this.routePost("/login",passportManager.authAppLogin({failureRedirect:"/login",failureFlash:!0}),(e,r,t)=>{log.verbose(TAG,"submitlogin.POST(): Login success! Redirecting to: "+(e.session.returnTo||"/")),r.redirect(e.session.returnTo||"/")}),this.routeGet("/logout",PassportHelper.logOut())}initialize(){return new Promise((e,r)=>{e()})}}module.exports=CredentialController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAvY29udHJvbGxlcnMvY3JlZGVudGlhbC1jb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiUHJvbWlzZSIsImxvZyIsIlBhc3Nwb3J0SGVscGVyIiwiam9pbiIsIl9fZGlybmFtZSIsInBhc3Nwb3J0TWFuYWdlciIsIkJhc2VDb250cm9sbGVyIiwiU2Nob29sU2VydmljZSIsIlRBRyIsIkNyZWRlbnRpYWxDb250cm9sbGVyIiwiW29iamVjdCBPYmplY3RdIiwiaW5pdERhdGEiLCJzdXBlciIsInNjaG9vbFNlcnZpY2UiLCJ0aGlzIiwiZ2V0RGIiLCJzZXF1ZWxpemUiLCJtb2RlbHMiLCJhZGRJbnRlcmNlcHRvciIsInJlcSIsInJlcyIsIm5leHQiLCJyb3V0ZUdldCIsImdldEFsbCIsInRoZW4iLCJyZXNwIiwic3RhdHVzIiwibG9jYWxzIiwic2Nob29scyIsImRhdGEiLCJFcnJvciIsImVyck1lc3NhZ2UiLCJlcnJvciIsImZsYXNoIiwicmVuZGVyIiwiY2F0Y2giLCJlcnIiLCJyb3V0ZVBvc3QiLCJhdXRoQXBwUmVnaXN0cmF0aW9uIiwiZmFpbHVyZVJlZGlyZWN0IiwiZmFpbHVyZUZsYXNoIiwicmVkaXJlY3QiLCJzZXNzaW9uIiwicmV0dXJuVG8iLCJhdXRoQXBwTG9naW4iLCJ2ZXJib3NlIiwibG9nT3V0IiwicmVzb2x2ZSIsInJlamVjdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLEtBQU9DLFFBQVEsUUFDZkMsUUFBVUQsUUFBUSxZQUVsQkUsSUFBTUYsUUFBUSxVQUNkRyxlQUFpQkgsUUFBUUQsS0FBS0ssS0FBS0MsVUFBVyw2QkFDOUNDLGdCQUFrQk4sUUFBUUQsS0FBS0ssS0FBS0MsVUFBVywrQkFFL0NFLGVBQWlCUCxRQUFRRCxLQUFLSyxLQUFLQyxVQUFXLG9CQUM5Q0csY0FBZ0JSLFFBQVFELEtBQUtLLEtBQUtDLFVBQVcsa0NBRWpELE1BQU1JLElBQU0sNkJBRVpDLDZCQUFtQ0gsZUFDakNJLFlBQWFDLEdBQ1hDLE1BQU1ELEdBQ04sTUFBTUUsRUFBZ0IsSUFBSU4sY0FBY08sS0FBS0MsUUFBUUMsVUFBV0YsS0FBS0MsUUFBUUUsUUFFN0VILEtBQUtJLGVBQWUsQ0FBQ0MsRUFBS0MsRUFBS0MsS0FDN0JBLE1BR0ZQLEtBQUtRLFNBQVMsU0FBVSxDQUFDSCxFQUFLQyxFQUFLQyxLQUNqQ1IsRUFBY1UsU0FBU0MsS0FBS0MsSUFDdEJBLEVBQUtDLE9BQ1BOLEVBQUlPLE9BQU9DLFFBQVVILEVBQUtJLEtBRTFCUixFQUFLLElBQUlTLE1BQU1MLEVBQUtNLGFBRXRCWCxFQUFJTyxPQUFPSyxNQUFRYixFQUFJYyxNQUFNLFNBQzdCYixFQUFJYyxPQUFPLFdBQ1ZDLE1BQU1DLElBQ1BmLEVBQUtlLE9BSVR0QixLQUFLUSxTQUFTLFlBQWEsQ0FBQ0gsRUFBS0MsRUFBS0MsS0FDcENSLEVBQWNVLFNBQVNDLEtBQUtDLElBQ3RCQSxFQUFLQyxPQUNQTixFQUFJTyxPQUFPQyxRQUFVSCxFQUFLSSxLQUUxQlIsRUFBSyxJQUFJUyxNQUFNTCxFQUFLTSxhQUV0QlgsRUFBSU8sT0FBT0ssTUFBUWIsRUFBSWMsTUFBTSxTQUM3QmIsRUFBSWMsT0FBTyxjQUNWQyxNQUFNQyxJQUNQZixFQUFLZSxPQUlUdEIsS0FBS3VCLFVBQVUsWUFBYWhDLGdCQUFnQmlDLHFCQUMxQ0MsZ0JBQWlCLFlBQ2pCQyxjQUFjLElBQ1osQ0FBQ3JCLEVBQUtDLEVBQUtDLEtBQ2JELEVBQUlxQixTQUFTdEIsRUFBSXVCLFFBQVFDLFVBQVksT0FHdkM3QixLQUFLdUIsVUFBVSxTQUFVaEMsZ0JBQWdCdUMsY0FDdkNMLGdCQUFpQixTQUNqQkMsY0FBYyxJQUNaLENBQUNyQixFQUFLQyxFQUFLQyxLQUNicEIsSUFBSTRDLFFBQVFyQyxJQUFLLHVEQUF5RFcsRUFBSXVCLFFBQVFDLFVBQVksTUFDbEd2QixFQUFJcUIsU0FBU3RCLEVBQUl1QixRQUFRQyxVQUFZLE9BR3ZDN0IsS0FBS1EsU0FBUyxVQUFXcEIsZUFBZTRDLFVBRzFDcEMsYUFDRSxPQUFPLElBQUlWLFFBQVEsQ0FBQytDLEVBQVNDLEtBQzNCRCxPQUtORSxPQUFPQyxRQUFVekMiLCJmaWxlIjoiYXBwL2NvbnRyb2xsZXJzL2NyZWRlbnRpYWwtY29udHJvbGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJylcblxudmFyIGxvZyA9IHJlcXVpcmUoJ25wbWxvZycpXG52YXIgUGFzc3BvcnRIZWxwZXIgPSByZXF1aXJlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi91dGlscy9wYXNzcG9ydC1oZWxwZXInKSlcbnZhciBwYXNzcG9ydE1hbmFnZXIgPSByZXF1aXJlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi9saWIvcGFzc3BvcnQtbWFuYWdlcicpKVxuXG52YXIgQmFzZUNvbnRyb2xsZXIgPSByZXF1aXJlKHBhdGguam9pbihfX2Rpcm5hbWUsICdiYXNlLWNvbnRyb2xsZXInKSlcbnZhciBTY2hvb2xTZXJ2aWNlID0gcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vc2VydmljZXMvc2Nob29sLXNlcnZpY2UnKSlcblxuY29uc3QgVEFHID0gJ0NyZWRlbnRpYWxDb250cm9sbGVyJ1xuXG5jbGFzcyBDcmVkZW50aWFsQ29udHJvbGxlciBleHRlbmRzIEJhc2VDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IgKGluaXREYXRhKSB7XG4gICAgc3VwZXIoaW5pdERhdGEpXG4gICAgY29uc3Qgc2Nob29sU2VydmljZSA9IG5ldyBTY2hvb2xTZXJ2aWNlKHRoaXMuZ2V0RGIoKS5zZXF1ZWxpemUsIHRoaXMuZ2V0RGIoKS5tb2RlbHMpXG5cbiAgICB0aGlzLmFkZEludGVyY2VwdG9yKChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgbmV4dCgpXG4gICAgfSlcblxuICAgIHRoaXMucm91dGVHZXQoJy9sb2dpbicsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgc2Nob29sU2VydmljZS5nZXRBbGwoKS50aGVuKHJlc3AgPT4ge1xuICAgICAgICBpZiAocmVzcC5zdGF0dXMpIHtcbiAgICAgICAgICByZXMubG9jYWxzLnNjaG9vbHMgPSByZXNwLmRhdGFcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0KG5ldyBFcnJvcihyZXNwLmVyck1lc3NhZ2UpKVxuICAgICAgICB9XG4gICAgICAgIHJlcy5sb2NhbHMuZXJyb3IgPSByZXEuZmxhc2goJ2Vycm9yJylcbiAgICAgICAgcmVzLnJlbmRlcignbG9naW4nKVxuICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgbmV4dChlcnIpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0aGlzLnJvdXRlR2V0KCcvcmVnaXN0ZXInLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAgIHNjaG9vbFNlcnZpY2UuZ2V0QWxsKCkudGhlbihyZXNwID0+IHtcbiAgICAgICAgaWYgKHJlc3Auc3RhdHVzKSB7XG4gICAgICAgICAgcmVzLmxvY2Fscy5zY2hvb2xzID0gcmVzcC5kYXRhXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dChuZXcgRXJyb3IocmVzcC5lcnJNZXNzYWdlKSlcbiAgICAgICAgfVxuICAgICAgICByZXMubG9jYWxzLmVycm9yID0gcmVxLmZsYXNoKCdlcnJvcicpXG4gICAgICAgIHJlcy5yZW5kZXIoJ3JlZ2lzdGVyJylcbiAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIG5leHQoZXJyKVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgdGhpcy5yb3V0ZVBvc3QoJy9yZWdpc3RlcicsIHBhc3Nwb3J0TWFuYWdlci5hdXRoQXBwUmVnaXN0cmF0aW9uKHtcbiAgICAgIGZhaWx1cmVSZWRpcmVjdDogJy9yZWdpc3RlcicsXG4gICAgICBmYWlsdXJlRmxhc2g6IHRydWVcbiAgICB9KSwgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICByZXMucmVkaXJlY3QocmVxLnNlc3Npb24ucmV0dXJuVG8gfHwgJy8nKVxuICAgIH0pXG5cbiAgICB0aGlzLnJvdXRlUG9zdCgnL2xvZ2luJywgcGFzc3BvcnRNYW5hZ2VyLmF1dGhBcHBMb2dpbih7XG4gICAgICBmYWlsdXJlUmVkaXJlY3Q6ICcvbG9naW4nLFxuICAgICAgZmFpbHVyZUZsYXNoOiB0cnVlXG4gICAgfSksIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgbG9nLnZlcmJvc2UoVEFHLCAnc3VibWl0bG9naW4uUE9TVCgpOiBMb2dpbiBzdWNjZXNzISBSZWRpcmVjdGluZyB0bzogJyArIChyZXEuc2Vzc2lvbi5yZXR1cm5UbyB8fCAnLycpKVxuICAgICAgcmVzLnJlZGlyZWN0KHJlcS5zZXNzaW9uLnJldHVyblRvIHx8ICcvJylcbiAgICB9KVxuXG4gICAgdGhpcy5yb3V0ZUdldCgnL2xvZ291dCcsIFBhc3Nwb3J0SGVscGVyLmxvZ091dCgpKVxuICB9XG5cbiAgaW5pdGlhbGl6ZSAoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHJlc29sdmUoKVxuICAgIH0pXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDcmVkZW50aWFsQ29udHJvbGxlclxuIl19
