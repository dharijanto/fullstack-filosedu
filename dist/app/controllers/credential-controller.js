var path=require("path"),Promise=require("bluebird"),log=require("npmlog"),PassportHelper=require(path.join(__dirname,"../utils/passport-helper")),passportManager=require(path.join(__dirname,"../../lib/passport-manager")),BaseController=require(path.join(__dirname,"base-controller")),SchoolService=require(path.join(__dirname,"../../services/school-service"));const TAG="CredentialController";class CredentialController extends BaseController{constructor(e){super(e);const r=new SchoolService(this.getDb().sequelize,this.getDb().models);this.addInterceptor((e,r,o)=>{log.verbose(TAG,"req.path="+e.path),log.verbose(TAG,"cloudServer="+r.locals.cloudServer),o()}),this.routeGet("/login",(e,o,s)=>{r.getAll().then(r=>{r.status?o.locals.schools=r.data:s(new Error(r.errMessage)),o.locals.error=e.flash("error"),o.render("login")}).catch(e=>{s(e)})}),this.routeGet("/register",(e,o,s)=>{r.getAll().then(r=>{r.status?o.locals.schools=r.data:s(new Error(r.errMessage)),o.locals.error=e.flash("error"),o.render("register")}).catch(e=>{s(e)})}),this.routePost("/register",passportManager.authAppRegistration({failureRedirect:"/register",failureFlash:!0}),(e,r,o)=>{r.redirect(e.session.returnTo||"/")}),this.routePost("/login",passportManager.authAppLogin({failureRedirect:"/login",failureFlash:!0}),(e,r,o)=>{log.verbose(TAG,"submitlogin.POST(): Login success! Redirecting to: "+(e.session.returnTo||"/")),r.redirect(e.session.returnTo||"/")}),this.routeGet("/logout",PassportHelper.logOut())}initialize(){return Promise.resolve()}}module.exports=CredentialController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAvY29udHJvbGxlcnMvY3JlZGVudGlhbC1jb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiUHJvbWlzZSIsImxvZyIsIlBhc3Nwb3J0SGVscGVyIiwiam9pbiIsIl9fZGlybmFtZSIsInBhc3Nwb3J0TWFuYWdlciIsIkJhc2VDb250cm9sbGVyIiwiU2Nob29sU2VydmljZSIsIlRBRyIsIkNyZWRlbnRpYWxDb250cm9sbGVyIiwiW29iamVjdCBPYmplY3RdIiwiaW5pdERhdGEiLCJzdXBlciIsInNjaG9vbFNlcnZpY2UiLCJ0aGlzIiwiZ2V0RGIiLCJzZXF1ZWxpemUiLCJtb2RlbHMiLCJhZGRJbnRlcmNlcHRvciIsInJlcSIsInJlcyIsIm5leHQiLCJ2ZXJib3NlIiwibG9jYWxzIiwiY2xvdWRTZXJ2ZXIiLCJyb3V0ZUdldCIsImdldEFsbCIsInRoZW4iLCJyZXNwIiwic3RhdHVzIiwic2Nob29scyIsImRhdGEiLCJFcnJvciIsImVyck1lc3NhZ2UiLCJlcnJvciIsImZsYXNoIiwicmVuZGVyIiwiY2F0Y2giLCJlcnIiLCJyb3V0ZVBvc3QiLCJhdXRoQXBwUmVnaXN0cmF0aW9uIiwiZmFpbHVyZVJlZGlyZWN0IiwiZmFpbHVyZUZsYXNoIiwicmVkaXJlY3QiLCJzZXNzaW9uIiwicmV0dXJuVG8iLCJhdXRoQXBwTG9naW4iLCJsb2dPdXQiLCJyZXNvbHZlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsS0FBT0MsUUFBUSxRQUNmQyxRQUFVRCxRQUFRLFlBRWxCRSxJQUFNRixRQUFRLFVBQ2RHLGVBQWlCSCxRQUFRRCxLQUFLSyxLQUFLQyxVQUFXLDZCQUM5Q0MsZ0JBQWtCTixRQUFRRCxLQUFLSyxLQUFLQyxVQUFXLCtCQUUvQ0UsZUFBaUJQLFFBQVFELEtBQUtLLEtBQUtDLFVBQVcsb0JBQzlDRyxjQUFnQlIsUUFBUUQsS0FBS0ssS0FBS0MsVUFBVyxrQ0FFakQsTUFBTUksSUFBTSw2QkFFWkMsNkJBQW1DSCxlQUNqQ0ksWUFBYUMsR0FDWEMsTUFBTUQsR0FDTixNQUFNRSxFQUFnQixJQUFJTixjQUFjTyxLQUFLQyxRQUFRQyxVQUFXRixLQUFLQyxRQUFRRSxRQUU3RUgsS0FBS0ksZUFBZSxDQUFDQyxFQUFLQyxFQUFLQyxLQUM3QnBCLElBQUlxQixRQUFRZCxJQUFLLFlBQWNXLEVBQUlyQixNQUNuQ0csSUFBSXFCLFFBQVFkLElBQUssZUFBaUJZLEVBQUlHLE9BQU9DLGFBQzdDSCxNQUdGUCxLQUFLVyxTQUFTLFNBQVUsQ0FBQ04sRUFBS0MsRUFBS0MsS0FDakNSLEVBQWNhLFNBQVNDLEtBQUtDLElBQ3RCQSxFQUFLQyxPQUNQVCxFQUFJRyxPQUFPTyxRQUFVRixFQUFLRyxLQUUxQlYsRUFBSyxJQUFJVyxNQUFNSixFQUFLSyxhQUV0QmIsRUFBSUcsT0FBT1csTUFBUWYsRUFBSWdCLE1BQU0sU0FDN0JmLEVBQUlnQixPQUFPLFdBQ1ZDLE1BQU1DLElBQ1BqQixFQUFLaUIsT0FJVHhCLEtBQUtXLFNBQVMsWUFBYSxDQUFDTixFQUFLQyxFQUFLQyxLQUNwQ1IsRUFBY2EsU0FBU0MsS0FBS0MsSUFDdEJBLEVBQUtDLE9BQ1BULEVBQUlHLE9BQU9PLFFBQVVGLEVBQUtHLEtBRTFCVixFQUFLLElBQUlXLE1BQU1KLEVBQUtLLGFBRXRCYixFQUFJRyxPQUFPVyxNQUFRZixFQUFJZ0IsTUFBTSxTQUM3QmYsRUFBSWdCLE9BQU8sY0FDVkMsTUFBTUMsSUFDUGpCLEVBQUtpQixPQUlUeEIsS0FBS3lCLFVBQVUsWUFBYWxDLGdCQUFnQm1DLHFCQUMxQ0MsZ0JBQWlCLFlBQ2pCQyxjQUFjLElBQ1osQ0FBQ3ZCLEVBQUtDLEVBQUtDLEtBQ2JELEVBQUl1QixTQUFTeEIsRUFBSXlCLFFBQVFDLFVBQVksT0FHdkMvQixLQUFLeUIsVUFBVSxTQUFVbEMsZ0JBQWdCeUMsY0FDdkNMLGdCQUFpQixTQUNqQkMsY0FBYyxJQUNaLENBQUN2QixFQUFLQyxFQUFLQyxLQUNicEIsSUFBSXFCLFFBQVFkLElBQUssdURBQXlEVyxFQUFJeUIsUUFBUUMsVUFBWSxNQUNsR3pCLEVBQUl1QixTQUFTeEIsRUFBSXlCLFFBQVFDLFVBQVksT0FHdkMvQixLQUFLVyxTQUFTLFVBQVd2QixlQUFlNkMsVUFHMUNyQyxhQUNFLE9BQU9WLFFBQVFnRCxXQUluQkMsT0FBT0MsUUFBVXpDIiwiZmlsZSI6ImFwcC9jb250cm9sbGVycy9jcmVkZW50aWFsLWNvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxudmFyIFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpXG5cbnZhciBsb2cgPSByZXF1aXJlKCducG1sb2cnKVxudmFyIFBhc3Nwb3J0SGVscGVyID0gcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vdXRpbHMvcGFzc3BvcnQtaGVscGVyJykpXG52YXIgcGFzc3BvcnRNYW5hZ2VyID0gcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vbGliL3Bhc3Nwb3J0LW1hbmFnZXInKSlcblxudmFyIEJhc2VDb250cm9sbGVyID0gcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnYmFzZS1jb250cm9sbGVyJykpXG52YXIgU2Nob29sU2VydmljZSA9IHJlcXVpcmUocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uL3NlcnZpY2VzL3NjaG9vbC1zZXJ2aWNlJykpXG5cbmNvbnN0IFRBRyA9ICdDcmVkZW50aWFsQ29udHJvbGxlcidcblxuY2xhc3MgQ3JlZGVudGlhbENvbnRyb2xsZXIgZXh0ZW5kcyBCYXNlQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yIChpbml0RGF0YSkge1xuICAgIHN1cGVyKGluaXREYXRhKVxuICAgIGNvbnN0IHNjaG9vbFNlcnZpY2UgPSBuZXcgU2Nob29sU2VydmljZSh0aGlzLmdldERiKCkuc2VxdWVsaXplLCB0aGlzLmdldERiKCkubW9kZWxzKVxuXG4gICAgdGhpcy5hZGRJbnRlcmNlcHRvcigocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAgIGxvZy52ZXJib3NlKFRBRywgJ3JlcS5wYXRoPScgKyByZXEucGF0aClcbiAgICAgIGxvZy52ZXJib3NlKFRBRywgJ2Nsb3VkU2VydmVyPScgKyByZXMubG9jYWxzLmNsb3VkU2VydmVyKVxuICAgICAgbmV4dCgpXG4gICAgfSlcblxuICAgIHRoaXMucm91dGVHZXQoJy9sb2dpbicsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgc2Nob29sU2VydmljZS5nZXRBbGwoKS50aGVuKHJlc3AgPT4ge1xuICAgICAgICBpZiAocmVzcC5zdGF0dXMpIHtcbiAgICAgICAgICByZXMubG9jYWxzLnNjaG9vbHMgPSByZXNwLmRhdGFcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0KG5ldyBFcnJvcihyZXNwLmVyck1lc3NhZ2UpKVxuICAgICAgICB9XG4gICAgICAgIHJlcy5sb2NhbHMuZXJyb3IgPSByZXEuZmxhc2goJ2Vycm9yJylcbiAgICAgICAgcmVzLnJlbmRlcignbG9naW4nKVxuICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgbmV4dChlcnIpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0aGlzLnJvdXRlR2V0KCcvcmVnaXN0ZXInLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAgIHNjaG9vbFNlcnZpY2UuZ2V0QWxsKCkudGhlbihyZXNwID0+IHtcbiAgICAgICAgaWYgKHJlc3Auc3RhdHVzKSB7XG4gICAgICAgICAgcmVzLmxvY2Fscy5zY2hvb2xzID0gcmVzcC5kYXRhXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dChuZXcgRXJyb3IocmVzcC5lcnJNZXNzYWdlKSlcbiAgICAgICAgfVxuICAgICAgICByZXMubG9jYWxzLmVycm9yID0gcmVxLmZsYXNoKCdlcnJvcicpXG4gICAgICAgIHJlcy5yZW5kZXIoJ3JlZ2lzdGVyJylcbiAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIG5leHQoZXJyKVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgdGhpcy5yb3V0ZVBvc3QoJy9yZWdpc3RlcicsIHBhc3Nwb3J0TWFuYWdlci5hdXRoQXBwUmVnaXN0cmF0aW9uKHtcbiAgICAgIGZhaWx1cmVSZWRpcmVjdDogJy9yZWdpc3RlcicsXG4gICAgICBmYWlsdXJlRmxhc2g6IHRydWVcbiAgICB9KSwgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICByZXMucmVkaXJlY3QocmVxLnNlc3Npb24ucmV0dXJuVG8gfHwgJy8nKVxuICAgIH0pXG5cbiAgICB0aGlzLnJvdXRlUG9zdCgnL2xvZ2luJywgcGFzc3BvcnRNYW5hZ2VyLmF1dGhBcHBMb2dpbih7XG4gICAgICBmYWlsdXJlUmVkaXJlY3Q6ICcvbG9naW4nLFxuICAgICAgZmFpbHVyZUZsYXNoOiB0cnVlXG4gICAgfSksIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgbG9nLnZlcmJvc2UoVEFHLCAnc3VibWl0bG9naW4uUE9TVCgpOiBMb2dpbiBzdWNjZXNzISBSZWRpcmVjdGluZyB0bzogJyArIChyZXEuc2Vzc2lvbi5yZXR1cm5UbyB8fCAnLycpKVxuICAgICAgcmVzLnJlZGlyZWN0KHJlcS5zZXNzaW9uLnJldHVyblRvIHx8ICcvJylcbiAgICB9KVxuXG4gICAgdGhpcy5yb3V0ZUdldCgnL2xvZ291dCcsIFBhc3Nwb3J0SGVscGVyLmxvZ091dCgpKVxuICB9XG5cbiAgaW5pdGlhbGl6ZSAoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDcmVkZW50aWFsQ29udHJvbGxlclxuIl19
