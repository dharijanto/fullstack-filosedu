"use strict";const Promise=require("bluebird"),course_service_1=require("../../services/course-service"),exercise_service_1=require("../../services/exercise-service");let path=require("path"),log=require("npmlog"),AnalyticsService=require(path.join(__dirname,"../../services/analytics-service")),AppConfig=require(path.join(__dirname,"../../app-config")),BaseController=require(path.join(__dirname,"base-controller")),Formatter=require(path.join(__dirname,"../../lib/utils/formatter")),PathFormatter=require(path.join(__dirname,"../../lib/path-formatter")),PassportHelper=require(path.join(__dirname,"../utils/passport-helper")),VideoService=require(path.join(__dirname,"../../services/video-service"));const TAG="SubtopicController";class SubtopicController extends BaseController{constructor(e){super(e);const s=new VideoService(this.getDb().sequelize,this.getDb().models),t=new AnalyticsService(this.getDb().sequelize,this.getDb().models);this.addInterceptor((e,s,t)=>{t()}),this.routePost("/video/analytics",(e,s,r)=>{const i=e.body.key,a=e.body.videoId,o=e.user&&e.user.id||-1,c=e.body.value;t.addVideoData(i,c,a,o).then(e=>{s.json(e)}).catch(e=>{r(e)})}),this.routePost("/video/finishedWatching",(e,t,r)=>{const i=e.body.videoId,a=e.user.id;a&&s.addFinishedWatching(i,a).then(e=>{t.json(e)}).catch(e=>{r(e)})}),this.routeGet("/:topicId/:topicSlug/:subtopicId/:subtopicSlug",PassportHelper.ensureLoggedIn(),(e,t,r)=>{let i=e.params.topicId,a=e.params.subtopicId;a?Promise.join(course_service_1.default.readOne({modelName:"Subtopic",searchClause:{id:a}}),course_service_1.default.read({modelName:"Exercise",searchClause:{subtopicId:a}}),course_service_1.default.readOne({modelName:"Topic",searchClause:{id:i}}),s.getVideo(a),course_service_1.default.getPreviousAndNextSubtopic(a)).spread((s,i,a,o,c)=>{if(s.status&&a.status&&o.status){const r=s.data;t.locals.prevLink=c.status&&c.data.prev?Formatter.getSubtopicURL(c.data.prev):null,t.locals.nextLink=c.status&&c.data.next?Formatter.getSubtopicURL(c.data.next):null,t.locals.topic=a.data,t.locals.subtopic=r,t.locals.subtopicData=JSON.parse(r.data),t.locals.exercises=i.data||[],t.locals.isAuthenticated=e.isAuthenticated(),t.locals.bundle=this._assetBundle,log.verbose(TAG,"subtopic.GET(): resp4="+JSON.stringify(o));const d=`<video class="video-js vjs-fluid vjs-default-skin vjs-big-play-centered" id="video-player" data-id=${o.data.id} controls data-setup='{}'>`,l="<div class='text-center text-danger'>Video does not exist</div>";if(AppConfig.CLOUD_SERVER){const e=o.status&&o.data.remoteHostedURL;t.locals.videoSource=e?`${d}\n  <source src="${o.data.remoteHostedURL.HD}" type="video/mp4" label="HD" res="720"/>\n  <source src="${o.data.remoteHostedURL.nonHD}" type="video/mp4" label="SD" res="360"/>\n</video>`:l}else{const e=o.status&&o.data.selfHostedURL;t.locals.videoSource=e?`${d}<source src=${e}></video>`:l}return e.isAuthenticated()?Promise.map(t.locals.exercises,(s,r)=>Promise.join(exercise_service_1.default.getExerciseStars(e.user.id,s.id),exercise_service_1.default.getExerciseTimers(e.user.id,s.id),(e,s)=>{log.verbose(TAG,"subtopic.GET(): star="+e.data.stars),log.verbose(TAG,"subtopic.GET(): timer="+s.data.timers),t.locals.exercises[r].stars=e.data.stars,t.locals.exercises[r].timers=s.data.timers})).then(e=>{t.render("subtopic")}):(e.session.returnTo=e.originalUrl||e.url,t.render("subtopic"))}r()}).catch(e=>{r(e)}):r()})}initialize(){return new Promise((e,s)=>{PathFormatter.hashAsset("app","/assets/js/subtopic-app-bundle.js").then(s=>{this._assetBundle=s,e()}).catch(e=>{s(e)})})}}module.exports=SubtopicController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
