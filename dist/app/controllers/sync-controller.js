var path=require("path"),_=require("lodash"),log=require("npmlog"),Promise=require("bluebird"),Sequelize=require("sequelize"),BaseController=require(path.join(__dirname,"base-controller")),SyncService=require(path.join(__dirname,"../../services/sync-server-service"));const TAG="SyncController";class SyncController extends BaseController{constructor(e){super(e);const t=new SyncService(this.getDb().sequelize,this.getDb().models);this.addInterceptor((e,t,r)=>{r()}),this.routeGet("/synchronization/histories",(e,r,n)=>{const o=e.query.schoolIdentifier;t.getSyncHistories(o).then(e=>{r.json(e)}).catch(e=>{n(e)})}),this.routeGet("/synchronization/readyToSync",(e,r,n)=>{const o=e.query.schoolIdentifier;t.isReadyToSync(o).then(e=>{r.json(e)}).catch(n)}),this.routePost("/synchronization/start",(e,r,n)=>{var o=e.body.data;return log.verbose(TAG,`synchronization.POST(): ${JSON.stringify(o)}`),this.getDb().sequelize.transaction({isolationLevel:Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE},e=>{const n=o.school.identifier;return t.findSchoolIdByIdentifier(n).then(i=>{if(i.status){const s=i.data.id;return t.isReadyToSync(n,e).then(i=>i.status?t.createSyncHistory(n,o.syncTime).then(n=>{const i=n.data.id;return r.json({status:!0}),t.syncData(s,o,e).then(()=>t.updateSyncHistory(i,!0)).catch(e=>t.updateSyncHistory(i,!1).then(()=>{throw e}))}):i)}throw new Error(i.errMessage)})}).then(()=>{log.info(TAG,"synchronization.POST(): Success!")}).catch(e=>{log.error(TAG,e)})})}initialize(){return new Promise((e,t)=>{e()})}}module.exports=SyncController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
