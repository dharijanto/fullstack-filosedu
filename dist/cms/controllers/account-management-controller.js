const path=require("path"),log=require("npmlog"),BaseController=require(path.join(__dirname,"base-controller")),PathFormatter=require(path.join(__dirname,"../../lib/path-formatter")),UserService=require(path.join(__dirname,"../../services/user-service")),SchoolService=require(path.join(__dirname,"../../services/school-service")),TAG="AccountManagementController";class AccountManagementController extends BaseController{constructor(e){super(e);const t=new UserService(this.getDb().sequelize,this.getDb().models),o=new SchoolService(this.getDb().sequelize,this.getDb().models);this.addInterceptor((e,t,o)=>{log.verbose(TAG,"req.path="+e.path),o()}),this.routeGet("/accountmanagement",(e,t,o)=>{t.render("account-management")}),this.routeGet("/accountmanagement/user/get",(e,o,n)=>{t.getAll().then(e=>{o.json(e)}).catch(e=>{n(e)})}),this.routePost("/accountmanagement/user/add",(e,n,a)=>{o.readOne({modelName:"School",searchClause:{name:e.body["school.name"]}}).then(o=>{if(o.status){const a=Object.assign(e.body,{schoolId:o.data.id});return t.register(a).then(e=>{n.json(e)})}n.json(o)}).catch(e=>{a(e)})}),this.routePost("/accountmanagement/user/edit",(e,n,a)=>{o.readOne({modelName:"School",searchClause:{name:e.body["school.name"]}}).then(o=>{if(o.status){const a=Object.assign(e.body,{schoolId:o.data.id});return t.updateCredential(a).then(e=>{n.json(e)})}n.json(o)}).catch(e=>{a(e)})}),this.routePost("/accountmanagement/user/delete",(e,o,n)=>t.deleteById(e.body.id).then(e=>{o.json({status:!0})}).catch(e=>{n(e)}))}}module.exports=AccountManagementController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbXMvY29udHJvbGxlcnMvYWNjb3VudC1tYW5hZ2VtZW50LWNvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJsb2ciLCJCYXNlQ29udHJvbGxlciIsImpvaW4iLCJfX2Rpcm5hbWUiLCJQYXRoRm9ybWF0dGVyIiwiVXNlclNlcnZpY2UiLCJTY2hvb2xTZXJ2aWNlIiwiVEFHIiwiQWNjb3VudE1hbmFnZW1lbnRDb250cm9sbGVyIiwiW29iamVjdCBPYmplY3RdIiwiaW5pdERhdGEiLCJzdXBlciIsInVzZXJTZXJ2aWNlIiwidGhpcyIsImdldERiIiwic2VxdWVsaXplIiwibW9kZWxzIiwic2Nob29sU2VydmljZSIsImFkZEludGVyY2VwdG9yIiwicmVxIiwicmVzIiwibmV4dCIsInZlcmJvc2UiLCJyb3V0ZUdldCIsInJlbmRlciIsImdldEFsbCIsInRoZW4iLCJyZXNwIiwianNvbiIsImNhdGNoIiwiZXJyIiwicm91dGVQb3N0IiwicmVhZE9uZSIsIm1vZGVsTmFtZSIsInNlYXJjaENsYXVzZSIsIm5hbWUiLCJib2R5Iiwic3RhdHVzIiwiZGF0YSIsIk9iamVjdCIsImFzc2lnbiIsInNjaG9vbElkIiwiaWQiLCJyZWdpc3RlciIsInVwZGF0ZUNyZWRlbnRpYWwiLCJkZWxldGVCeUlkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBT0MsUUFBUSxRQUVmQyxJQUFNRCxRQUFRLFVBRWRFLGVBQWlCRixRQUFRRCxLQUFLSSxLQUFLQyxVQUFXLG9CQUM5Q0MsY0FBZ0JMLFFBQVFELEtBQUtJLEtBQUtDLFVBQVcsNkJBQzdDRSxZQUFjTixRQUFRRCxLQUFLSSxLQUFLQyxVQUFXLGdDQUMzQ0csY0FBZ0JQLFFBQVFELEtBQUtJLEtBQUtDLFVBQVcsa0NBRTdDSSxJQUFNLG9DQUdaQyxvQ0FBMENQLGVBQ3hDUSxZQUFhQyxHQUNYQyxNQUFNRCxHQUNOLE1BQU1FLEVBQWMsSUFBSVAsWUFBWVEsS0FBS0MsUUFBUUMsVUFBV0YsS0FBS0MsUUFBUUUsUUFDbkVDLEVBQWdCLElBQUlYLGNBQWNPLEtBQUtDLFFBQVFDLFVBQVdGLEtBQUtDLFFBQVFFLFFBRTdFSCxLQUFLSyxlQUFlLENBQUNDLEVBQUtDLEVBQUtDLEtBQzdCckIsSUFBSXNCLFFBQVFmLElBQUssWUFBY1ksRUFBSXJCLE1BQ25DdUIsTUFHRlIsS0FBS1UsU0FBUyxxQkFBc0IsQ0FBQ0osRUFBS0MsRUFBS0MsS0FDN0NELEVBQUlJLE9BQU8sd0JBR2JYLEtBQUtVLFNBQVMsOEJBQStCLENBQUNKLEVBQUtDLEVBQUtDLEtBQ3REVCxFQUFZYSxTQUFTQyxLQUFLQyxJQUN4QlAsRUFBSVEsS0FBS0QsS0FDUkUsTUFBTUMsSUFDUFQsRUFBS1MsT0FJVGpCLEtBQUtrQixVQUFVLDhCQUErQixDQUFDWixFQUFLQyxFQUFLQyxLQUN2REosRUFBY2UsU0FBU0MsVUFBVyxTQUFVQyxjQUFlQyxLQUFNaEIsRUFBSWlCLEtBQUssa0JBQWtCVixLQUFLQyxJQUMvRixHQUFJQSxFQUFLVSxPQUFRLENBQ2YsTUFBTUMsRUFBT0MsT0FBT0MsT0FBT3JCLEVBQUlpQixNQUFPSyxTQUFVZCxFQUFLVyxLQUFLSSxLQUMxRCxPQUFPOUIsRUFBWStCLFNBQVNMLEdBQU1aLEtBQUtDLElBQ3JDUCxFQUFJUSxLQUFLRCxLQUdYUCxFQUFJUSxLQUFLRCxLQUVWRSxNQUFNQyxJQUNQVCxFQUFLUyxPQUlUakIsS0FBS2tCLFVBQVUsK0JBQWdDLENBQUNaLEVBQUtDLEVBQUtDLEtBQ3hESixFQUFjZSxTQUFTQyxVQUFXLFNBQVVDLGNBQWVDLEtBQU1oQixFQUFJaUIsS0FBSyxrQkFBa0JWLEtBQUtDLElBQy9GLEdBQUlBLEVBQUtVLE9BQVEsQ0FDZixNQUFNQyxFQUFPQyxPQUFPQyxPQUFPckIsRUFBSWlCLE1BQU9LLFNBQVVkLEVBQUtXLEtBQUtJLEtBQzFELE9BQU85QixFQUFZZ0MsaUJBQWlCTixHQUFNWixLQUFLQyxJQUM3Q1AsRUFBSVEsS0FBS0QsS0FHWFAsRUFBSVEsS0FBS0QsS0FFVkUsTUFBTUMsSUFDUFQsRUFBS1MsT0FJVGpCLEtBQUtrQixVQUFVLGlDQUFrQyxDQUFDWixFQUFLQyxFQUFLQyxJQUNuRFQsRUFBWWlDLFdBQVcxQixFQUFJaUIsS0FBS00sSUFBSWhCLEtBQUtDLElBQzlDUCxFQUFJUSxNQUFNUyxRQUFRLE1BQ2pCUixNQUFNQyxJQUNQVCxFQUFLUyxPQU1iZ0IsT0FBT0MsUUFBVXZDIiwiZmlsZSI6ImNtcy9jb250cm9sbGVycy9hY2NvdW50LW1hbmFnZW1lbnQtY29udHJvbGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJylcblxuY29uc3QgbG9nID0gcmVxdWlyZSgnbnBtbG9nJylcblxuY29uc3QgQmFzZUNvbnRyb2xsZXIgPSByZXF1aXJlKHBhdGguam9pbihfX2Rpcm5hbWUsICdiYXNlLWNvbnRyb2xsZXInKSlcbmNvbnN0IFBhdGhGb3JtYXR0ZXIgPSByZXF1aXJlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi9saWIvcGF0aC1mb3JtYXR0ZXInKSlcbmNvbnN0IFVzZXJTZXJ2aWNlID0gcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vc2VydmljZXMvdXNlci1zZXJ2aWNlJykpXG5jb25zdCBTY2hvb2xTZXJ2aWNlID0gcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vc2VydmljZXMvc2Nob29sLXNlcnZpY2UnKSlcblxuY29uc3QgVEFHID0gJ0FjY291bnRNYW5hZ2VtZW50Q29udHJvbGxlcidcblxuLy8gVE9ETzogVXBkYXRlIFVSTCBmcm9tIC9nZXQvdXNlci9hY2NvdW50bWFuYWdlbWVudCAtPiAvYWNjb3VudG1hbmFnZW1lbnQvZ2V0L3VzZXJcbmNsYXNzIEFjY291bnRNYW5hZ2VtZW50Q29udHJvbGxlciBleHRlbmRzIEJhc2VDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IgKGluaXREYXRhKSB7XG4gICAgc3VwZXIoaW5pdERhdGEpXG4gICAgY29uc3QgdXNlclNlcnZpY2UgPSBuZXcgVXNlclNlcnZpY2UodGhpcy5nZXREYigpLnNlcXVlbGl6ZSwgdGhpcy5nZXREYigpLm1vZGVscylcbiAgICBjb25zdCBzY2hvb2xTZXJ2aWNlID0gbmV3IFNjaG9vbFNlcnZpY2UodGhpcy5nZXREYigpLnNlcXVlbGl6ZSwgdGhpcy5nZXREYigpLm1vZGVscylcblxuICAgIHRoaXMuYWRkSW50ZXJjZXB0b3IoKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICBsb2cudmVyYm9zZShUQUcsICdyZXEucGF0aD0nICsgcmVxLnBhdGgpXG4gICAgICBuZXh0KClcbiAgICB9KVxuXG4gICAgdGhpcy5yb3V0ZUdldCgnL2FjY291bnRtYW5hZ2VtZW50JywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICByZXMucmVuZGVyKCdhY2NvdW50LW1hbmFnZW1lbnQnKVxuICAgIH0pXG5cbiAgICB0aGlzLnJvdXRlR2V0KCcvYWNjb3VudG1hbmFnZW1lbnQvdXNlci9nZXQnLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAgIHVzZXJTZXJ2aWNlLmdldEFsbCgpLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgIHJlcy5qc29uKHJlc3ApXG4gICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICBuZXh0KGVycilcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHRoaXMucm91dGVQb3N0KCcvYWNjb3VudG1hbmFnZW1lbnQvdXNlci9hZGQnLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAgIHNjaG9vbFNlcnZpY2UucmVhZE9uZSh7bW9kZWxOYW1lOiAnU2Nob29sJywgc2VhcmNoQ2xhdXNlOiB7bmFtZTogcmVxLmJvZHlbJ3NjaG9vbC5uYW1lJ119fSkudGhlbihyZXNwID0+IHtcbiAgICAgICAgaWYgKHJlc3Auc3RhdHVzKSB7XG4gICAgICAgICAgY29uc3QgZGF0YSA9IE9iamVjdC5hc3NpZ24ocmVxLmJvZHksIHtzY2hvb2xJZDogcmVzcC5kYXRhLmlkfSlcbiAgICAgICAgICByZXR1cm4gdXNlclNlcnZpY2UucmVnaXN0ZXIoZGF0YSkudGhlbihyZXNwID0+IHtcbiAgICAgICAgICAgIHJlcy5qc29uKHJlc3ApXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMuanNvbihyZXNwKVxuICAgICAgICB9XG4gICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICBuZXh0KGVycilcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHRoaXMucm91dGVQb3N0KCcvYWNjb3VudG1hbmFnZW1lbnQvdXNlci9lZGl0JywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICBzY2hvb2xTZXJ2aWNlLnJlYWRPbmUoe21vZGVsTmFtZTogJ1NjaG9vbCcsIHNlYXJjaENsYXVzZToge25hbWU6IHJlcS5ib2R5WydzY2hvb2wubmFtZSddfX0pLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgIGlmIChyZXNwLnN0YXR1cykge1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSBPYmplY3QuYXNzaWduKHJlcS5ib2R5LCB7c2Nob29sSWQ6IHJlc3AuZGF0YS5pZH0pXG4gICAgICAgICAgcmV0dXJuIHVzZXJTZXJ2aWNlLnVwZGF0ZUNyZWRlbnRpYWwoZGF0YSkudGhlbihyZXNwID0+IHtcbiAgICAgICAgICAgIHJlcy5qc29uKHJlc3ApXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMuanNvbihyZXNwKVxuICAgICAgICB9XG4gICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICBuZXh0KGVycilcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHRoaXMucm91dGVQb3N0KCcvYWNjb3VudG1hbmFnZW1lbnQvdXNlci9kZWxldGUnLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAgIHJldHVybiB1c2VyU2VydmljZS5kZWxldGVCeUlkKHJlcS5ib2R5LmlkKS50aGVuKHJlc3AgPT4ge1xuICAgICAgICByZXMuanNvbih7c3RhdHVzOiB0cnVlfSlcbiAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIG5leHQoZXJyKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQWNjb3VudE1hbmFnZW1lbnRDb250cm9sbGVyXG4iXX0=
