"use strict";const path=require("path"),course_service_1=require("../../services/course-service"),log=require("npmlog"),marked=require("marked"),BaseController=require(path.join(__dirname,"base-controller")),PathFormatter=require(path.join(__dirname,"../../lib/path-formatter")),TAG="CourseManagementController";class CourseManagementController extends BaseController{constructor(e){super(e),this.addInterceptor((e,t,r)=>{log.verbose(TAG,"req.path="+e.path),t.locals.site=e.site,t.locals.user=e.user,t.locals.marked=marked,r()}),this.routeGet("/",(e,t,r)=>{t.render("index")}),this.routePost("/add/TopicDependency",(e,t,r)=>{const o=e.body.dependencyName||"";course_service_1.default.addTopicDependency(e.query.topicId,o,e.body.description).then(e=>{t.json(e)}).catch(e=>r(e))}),this.routeGet("/get/TopicDependency",(e,t,r)=>{log.verbose(TAG,"get/TopicDependency.GET: req.body="+JSON.stringify(e.body)),course_service_1.default.getTopicDependencies(e.query.topicId).then(e=>{t.json(e)}).catch(r)}),this.routeGet("/get/:model",(e,t,r)=>{course_service_1.default.read({modelName:e.params.model,searchClause:e.query}).then(r=>{log.verbose(this.getTag(),`/get/${e.params.model}.get(): resp=${JSON.stringify(r)}`),t.json({status:!0,data:r.data||[]})}).catch(e=>r(e))}),this.routePost("/add/:model",(e,t,r)=>{course_service_1.default.create({modelName:e.params.model,data:Object.assign(e.body,e.query)}).then(e=>{t.json(e)}).catch(e=>r(e))}),this.routePost("/edit/:model",(e,t,r)=>{course_service_1.default.update({modelName:e.params.model,data:e.body}).then(e=>{t.json(e)}).catch(e=>r(e))}),this.routePost("/delete/:model",(e,t,r)=>{course_service_1.default.delete({modelName:e.params.model,data:e.body}).then(e=>{t.json(e)}).catch(e=>r(e))})}}module.exports=CourseManagementController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbXMvY29udHJvbGxlcnMvY291cnNlLW1hbmFnZW1lbnQtY29udHJvbGxlci50cyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsImNvdXJzZV9zZXJ2aWNlXzEiLCJsb2ciLCJtYXJrZWQiLCJCYXNlQ29udHJvbGxlciIsImpvaW4iLCJfX2Rpcm5hbWUiLCJQYXRoRm9ybWF0dGVyIiwiVEFHIiwiQ291cnNlTWFuYWdlbWVudENvbnRyb2xsZXIiLCJbb2JqZWN0IE9iamVjdF0iLCJpbml0RGF0YSIsInN1cGVyIiwidGhpcyIsImFkZEludGVyY2VwdG9yIiwicmVxIiwicmVzIiwibmV4dCIsInZlcmJvc2UiLCJsb2NhbHMiLCJzaXRlIiwidXNlciIsInJvdXRlR2V0IiwicmVuZGVyIiwicm91dGVQb3N0IiwiZGVwZW5kZW5jeU5hbWUiLCJib2R5IiwiZGVmYXVsdCIsImFkZFRvcGljRGVwZW5kZW5jeSIsInF1ZXJ5IiwidG9waWNJZCIsImRlc2NyaXB0aW9uIiwidGhlbiIsInJlc3AiLCJqc29uIiwiY2F0Y2giLCJlcnIiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0VG9waWNEZXBlbmRlbmNpZXMiLCJyZWFkIiwibW9kZWxOYW1lIiwicGFyYW1zIiwibW9kZWwiLCJzZWFyY2hDbGF1c2UiLCJnZXRUYWciLCJzdGF0dXMiLCJkYXRhIiwiY3JlYXRlIiwiT2JqZWN0IiwiYXNzaWduIiwidXBkYXRlIiwiZGVsZXRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6ImFBQUEsTUFBQUEsS0FBQUMsUUFBQSxRQUVBQyxpQkFBQUQsUUFBQSxpQ0FFTUUsSUFBTUYsUUFBUSxVQUNkRyxPQUFTSCxRQUFRLFVBRWpCSSxlQUFpQkosUUFBUUQsS0FBS00sS0FBS0MsVUFBVyxvQkFDOUNDLGNBQWdCUCxRQUFRRCxLQUFLTSxLQUFLQyxVQUFXLDZCQUU3Q0UsSUFBTSxtQ0FDWkMsbUNBQXlDTCxlQUN2Q00sWUFBYUMsR0FDWEMsTUFBTUQsR0FFTkUsS0FBS0MsZUFBZSxDQUFDQyxFQUFLQyxFQUFLQyxLQUM3QmYsSUFBSWdCLFFBQVFWLElBQUssWUFBY08sRUFBSWhCLE1BQ25DaUIsRUFBSUcsT0FBT0MsS0FBT0wsRUFBSUssS0FDdEJKLEVBQUlHLE9BQU9FLEtBQU9OLEVBQUlNLEtBQ3RCTCxFQUFJRyxPQUFPaEIsT0FBU0EsT0FDcEJjLE1BR0ZKLEtBQUtTLFNBQVMsSUFBSyxDQUFDUCxFQUFLQyxFQUFLQyxLQUM1QkQsRUFBSU8sT0FBTyxXQUdiVixLQUFLVyxVQUFVLHVCQUF3QixDQUFDVCxFQUFLQyxFQUFLQyxLQUNoRCxNQUFNUSxFQUFpQlYsRUFBSVcsS0FBS0QsZ0JBQWtCLEdBQ2xEeEIsaUJBQUEwQixRQUFjQyxtQkFBbUJiLEVBQUljLE1BQU1DLFFBQVNMLEVBQWdCVixFQUFJVyxLQUFLSyxhQUFhQyxLQUFLQyxJQUM3RmpCLEVBQUlrQixLQUFLRCxLQUNSRSxNQUFNQyxHQUFPbkIsRUFBS21CLE1BR3ZCdkIsS0FBS1MsU0FBUyx1QkFBd0IsQ0FBQ1AsRUFBS0MsRUFBS0MsS0FDL0NmLElBQUlnQixRQUFRVixJQUFLLHFDQUF1QzZCLEtBQUtDLFVBQVV2QixFQUFJVyxPQUMzRXpCLGlCQUFBMEIsUUFBY1kscUJBQXFCeEIsRUFBSWMsTUFBTUMsU0FBU0UsS0FBS0MsSUFDekRqQixFQUFJa0IsS0FBS0QsS0FDUkUsTUFBTWxCLEtBR1hKLEtBQUtTLFNBQVMsY0FBZSxDQUFDUCxFQUFLQyxFQUFLQyxLQUN0Q2hCLGlCQUFBMEIsUUFBY2EsTUFBT0MsVUFBVzFCLEVBQUkyQixPQUFPQyxNQUFPQyxhQUFjN0IsRUFBSWMsUUFBU0csS0FBS0MsSUFDaEYvQixJQUFJZ0IsUUFBUUwsS0FBS2dDLGlCQUFrQjlCLEVBQUkyQixPQUFPQyxxQkFBcUJOLEtBQUtDLFVBQVVMLE1BR2xGakIsRUFBSWtCLE1BQU9ZLFFBQVEsRUFBTUMsS0FBTWQsRUFBS2MsYUFDbkNaLE1BQU1DLEdBQU9uQixFQUFLbUIsTUFHdkJ2QixLQUFLVyxVQUFVLGNBQWUsQ0FBQ1QsRUFBS0MsRUFBS0MsS0FFdkNoQixpQkFBQTBCLFFBQWNxQixRQUFTUCxVQUFXMUIsRUFBSTJCLE9BQU9DLE1BQU9JLEtBQU1FLE9BQU9DLE9BQU9uQyxFQUFJVyxLQUFNWCxFQUFJYyxTQUFVRyxLQUFLQyxJQUNuR2pCLEVBQUlrQixLQUFLRCxLQUNSRSxNQUFNQyxHQUFPbkIsRUFBS21CLE1BR3ZCdkIsS0FBS1csVUFBVSxlQUFnQixDQUFDVCxFQUFLQyxFQUFLQyxLQUV4Q2hCLGlCQUFBMEIsUUFBY3dCLFFBQVNWLFVBQVcxQixFQUFJMkIsT0FBT0MsTUFBT0ksS0FBTWhDLEVBQUlXLE9BQVFNLEtBQUtDLElBQ3pFakIsRUFBSWtCLEtBQUtELEtBQ1JFLE1BQU1DLEdBQU9uQixFQUFLbUIsTUFHdkJ2QixLQUFLVyxVQUFVLGlCQUFrQixDQUFDVCxFQUFLQyxFQUFLQyxLQUMxQ2hCLGlCQUFBMEIsUUFBY3lCLFFBQVNYLFVBQVcxQixFQUFJMkIsT0FBT0MsTUFBT0ksS0FBTWhDLEVBQUlXLE9BQVFNLEtBQUtDLElBQ3pFakIsRUFBSWtCLEtBQUtELEtBQ1JFLE1BQU1DLEdBQU9uQixFQUFLbUIsT0FLM0JpQixPQUFBQyxRQUFTN0MiLCJmaWxlIjoiY21zL2NvbnRyb2xsZXJzL2NvdXJzZS1tYW5hZ2VtZW50LWNvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnXG5cbmltcG9ydCBDb3Vyc2VTZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL2NvdXJzZS1zZXJ2aWNlJ1xuXG5jb25zdCBsb2cgPSByZXF1aXJlKCducG1sb2cnKVxuY29uc3QgbWFya2VkID0gcmVxdWlyZSgnbWFya2VkJylcblxuY29uc3QgQmFzZUNvbnRyb2xsZXIgPSByZXF1aXJlKHBhdGguam9pbihfX2Rpcm5hbWUsICdiYXNlLWNvbnRyb2xsZXInKSlcbmNvbnN0IFBhdGhGb3JtYXR0ZXIgPSByZXF1aXJlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi9saWIvcGF0aC1mb3JtYXR0ZXInKSlcblxuY29uc3QgVEFHID0gJ0NvdXJzZU1hbmFnZW1lbnRDb250cm9sbGVyJ1xuY2xhc3MgQ291cnNlTWFuYWdlbWVudENvbnRyb2xsZXIgZXh0ZW5kcyBCYXNlQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yIChpbml0RGF0YSkge1xuICAgIHN1cGVyKGluaXREYXRhKVxuXG4gICAgdGhpcy5hZGRJbnRlcmNlcHRvcigocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAgIGxvZy52ZXJib3NlKFRBRywgJ3JlcS5wYXRoPScgKyByZXEucGF0aClcbiAgICAgIHJlcy5sb2NhbHMuc2l0ZSA9IHJlcS5zaXRlXG4gICAgICByZXMubG9jYWxzLnVzZXIgPSByZXEudXNlclxuICAgICAgcmVzLmxvY2Fscy5tYXJrZWQgPSBtYXJrZWRcbiAgICAgIG5leHQoKVxuICAgIH0pXG5cbiAgICB0aGlzLnJvdXRlR2V0KCcvJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICByZXMucmVuZGVyKCdpbmRleCcpXG4gICAgfSlcblxuICAgIHRoaXMucm91dGVQb3N0KCcvYWRkL1RvcGljRGVwZW5kZW5jeScsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgY29uc3QgZGVwZW5kZW5jeU5hbWUgPSByZXEuYm9keS5kZXBlbmRlbmN5TmFtZSB8fCAnJ1xuICAgICAgQ291cnNlU2VydmljZS5hZGRUb3BpY0RlcGVuZGVuY3kocmVxLnF1ZXJ5LnRvcGljSWQsIGRlcGVuZGVuY3lOYW1lLCByZXEuYm9keS5kZXNjcmlwdGlvbikudGhlbihyZXNwID0+IHtcbiAgICAgICAgcmVzLmpzb24ocmVzcClcbiAgICAgIH0pLmNhdGNoKGVyciA9PiBuZXh0KGVycikpXG4gICAgfSlcblxuICAgIHRoaXMucm91dGVHZXQoJy9nZXQvVG9waWNEZXBlbmRlbmN5JywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICBsb2cudmVyYm9zZShUQUcsICdnZXQvVG9waWNEZXBlbmRlbmN5LkdFVDogcmVxLmJvZHk9JyArIEpTT04uc3RyaW5naWZ5KHJlcS5ib2R5KSlcbiAgICAgIENvdXJzZVNlcnZpY2UuZ2V0VG9waWNEZXBlbmRlbmNpZXMocmVxLnF1ZXJ5LnRvcGljSWQpLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgIHJlcy5qc29uKHJlc3ApXG4gICAgICB9KS5jYXRjaChuZXh0KVxuICAgIH0pXG5cbiAgICB0aGlzLnJvdXRlR2V0KCcvZ2V0Lzptb2RlbCcsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgQ291cnNlU2VydmljZS5yZWFkKHsgbW9kZWxOYW1lOiByZXEucGFyYW1zLm1vZGVsLCBzZWFyY2hDbGF1c2U6IHJlcS5xdWVyeSB9KS50aGVuKHJlc3AgPT4ge1xuICAgICAgICBsb2cudmVyYm9zZSh0aGlzLmdldFRhZygpLCBgL2dldC8ke3JlcS5wYXJhbXMubW9kZWx9LmdldCgpOiByZXNwPSR7SlNPTi5zdHJpbmdpZnkocmVzcCl9YClcbiAgICAgICAgLy8gUmVhZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3Mgbm8gZGF0YSBtYXRjaGluZyB0aGUgc2VhcmNoQ2xhdXNlLCBidXQgaW4gdGhpcyBzaXR1YXRpb25cbiAgICAgICAgLy8gaGF2aW5nIG5vIGRhdGEgaXMgZmluZVxuICAgICAgICByZXMuanNvbih7IHN0YXR1czogdHJ1ZSwgZGF0YTogcmVzcC5kYXRhIHx8IFtdIH0pXG4gICAgICB9KS5jYXRjaChlcnIgPT4gbmV4dChlcnIpKVxuICAgIH0pXG5cbiAgICB0aGlzLnJvdXRlUG9zdCgnL2FkZC86bW9kZWwnLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAgIC8vIFBhdGggaXMgb2YgZm9ybWF0IC9hZGQvVG9waWM/c3ViamVjdElkPTVcbiAgICAgIENvdXJzZVNlcnZpY2UuY3JlYXRlKHsgbW9kZWxOYW1lOiByZXEucGFyYW1zLm1vZGVsLCBkYXRhOiBPYmplY3QuYXNzaWduKHJlcS5ib2R5LCByZXEucXVlcnkpIH0pLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgIHJlcy5qc29uKHJlc3ApXG4gICAgICB9KS5jYXRjaChlcnIgPT4gbmV4dChlcnIpKVxuICAgIH0pXG5cbiAgICB0aGlzLnJvdXRlUG9zdCgnL2VkaXQvOm1vZGVsJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICAvLyBQYXRoIGlzIG9mIGZvcm1hdCAvYWRkL1RvcGljP3N1YmplY3RJZD01XG4gICAgICBDb3Vyc2VTZXJ2aWNlLnVwZGF0ZSh7IG1vZGVsTmFtZTogcmVxLnBhcmFtcy5tb2RlbCwgZGF0YTogcmVxLmJvZHkgfSkudGhlbihyZXNwID0+IHtcbiAgICAgICAgcmVzLmpzb24ocmVzcClcbiAgICAgIH0pLmNhdGNoKGVyciA9PiBuZXh0KGVycikpXG4gICAgfSlcblxuICAgIHRoaXMucm91dGVQb3N0KCcvZGVsZXRlLzptb2RlbCcsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgQ291cnNlU2VydmljZS5kZWxldGUoeyBtb2RlbE5hbWU6IHJlcS5wYXJhbXMubW9kZWwsIGRhdGE6IHJlcS5ib2R5IH0pLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgIHJlcy5qc29uKHJlc3ApXG4gICAgICB9KS5jYXRjaChlcnIgPT4gbmV4dChlcnIpKVxuICAgIH0pXG4gIH1cbn1cblxuZXhwb3J0ID0gQ291cnNlTWFuYWdlbWVudENvbnRyb2xsZXJcbiJdfQ==
