const path=require("path"),express=require("express"),bodyParser=require("body-parser"),log=require("npmlog");var AppConfig=require(path.join(__dirname,"../../app-config"));class BaseController{constructor({site:t,user:e,socketIO:s,db:r,logTag:o,baseDir:i}){this._siteHash=t.hash,this._logTag=o,this._db=r,this._router=express(),this._router.use(bodyParser.json()),this._subRouter=express(),this._router.use(`/${this._siteHash}`,this._subRouter);const u=path.join(AppConfig.VIEWS_CMS_PATH,"/assets");this._subRouter.use("/assets",express.static(u)),this._subRouter.locals.rootifyPath=this.rootifyPath.bind(this),this._subRouter.locals.basedir=i,this._subRouter.set("views",AppConfig.VIEWS_CMS_PATH),this._subRouter.set("view engine","pug"),this._interceptors=[]}rootifyPath(t){return`/${this._siteHash}/${t}`}getRouter(){return this._router}getDb(){return this._db}_extendInterceptors(t){return this._interceptors.concat(t)}addInterceptor(t){this._interceptors=this._extendInterceptors(t)}routeGet(t,...e){this._subRouter.get(this.getMountPath(t),this._extendInterceptors(e))}routePost(t,...e){this._subRouter.post(this.getMountPath(t),this._extendInterceptors(e))}routeUse(t,...e){this._subRouter.use(this.getMountPath(t),this._extendInterceptors(e))}routeHashlessUse(...t){this._router.use(this._extendInterceptors(t))}getMountPath(t){return t||""}getTag(){return this._logTag}getSidebar(){throw new Error("Not implemented")}}module.exports=BaseController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbXMvY29udHJvbGxlcnMvYmFzZS1jb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiZXhwcmVzcyIsImJvZHlQYXJzZXIiLCJsb2ciLCJBcHBDb25maWciLCJqb2luIiwiX19kaXJuYW1lIiwiQmFzZUNvbnRyb2xsZXIiLCJbb2JqZWN0IE9iamVjdF0iLCJzaXRlIiwidXNlciIsInNvY2tldElPIiwiZGIiLCJsb2dUYWciLCJiYXNlRGlyIiwidGhpcyIsIl9zaXRlSGFzaCIsImhhc2giLCJfbG9nVGFnIiwiX2RiIiwiX3JvdXRlciIsInVzZSIsImpzb24iLCJfc3ViUm91dGVyIiwiYXNzZXRzUGF0aCIsIlZJRVdTX0NNU19QQVRIIiwic3RhdGljIiwibG9jYWxzIiwicm9vdGlmeVBhdGgiLCJiaW5kIiwiYmFzZWRpciIsInNldCIsIl9pbnRlcmNlcHRvcnMiLCJmaWxlbmFtZSIsImZucyIsImNvbmNhdCIsIl9leHRlbmRJbnRlcmNlcHRvcnMiLCJnZXQiLCJnZXRNb3VudFBhdGgiLCJwb3N0Iiwic3RyUGF0aCIsIkVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBT0MsUUFBUSxRQUVmQyxRQUFVRCxRQUFRLFdBQ2xCRSxXQUFhRixRQUFRLGVBQ3JCRyxJQUFNSCxRQUFRLFVBRXBCLElBQUlJLFVBQVlKLFFBQVFELEtBQUtNLEtBQUtDLFVBQVcsMkJBRTdDQyxlQUNFQyxhQUFhQyxLQUFDQSxFQUFJQyxLQUFFQSxFQUFJQyxTQUFFQSxFQUFRQyxHQUFFQSxFQUFFQyxPQUFFQSxFQUFNQyxRQUFFQSxJQUM5Q0MsS0FBS0MsVUFBWVAsRUFBS1EsS0FFdEJGLEtBQUtHLFFBQVVMLEVBQ2ZFLEtBQUtJLElBQU1QLEVBQ1hHLEtBQUtLLFFBQVVuQixVQUNmYyxLQUFLSyxRQUFRQyxJQUFJbkIsV0FBV29CLFFBQzVCUCxLQUFLUSxXQUFhdEIsVUFDbEJjLEtBQUtLLFFBQVFDLFFBQVFOLEtBQUtDLFlBQWFELEtBQUtRLFlBQzVDLE1BQU1DLEVBQWF6QixLQUFLTSxLQUFLRCxVQUFVcUIsZUFBZ0IsV0FDdkRWLEtBQUtRLFdBQVdGLElBQUksVUFBV3BCLFFBQVF5QixPQUFPRixJQUU5Q1QsS0FBS1EsV0FBV0ksT0FBT0MsWUFBY2IsS0FBS2EsWUFBWUMsS0FBS2QsTUFDM0RBLEtBQUtRLFdBQVdJLE9BQU9HLFFBQVVoQixFQUVqQ0MsS0FBS1EsV0FBV1EsSUFBSSxRQUFTM0IsVUFBVXFCLGdCQUN2Q1YsS0FBS1EsV0FBV1EsSUFBSSxjQUFlLE9BQ25DaEIsS0FBS2lCLGlCQUtQeEIsWUFBYXlCLEdBQ1gsVUFBV2xCLEtBQUtDLGFBQWFpQixJQUcvQnpCLFlBQ0UsT0FBT08sS0FBS0ssUUFHZFosUUFDRSxPQUFPTyxLQUFLSSxJQUdkWCxvQkFBcUIwQixHQUNuQixPQUFPbkIsS0FBS2lCLGNBQWNHLE9BQU9ELEdBS25DMUIsZUFBZ0IwQixHQUVkbkIsS0FBS2lCLGNBQWdCakIsS0FBS3FCLG9CQUFvQkYsR0FHaEQxQixTQUFVVCxLQUFTbUMsR0FDakJuQixLQUFLUSxXQUFXYyxJQUFJdEIsS0FBS3VCLGFBQWF2QyxHQUFPZ0IsS0FBS3FCLG9CQUFvQkYsSUFHeEUxQixVQUFXVCxLQUFTbUMsR0FDbEJuQixLQUFLUSxXQUFXZ0IsS0FBS3hCLEtBQUt1QixhQUFhdkMsR0FBT2dCLEtBQUtxQixvQkFBb0JGLElBR3pFMUIsU0FBVVQsS0FBU21DLEdBQ2pCbkIsS0FBS1EsV0FBV0YsSUFBSU4sS0FBS3VCLGFBQWF2QyxHQUFPZ0IsS0FBS3FCLG9CQUFvQkYsSUFJeEUxQixvQkFBcUIwQixHQUNuQm5CLEtBQUtLLFFBQVFDLElBQUlOLEtBQUtxQixvQkFBb0JGLElBTTVDMUIsYUFBY2dDLEdBRVosT0FBT0EsR0FBVyxHQUlwQmhDLFNBQ0UsT0FBT08sS0FBS0csUUFHZFYsYUFDRSxNQUFNLElBQUlpQyxNQUFNLG9CQUlwQkMsT0FBT0MsUUFBVXBDIiwiZmlsZSI6ImNtcy9jb250cm9sbGVycy9iYXNlLWNvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG5cbmNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJylcbmNvbnN0IGJvZHlQYXJzZXIgPSByZXF1aXJlKCdib2R5LXBhcnNlcicpXG5jb25zdCBsb2cgPSByZXF1aXJlKCducG1sb2cnKVxuXG52YXIgQXBwQ29uZmlnID0gcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vYXBwLWNvbmZpZycpKVxuXG5jbGFzcyBCYXNlQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yICh7c2l0ZSwgdXNlciwgc29ja2V0SU8sIGRiLCBsb2dUYWcsIGJhc2VEaXJ9KSB7XG4gICAgdGhpcy5fc2l0ZUhhc2ggPSBzaXRlLmhhc2hcbiAgICAvLyBTaW5jZSB0aGUgcGF0aCBpcyBwcmVmaXhlZCB3aXRoIC86aGFzaC8sIHdlIGRvbid0IHdhbm5hIGhhbmRsZSBpdCBtYW51YWxseSBldmVyeXRpbWUsIGhlbmNlIHdlIHVzZSB0d28gcm91dGVyc1xuICAgIHRoaXMuX2xvZ1RhZyA9IGxvZ1RhZ1xuICAgIHRoaXMuX2RiID0gZGJcbiAgICB0aGlzLl9yb3V0ZXIgPSBleHByZXNzKClcbiAgICB0aGlzLl9yb3V0ZXIudXNlKGJvZHlQYXJzZXIuanNvbigpKSAvLyBSZXF1aXJlZCBmb3IgdW5pdC10ZXN0aW5nXG4gICAgdGhpcy5fc3ViUm91dGVyID0gZXhwcmVzcygpXG4gICAgdGhpcy5fcm91dGVyLnVzZShgLyR7dGhpcy5fc2l0ZUhhc2h9YCwgdGhpcy5fc3ViUm91dGVyKVxuICAgIGNvbnN0IGFzc2V0c1BhdGggPSBwYXRoLmpvaW4oQXBwQ29uZmlnLlZJRVdTX0NNU19QQVRILCAnL2Fzc2V0cycpXG4gICAgdGhpcy5fc3ViUm91dGVyLnVzZSgnL2Fzc2V0cycsIGV4cHJlc3Muc3RhdGljKGFzc2V0c1BhdGgpKVxuXG4gICAgdGhpcy5fc3ViUm91dGVyLmxvY2Fscy5yb290aWZ5UGF0aCA9IHRoaXMucm9vdGlmeVBhdGguYmluZCh0aGlzKVxuICAgIHRoaXMuX3N1YlJvdXRlci5sb2NhbHMuYmFzZWRpciA9IGJhc2VEaXJcblxuICAgIHRoaXMuX3N1YlJvdXRlci5zZXQoJ3ZpZXdzJywgQXBwQ29uZmlnLlZJRVdTX0NNU19QQVRIKVxuICAgIHRoaXMuX3N1YlJvdXRlci5zZXQoJ3ZpZXcgZW5naW5lJywgJ3B1ZycpXG4gICAgdGhpcy5faW50ZXJjZXB0b3JzID0gW11cbiAgfVxuXG4gIC8vIFNpbmNlIHdlJ3JlIHVzaW5nIC86aGFzaC9wYXRoLCB3ZSBoYXZlIHRvIHByZXBlbmQgOmhhc2hcbiAgLy8gYXMgdGhlIHJvb3Qgb2YgdGhlIHBhdGgsIHdoZW4gcmVmZXJyaW5nIHRvIGFuIGFzc2V0XG4gIHJvb3RpZnlQYXRoIChmaWxlbmFtZSkge1xuICAgIHJldHVybiBgLyR7dGhpcy5fc2l0ZUhhc2h9LyR7ZmlsZW5hbWV9YFxuICB9XG5cbiAgZ2V0Um91dGVyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcm91dGVyXG4gIH1cblxuICBnZXREYiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RiXG4gIH1cblxuICBfZXh0ZW5kSW50ZXJjZXB0b3JzIChmbnMpIHtcbiAgICByZXR1cm4gdGhpcy5faW50ZXJjZXB0b3JzLmNvbmNhdChmbnMpXG4gIH1cblxuICAvLyBmbjogRXhwcmVzcyByb3V0ZSBmdW5jdGlvbiAoaS5lLiAocmVxLCByZXMsIG5leHQpID0+IC4uLilcbiAgLy8gICAgIHdoaWNoIHdpbGwgYmUgY2FsbGVkIGJlZm9yZSBhbnkgb2YgR0VUL1BPU1QgZGVmaW5lZCBpbiB0aGUgY2xhc3MgaXMgY2FsbGVkLlxuICBhZGRJbnRlcmNlcHRvciAoZm5zKSB7XG4gICAgLy8gbG9nLnZlcmJvc2UodGhpcy5nZXRUYWcoKSwgJ2FkZEludGVyY2VwdG9yKCk6IHRoaXMuX2ludGVyY2VwdG9ycy5sZW5ndGg9JyArIHRoaXMuX2ludGVyY2VwdG9ycy5sZW5ndGgpXG4gICAgdGhpcy5faW50ZXJjZXB0b3JzID0gdGhpcy5fZXh0ZW5kSW50ZXJjZXB0b3JzKGZucylcbiAgfVxuXG4gIHJvdXRlR2V0IChwYXRoLCAuLi5mbnMpIHtcbiAgICB0aGlzLl9zdWJSb3V0ZXIuZ2V0KHRoaXMuZ2V0TW91bnRQYXRoKHBhdGgpLCB0aGlzLl9leHRlbmRJbnRlcmNlcHRvcnMoZm5zKSlcbiAgfVxuXG4gIHJvdXRlUG9zdCAocGF0aCwgLi4uZm5zKSB7XG4gICAgdGhpcy5fc3ViUm91dGVyLnBvc3QodGhpcy5nZXRNb3VudFBhdGgocGF0aCksIHRoaXMuX2V4dGVuZEludGVyY2VwdG9ycyhmbnMpKVxuICB9XG5cbiAgcm91dGVVc2UgKHBhdGgsIC4uLmZucykge1xuICAgIHRoaXMuX3N1YlJvdXRlci51c2UodGhpcy5nZXRNb3VudFBhdGgocGF0aCksIHRoaXMuX2V4dGVuZEludGVyY2VwdG9ycyhmbnMpKVxuICB9XG5cbiAgLy8gTGlrZSByb3V0ZVVzZSwgYnV0IGRvZXNuJ3QgcHJlcGVuZCB0aGUgcGF0aCB3aXRoIGhhc2hcbiAgcm91dGVIYXNobGVzc1VzZSAoLi4uZm5zKSB7XG4gICAgdGhpcy5fcm91dGVyLnVzZSh0aGlzLl9leHRlbmRJbnRlcmNlcHRvcnMoZm5zKSlcbiAgfVxuXG4gIC8vIE51c2FudGFyYS1jbG91ZCBob3N0aW5nIGlzIG9mIGZvcm1hdDpcbiAgLy8gW3VzZXJuYW1lXS5udXNhbnRhcmEtY2xvdWQuY29tL1tzaXRlbmFtZV1cbiAgLy8gTW91bnQgcGF0aCBpcyB0byBhY29tbW9kYXRlIFtzaXRlbmFtZV1cbiAgZ2V0TW91bnRQYXRoIChzdHJQYXRoKSB7XG4gICAgLy8gcmV0dXJuIHBhdGguam9pbignLzpoYXNoJywgc3RyUGF0aCB8fCAnJylcbiAgICByZXR1cm4gc3RyUGF0aCB8fCAnJ1xuICAgIC8vIHJldHVybiBwYXRoLmpvaW4oJy8nKVxuICB9XG5cbiAgZ2V0VGFnICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbG9nVGFnXG4gIH1cblxuICBnZXRTaWRlYmFyICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCYXNlQ29udHJvbGxlclxuIl19
