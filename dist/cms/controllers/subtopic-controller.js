"use strict";const path=require("path"),Promise=require("bluebird"),course_service_1=require("../../services/course-service"),exercise_generator_1=require("../../lib/exercise_generator/exercise-generator"),log=require("npmlog"),marked=require("marked"),BaseController=require(path.join(__dirname,"base-controller")),ImageService=require(path.join(__dirname,"../../services/image-service")),PathFormatter=require(path.join(__dirname,"../../lib/path-formatter")),VideoService=require(path.join(__dirname,"../../services/video-service")),AppConfig=require(path.join(__dirname,"../../app-config")),TAG="SubtopicController";class SubtopicController extends BaseController{constructor(e){super(e);const t=new VideoService(this.getDb().sequelize,this.getDb().models),s=new ImageService(this.getDb().sequelize,this.getDb().models);function a(e,t,s){t.setTimeout(48e4),s()}this.addInterceptor((e,t,s)=>{log.verbose(TAG,"SubtopicController: req.path="+e.path),t.locals.site=e.site,t.locals.user=e.user,t.locals.marked=marked,s()}),this.routeGet("/subtopic/:id",(e,t,s)=>{log.verbose(TAG,"subtopic/[id]/GET");const a=e.params.id;Promise.join(course_service_1.default.read({modelName:"Subtopic",searchClause:{id:a}}),course_service_1.default.getExercises(a)).spread((e,a)=>e.status&&e.data?(t.locals.subtopic=e.data[0],t.locals.exercises=a.data||[],t.locals.subtopicData=t.locals.subtopic.data?JSON.parse(t.locals.subtopic.data):{},course_service_1.default.read({modelName:"Topic",searchClause:{id:t.locals.subtopic.topicId}}).then(e=>{e.status&&e.data?(t.locals.topic=e.data[0],t.render("subtopic")):s()})):s()).catch(e=>{s(e)})}),this.routePost("/subtopic/:id/submit",(e,t,s)=>{log.verbose(this.getTag(),"req.body="+JSON.stringify(e.body));const a=e.params.id;let r=Object.keys(e.body||{}),o=[],i=[];r.forEach(t=>{if(t.startsWith("new-exercise")&&o.push({subtopicId:a,data:e.body[t],frontendKey:t}),t.startsWith("exercise-")){const s=t.split("-")[1];i.push({subtopicId:a,id:s,data:e.body[t]})}});const c=course_service_1.default.update({modelName:"Subtopic",data:{id:a,data:JSON.stringify(e.body.subtopicData)}}),d=Promise.map(o,e=>course_service_1.default.create({modelName:"Exercise",data:e})),u=Promise.map(i,e=>course_service_1.default.update({modelName:"Exercise",data:e}));log.verbose(this.getTag(),`newExercises = ${JSON.stringify(o)}`),log.verbose(this.getTag(),`existingExercises = ${JSON.stringify(i)}`),Promise.join(c,d,u).spread((e,s,a)=>{if(e.status){let e={newExerciseIds:{}},r=!0,c=null;o.length&&(r=s.reduce((t,s,a)=>{c=!1===s.status?s.errMessage:c;const r=o[a].frontendKey;return e.newExerciseIds[r]=s.data.id,t&&s.status},r)),i.length&&(r=a.reduce((e,t)=>(c=!1===t.status?t.errMessage:c,e&&t.status),r)),t.send(Object.assign({status:r,data:e},c&&{errMessage:c}))}else t.send({status:!1,errMessage:e.errMessage})})}),this.routePost("/generateExercise",(e,t,s)=>{let a=e.body.code;try{let e=exercise_generator_1.default.getExerciseSolver(a),s=e.generateQuestions("quantity");Promise.map(s,t=>e.formatQuestion(t.knowns).then(e=>({question:e,answer:t.unknowns}))).then(e=>{t.json({status:!0,data:e})}).catch(e=>{t.json({status:!1,errMessage:e.message||e})})}catch(e){t.json({status:!1,errMessage:e.message||e})}}),this.routePost("/subtopic/:id/videoUpload",a,(e,s,a)=>{log.verbose(TAG,"videoUpload.POST(): req.path="+e.path);const r=e.params.id;VideoService.getUploadMiddleware()(e,s,o=>{o?s.json({status:!1,errMessage:o.message}):t.uploadAndSaveVideoToDB(e.file.filename,r).then(e=>{s.json(e)}).catch(e=>{a(e)})})}),this.routeGet("/subtopic/:id/video",(e,s,a)=>{const r=e.params.id;t.getVideo(r).then(e=>{s.json(e)}).catch(e=>{a(e)})}),this.routeGet("/subtopic/images",(e,t,a)=>{log.verbose(TAG,`req.path = ${e.path}`),s.getImages().then(e=>e.status?t.json({status:!0,data:e.data}):t.json({status:!1})).catch(e=>{a(e)})}),this.routePost("/subtopic/images/add",a,(e,t,a)=>{log.verbose(TAG,`req.path = ${e.path}`),ImageService.uploadImageMiddleware()(e,t,r=>{r?t.json({status:!1,errMessage:r.message}):s.uploadAndSaveImageToDB(e.file.filename).then(e=>{e.status?t.json({status:!0,data:{url:super.rootifyPath(AppConfig.IMAGE_MOUNT_PATH+e.data.filename),public_id:e.data.filename,originalName:e.data.filename,created_at:e.data.filename.split("_")[0]}}):t.json({status:!0,data:{}})}).catch(e=>{console.error(e),a(e)})})}),this.routePost("/subtopic/images/delete",(e,t,a)=>{log.verbose(TAG,`req.path = ${e.path}`),s.deleteImage(e.query.publicId).then(e=>{t.json(e)}).catch(e=>{a(e)})})}getRouter(){return this._router}}module.exports=SubtopicController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
