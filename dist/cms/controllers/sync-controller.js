const path=require("path"),log=require("npmlog"),Promise=require("bluebird"),moment=require("moment-timezone"),BaseController=require(path.join(__dirname,"base-controller")),AppConfig=require(path.join(__dirname,"../../app-config"));var SyncService=require(path.join(__dirname,"../../services/sync-client-service"));const TAG="SyncController";class SyncController extends BaseController{constructor(e){super(e);const t=new SyncService(this.getDb().sequelize,this.getDb().models);this.addInterceptor((e,t,s)=>{log.verbose(TAG,"SyncController: req.path="+e.path),s()}),this.routeGet("/synchronization",(e,t,s)=>{AppConfig.CLOUD_SERVER?t.status(403).send("This page can only be accessed by local server!"):t.render("sync-management")}),this.routeGet("/synchronization/histories",(e,s,r)=>{t.getSyncHistories().then(e=>{s.json(e)}).catch(r)}),this.routePost("/synchronization/start",(e,s,r)=>{log.verbose(TAG,"syncController:GET(): HOMEPAGE"),t.isServerReadyToSync().then(e=>{if(e.status){const r=moment.tz(e.data.lastSync,"Asia/Jakarta").utc().format("YYYY-MM-DD HH:mm:ss"),n=moment.utc().format("YYYY-MM-DD HH:mm:ss");return log.verbose(TAG,"synchronization/start.POST: startTime="+r),log.verbose(TAG,"synchronization/start.POST: endTime="+n),t.findAllUser().then(e=>{if(e.status){const o=e.data;return Promise.map(o,e=>Promise.join(t.findAnalytics(e.id,r,n),t.findSubmittedGeneratedExercises(e.id,r,n),t.findSubmittedGeneratedTopicExercises(e.id,r,n),t.findWatchedVideos(e.id,r,n)).spread((t,s,r,n)=>({user:e,analytics:t.status?t.data:[],submittedGeneratedExercises:s.status?s.data:[],submittedGeneratedTopicExercises:r.status?r.data:[],watchedVideos:n.status?n.data:[]}))).then(e=>(log.verbose(TAG,"syncController.GET(): processedData="+JSON.stringify(e)),t.sendData(e,n).then(e=>{s.json(e)})))}s.json(e)})}s.json(e)}).catch(e=>{r(e)})})}getRouter(){return this._router}}module.exports=SyncController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
