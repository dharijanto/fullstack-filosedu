var path=require("path"),LocalStrategy=require("passport-local").Strategy,log=require("npmlog"),passport=require("passport"),Promise=require("bluebird"),UserService=require(path.join(__dirname,"../services/user-service"));const TAG="PassportManager",APP_LOGIN="app_login",APP_REGISTER="app_register";class PassportManager{initialize(){return new Promise((e,s)=>{passport.use(APP_LOGIN,new LocalStrategy({passReqToCallback:!0},function(e,s,r,t){const a=e.body.schoolId;log.info(TAG,"APP_LOGIN: req.site.id="+e.site.id),new UserService(e.sequelize,e.models).login({username:s,password:r,schoolId:a}).then(s=>{if(s.status){const r=s.user;r.siteId=e.site.id,t(null,r)}else t(null,!1,{message:s.errMessage,errCode:s.errCode})}).catch(e=>{t(e)})})),passport.use(APP_REGISTER,new LocalStrategy({passReqToCallback:!0},function(e,s,r,t){log.info(TAG,"passport.app_register()"),new UserService(e.sequelize,e.models).register(e.body).then(s=>{if(s.status){const r=s.user;r.siteId=e.site.id,t(null,r)}else t(null,!1,{message:s.errMessage})}).catch(e=>{log.error(TAG,e),t(null,!1,{message:"Internal error"})})})),e()})}authAppLogin(e){return passport.authenticate(APP_LOGIN,e)}authAppRegistration(e){return passport.authenticate(APP_REGISTER,e)}}const instance=new PassportManager;module.exports=instance;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9saWIvcGFzc3BvcnQtbWFuYWdlci5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIkxvY2FsU3RyYXRlZ3kiLCJTdHJhdGVneSIsImxvZyIsInBhc3Nwb3J0IiwiUHJvbWlzZSIsIlVzZXJTZXJ2aWNlIiwiam9pbiIsIl9fZGlybmFtZSIsIlRBRyIsIkFQUF9MT0dJTiIsIkFQUF9SRUdJU1RFUiIsIlBhc3Nwb3J0TWFuYWdlciIsIltvYmplY3QgT2JqZWN0XSIsInJlc29sdmUiLCJyZWplY3QiLCJ1c2UiLCJwYXNzUmVxVG9DYWxsYmFjayIsInJlcSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJjYiIsInNjaG9vbElkIiwiYm9keSIsImluZm8iLCJzaXRlIiwiaWQiLCJzZXF1ZWxpemUiLCJtb2RlbHMiLCJsb2dpbiIsInRoZW4iLCJyZXNwIiwic3RhdHVzIiwidXNlciIsInNpdGVJZCIsIm1lc3NhZ2UiLCJlcnJNZXNzYWdlIiwiZXJyQ29kZSIsImNhdGNoIiwiZXJyIiwicmVnaXN0ZXIiLCJlcnJvciIsIm9wdGlvbiIsImF1dGhlbnRpY2F0ZSIsImluc3RhbmNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsS0FBT0MsUUFBUSxRQUVmQyxjQUFnQkQsUUFBUSxrQkFBa0JFLFNBQzFDQyxJQUFNSCxRQUFRLFVBQ2RJLFNBQVdKLFFBQVEsWUFDbkJLLFFBQVVMLFFBQVEsWUFFbEJNLFlBQWNOLFFBQVFELEtBQUtRLEtBQUtDLFVBQVcsNkJBRS9DLE1BQU1DLElBQU0sa0JBQ05DLFVBQVksWUFDWkMsYUFBZSxxQkFHckJDLGdCQUNFQyxhQUNFLE9BQU8sSUFBSVIsUUFBUSxDQUFDUyxFQUFTQyxLQUUzQlgsU0FBU1ksSUFBSU4sVUFBVyxJQUFJVCxlQUFlZ0IsbUJBQW1CLEdBQzVELFNBQVVDLEVBQUtDLEVBQVVDLEVBQVVDLEdBQ2pDLE1BQU1DLEVBQVdKLEVBQUlLLEtBQUtELFNBQzFCbkIsSUFBSXFCLEtBQUtmLElBQUssMEJBQTRCUyxFQUFJTyxLQUFLQyxJQUMvQixJQUFJcEIsWUFBWVksRUFBSVMsVUFBV1QsRUFBSVUsUUFDM0NDLE9BQU9WLFNBQUFBLEVBQVVDLFNBQUFBLEVBQVVFLFNBQUFBLElBQVdRLEtBQUtDLElBQ3JELEdBQUlBLEVBQUtDLE9BQVEsQ0FDZixNQUFNQyxFQUFPRixFQUFLRSxLQUNsQkEsRUFBS0MsT0FBU2hCLEVBQUlPLEtBQUtDLEdBQ3ZCTCxFQUFHLEtBQU1ZLFFBRVRaLEVBQUcsTUFBTSxHQUFRYyxRQUFTSixFQUFLSyxXQUFZQyxRQUFTTixFQUFLTSxZQUUxREMsTUFBTUMsSUFDUGxCLEVBQUdrQixRQUtUbkMsU0FBU1ksSUFBSUwsYUFBYyxJQUFJVixlQUFlZ0IsbUJBQW1CLEdBQy9ELFNBQVVDLEVBQUtDLEVBQVVDLEVBQVVDLEdBQ2pDbEIsSUFBSXFCLEtBQUtmLElBQUssMkJBQ00sSUFBSUgsWUFBWVksRUFBSVMsVUFBV1QsRUFBSVUsUUFDM0NZLFNBQVN0QixFQUFJSyxNQUFNTyxLQUFLQyxJQUNsQyxHQUFJQSxFQUFLQyxPQUFRLENBQ2YsTUFBTUMsRUFBT0YsRUFBS0UsS0FDbEJBLEVBQUtDLE9BQVNoQixFQUFJTyxLQUFLQyxHQUN2QkwsRUFBRyxLQUFNWSxRQUVUWixFQUFHLE1BQU0sR0FBUWMsUUFBU0osRUFBS0ssZUFFaENFLE1BQU1DLElBQ1BwQyxJQUFJc0MsTUFBTWhDLElBQUs4QixHQUNmbEIsRUFBRyxNQUFNLEdBQVFjLFFBQVMsd0JBSWhDckIsTUFJSkQsYUFBYzZCLEdBQ1osT0FBT3RDLFNBQVN1QyxhQUFhakMsVUFBV2dDLEdBRzFDN0Isb0JBQXFCNkIsR0FDbkIsT0FBT3RDLFNBQVN1QyxhQUFhaEMsYUFBYytCLElBSS9DLE1BQU1FLFNBQVcsSUFBSWhDLGdCQUNyQmlDLE9BQU9DLFFBQVVGIiwiZmlsZSI6ImxpYi9wYXNzcG9ydC1tYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJylcblxudmFyIExvY2FsU3RyYXRlZ3kgPSByZXF1aXJlKCdwYXNzcG9ydC1sb2NhbCcpLlN0cmF0ZWd5XG52YXIgbG9nID0gcmVxdWlyZSgnbnBtbG9nJylcbnZhciBwYXNzcG9ydCA9IHJlcXVpcmUoJ3Bhc3Nwb3J0JylcbnZhciBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKVxuXG52YXIgVXNlclNlcnZpY2UgPSByZXF1aXJlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9zZXJ2aWNlcy91c2VyLXNlcnZpY2UnKSlcblxuY29uc3QgVEFHID0gJ1Bhc3Nwb3J0TWFuYWdlcidcbmNvbnN0IEFQUF9MT0dJTiA9ICdhcHBfbG9naW4nXG5jb25zdCBBUFBfUkVHSVNURVIgPSAnYXBwX3JlZ2lzdGVyJ1xuXG4vLyBDb250YWlucyBhbGwgdGhlIGxvZ2ljIHJlbGF0ZWQgdG8gcGFzc3BvcnRcbmNsYXNzIFBhc3Nwb3J0TWFuYWdlciB7XG4gIGluaXRpYWxpemUgKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAvLyBHZW5lcmljIHJldXNhYmxlIHVzZXIgbG9naW5cbiAgICAgIHBhc3Nwb3J0LnVzZShBUFBfTE9HSU4sIG5ldyBMb2NhbFN0cmF0ZWd5KHtwYXNzUmVxVG9DYWxsYmFjazogdHJ1ZX0sXG4gICAgICAgIGZ1bmN0aW9uIChyZXEsIHVzZXJuYW1lLCBwYXNzd29yZCwgY2IpIHtcbiAgICAgICAgICBjb25zdCBzY2hvb2xJZCA9IHJlcS5ib2R5LnNjaG9vbElkXG4gICAgICAgICAgbG9nLmluZm8oVEFHLCAnQVBQX0xPR0lOOiByZXEuc2l0ZS5pZD0nICsgcmVxLnNpdGUuaWQpXG4gICAgICAgICAgY29uc3QgdXNlclNlcnZpY2UgPSBuZXcgVXNlclNlcnZpY2UocmVxLnNlcXVlbGl6ZSwgcmVxLm1vZGVscylcbiAgICAgICAgICB1c2VyU2VydmljZS5sb2dpbih7dXNlcm5hbWUsIHBhc3N3b3JkLCBzY2hvb2xJZH0pLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcC5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgY29uc3QgdXNlciA9IHJlc3AudXNlclxuICAgICAgICAgICAgICB1c2VyLnNpdGVJZCA9IHJlcS5zaXRlLmlkXG4gICAgICAgICAgICAgIGNiKG51bGwsIHVzZXIpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjYihudWxsLCBmYWxzZSwge21lc3NhZ2U6IHJlc3AuZXJyTWVzc2FnZSwgZXJyQ29kZTogcmVzcC5lcnJDb2RlfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgY2IoZXJyKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pKVxuXG4gICAgICAvLyBHZW5lcmljIHJldXNhYmxlIHVzZXIgcmVnaXN0cmF0aW9uXG4gICAgICBwYXNzcG9ydC51c2UoQVBQX1JFR0lTVEVSLCBuZXcgTG9jYWxTdHJhdGVneSh7cGFzc1JlcVRvQ2FsbGJhY2s6IHRydWV9LFxuICAgICAgICBmdW5jdGlvbiAocmVxLCB1c2VybmFtZSwgcGFzc3dvcmQsIGNiKSB7XG4gICAgICAgICAgbG9nLmluZm8oVEFHLCAncGFzc3BvcnQuYXBwX3JlZ2lzdGVyKCknKVxuICAgICAgICAgIGNvbnN0IHVzZXJTZXJ2aWNlID0gbmV3IFVzZXJTZXJ2aWNlKHJlcS5zZXF1ZWxpemUsIHJlcS5tb2RlbHMpXG4gICAgICAgICAgdXNlclNlcnZpY2UucmVnaXN0ZXIocmVxLmJvZHkpLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcC5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgY29uc3QgdXNlciA9IHJlc3AudXNlclxuICAgICAgICAgICAgICB1c2VyLnNpdGVJZCA9IHJlcS5zaXRlLmlkXG4gICAgICAgICAgICAgIGNiKG51bGwsIHVzZXIpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjYihudWxsLCBmYWxzZSwge21lc3NhZ2U6IHJlc3AuZXJyTWVzc2FnZX0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgIGxvZy5lcnJvcihUQUcsIGVycilcbiAgICAgICAgICAgIGNiKG51bGwsIGZhbHNlLCB7bWVzc2FnZTogJ0ludGVybmFsIGVycm9yJ30pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSkpXG5cbiAgICAgIHJlc29sdmUoKVxuICAgIH0pXG4gIH1cblxuICBhdXRoQXBwTG9naW4gKG9wdGlvbikge1xuICAgIHJldHVybiBwYXNzcG9ydC5hdXRoZW50aWNhdGUoQVBQX0xPR0lOLCBvcHRpb24pXG4gIH1cblxuICBhdXRoQXBwUmVnaXN0cmF0aW9uIChvcHRpb24pIHtcbiAgICByZXR1cm4gcGFzc3BvcnQuYXV0aGVudGljYXRlKEFQUF9SRUdJU1RFUiwgb3B0aW9uKVxuICB9XG59XG5cbmNvbnN0IGluc3RhbmNlID0gbmV3IFBhc3Nwb3J0TWFuYWdlcigpXG5tb2R1bGUuZXhwb3J0cyA9IGluc3RhbmNlXG4iXX0=
