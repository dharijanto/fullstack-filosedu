"use strict";Object.defineProperty(exports,"__esModule",{value:!0});let path=require("path"),log=require("npmlog"),Utility=require(path.join(__dirname,"../../utils/utility"));const exercise_solver_1=require("./exercise-solver"),TAG="BruteforceSolver";class BruteforceSolver extends exercise_solver_1.default{constructor(e){super(e)}structuralCheck(e){if(["quantity","solver","knowns","unknowns","isAnswerFn","printFn"].forEach(r=>{if(!(r in e))throw new Error(`${r} is not found!`)}),!("randomGeneratorFn"in e.solver))throw new Error("randomGeneratorFn is not found!")}_generateQuestions(e){const r=this.question.solver.randomGeneratorFn,n=this.question.solver.isEqualFn,o=this.question.knowns,t=this.question.unknowns,i=this.question.solver.timeout||1e3,s=[];let u=Utility.getTimeInMillis();for(;s.length<e;){if(Utility.getTimeInMillis()-u>i)throw new Error("Timeout limit exceeded!");{let e=r();if(!("knowns"in e&&"unknowns"in e))throw new Error("Random generator function is not correct! Either knowns or unknowns are not generated");o.forEach(r=>{if(!(r in e.knowns))throw new Error("Random generator function is not correct!")}),t.forEach(r=>{if(!(r in e.unknowns))throw new Error("Random generator function is not correct!")}),s.find(r=>n(r,e))||(log.verbose(TAG,`_generatedQuestions(): random=${JSON.stringify(e)}`),s.push(e))}}return log.verbose(TAG,"_generateQuestions(): questions generated in: "+(Utility.getTimeInMillis()-u)+" milliseconds"),s}generateQuestions(e){const r=this.question[e]||0;return this._generateQuestions(r)}}BruteforceSolver.solverName="bruteforce_solver",exports.default=BruteforceSolver;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9saWIvZXhlcmNpc2VfZ2VuZXJhdG9yL2V4ZXJjaXNlX3NvbHZlcnMvYnJ1dGVmb3JjZS1zb2x2ZXIudHMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJsb2ciLCJVdGlsaXR5Iiwiam9pbiIsIl9fZGlybmFtZSIsImV4ZXJjaXNlX3NvbHZlcl8xIiwiVEFHIiwiQnJ1dGVmb3JjZVNvbHZlciIsImRlZmF1bHQiLCJbb2JqZWN0IE9iamVjdF0iLCJxdWVzdGlvbkRhdGEiLCJzdXBlciIsInF1ZXN0aW9uIiwiZm9yRWFjaCIsImtleSIsIkVycm9yIiwic29sdmVyIiwicXVhbnRpdHkiLCJnZXRSYW5kb20iLCJ0aGlzIiwicmFuZG9tR2VuZXJhdG9yRm4iLCJpc0VxdWFsIiwiaXNFcXVhbEZuIiwia25vd25zIiwidW5rbm93bnMiLCJ0aW1lb3V0IiwiZ2VuZXJhdGVkU2V0IiwidHMxIiwiZ2V0VGltZUluTWlsbGlzIiwibGVuZ3RoIiwicmFuZG9tIiwia25vd24iLCJ1bmtub3duIiwiZmluZCIsImdlbmVyYXRlZCIsInZlcmJvc2UiLCJKU09OIiwic3RyaW5naWZ5IiwicHVzaCIsInF1YW50aXR5VmFyaWFibGVOYW1lIiwiX2dlbmVyYXRlUXVlc3Rpb25zIiwic29sdmVyTmFtZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJvRUFBQSxJQUFJQSxLQUFPQyxRQUFRLFFBQ2ZDLElBQU1ELFFBQVEsVUFFZEUsUUFBVUYsUUFBUUQsS0FBS0ksS0FBS0MsVUFBVyx3QkFFM0MsTUFBQUMsa0JBQUFMLFFBQUEscUJBRU1NLElBQU0seUJBd0JaQyx5QkFBOENGLGtCQUFBRyxRQUk1Q0MsWUFBYUMsR0FDWEMsTUFBTUQsR0FHUkQsZ0JBQWlCRyxHQU9mLElBTnNCLFdBQVksU0FBVSxTQUFVLFdBQVksYUFBYyxXQUNuRUMsUUFBUUMsSUFDbkIsS0FBTUEsS0FBT0YsR0FDWCxNQUFNLElBQUlHLFNBQVNELHVCQUdqQixzQkFBdUJGLEVBQVNJLFFBQ3BDLE1BQU0sSUFBSUQsTUFBTSxtQ0FLWk4sbUJBQW9CUSxHQUMxQixNQUFNQyxFQUFZQyxLQUFLUCxTQUFTSSxPQUFPSSxrQkFDakNDLEVBQVVGLEtBQUtQLFNBQVNJLE9BQU9NLFVBQy9CQyxFQUFTSixLQUFLUCxTQUFTVyxPQUN2QkMsRUFBV0wsS0FBS1AsU0FBU1ksU0FDekJDLEVBQVVOLEtBQUtQLFNBQVNJLE9BQU9TLFNBQVcsSUFDMUNDLEtBR04sSUFBSUMsRUFBTXpCLFFBQVEwQixrQkFDbEIsS0FBT0YsRUFBYUcsT0FBU1osR0FBVSxDQUNyQyxHQUFLZixRQUFRMEIsa0JBQW9CRCxFQUFPRixFQUN0QyxNQUFNLElBQUlWLE1BQU0sMkJBQ1gsQ0FFTCxJQUFJZSxFQUFTWixJQUViLEtBQU0sV0FBWVksR0FBYSxhQUFjQSxHQUMzQyxNQUFNLElBQUlmLE1BQU0seUZBRWhCUSxFQUFPVixRQUFRa0IsSUFDYixLQUFNQSxLQUFTRCxFQUFPUCxRQUNwQixNQUFNLElBQUlSLE1BQU0sK0NBR3BCUyxFQUFTWCxRQUFRbUIsSUFDZixLQUFNQSxLQUFXRixFQUFPTixVQUN0QixNQUFNLElBQUlULE1BQU0sK0NBS2pCVyxFQUFhTyxLQUFLQyxHQUFhYixFQUFRYSxFQUFXSixNQUNyRDdCLElBQUlrQyxRQUFRN0IscUNBQXNDOEIsS0FBS0MsVUFBVVAsTUFDakVKLEVBQWFZLEtBQUtSLEtBTXhCLE9BREE3QixJQUFJa0MsUUFBUTdCLElBQUssa0RBQW9ESixRQUFRMEIsa0JBQW9CRCxHQUFPLGlCQUNqR0QsRUFJVGpCLGtCQUFtQjhCLEdBQ2pCLE1BQU10QixFQUFXRSxLQUFLUCxTQUFTMkIsSUFBeUIsRUFDeEQsT0FBT3BCLEtBQUtxQixtQkFBbUJ2QixJQWxFVlYsaUJBQUFrQyxXQUFhLG9CQUR0Q0MsUUFBQWxDLFFBQUFEIiwiZmlsZSI6ImxpYi9leGVyY2lzZV9nZW5lcmF0b3IvZXhlcmNpc2Vfc29sdmVycy9icnV0ZWZvcmNlLXNvbHZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG5sZXQgbG9nID0gcmVxdWlyZSgnbnBtbG9nJylcblxubGV0IFV0aWxpdHkgPSByZXF1aXJlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi91dGlscy91dGlsaXR5JykpXG5pbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gJ2JsdWViaXJkJ1xuaW1wb3J0IEV4ZXJjaXNlU29sdmVyLCB7IFF1YW50aXR5VmFyaWFibGVOYW1lIH0gZnJvbSAnLi9leGVyY2lzZS1zb2x2ZXInXG5cbmNvbnN0IFRBRyA9ICdCcnV0ZWZvcmNlU29sdmVyJ1xuXG5leHBvcnQgaW50ZXJmYWNlIEdlbmVyYXRlZFF1ZXN0aW9uRGF0YSB7XG4gIGtub3duczogeyBba2V5OiBzdHJpbmddOiBhbnl9LFxuICB1bmtub3duczogeyBba2V5OiBzdHJpbmddOiBhbnl9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJ1dGVmb3JjZVF1ZXN0aW9uIHtcbiAgcXVhbnRpdHk6IG51bWJlclxuICBpZGVhbFRpbWVQZXJRdWVzdGlvbjogbnVtYmVyXG4gIHJldmlld1F1YW50aXR5OiBudW1iZXJcbiAgY29tcGV0ZW5jeVF1YW50aXR5PzogbnVtYmVyXG4gIHNvbHZlcjoge1xuICAgIHR5cGU6ICdicnV0ZWZvcmNlX3NvbHZlcicsXG4gICAgcmFuZG9tR2VuZXJhdG9yRm46ICgpID0+IEdlbmVyYXRlZFF1ZXN0aW9uRGF0YSxcbiAgICBpc0VxdWFsRm46ICh1bmtub3duczEsIHVua25vd25zMikgPT4gYm9vbGVhbixcbiAgICB0aW1lb3V0PzogbnVtYmVyXG4gIH1cbiAga25vd25zOiBzdHJpbmdbXVxuICB1bmtub3duczogc3RyaW5nW11cbiAgaXNBbnN3ZXJGbjogKGtub3ducywgdW5rbm93bnMpID0+IGJvb2xlYW5cbiAgcHJpbnRGbjogKGtub3ducykgPT4gc3RyaW5nIHwgUHJvbWlzZTxzdHJpbmc+XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJydXRlZm9yY2VTb2x2ZXIgZXh0ZW5kcyBFeGVyY2lzZVNvbHZlciB7XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgc29sdmVyTmFtZSA9ICdicnV0ZWZvcmNlX3NvbHZlcidcbiAgcHJvdGVjdGVkIHF1ZXN0aW9uOiBCcnV0ZWZvcmNlUXVlc3Rpb25cblxuICBjb25zdHJ1Y3RvciAocXVlc3Rpb25EYXRhKSB7XG4gICAgc3VwZXIocXVlc3Rpb25EYXRhKVxuICB9XG4gIC8vIENoZWNrIGlmIHRoZSBnaXZlbiBxdWVzdGlvbiByZWFsbHkgbWF0Y2hlcyB0aGUgY3JpdGVyaWFcbiAgc3RydWN0dXJhbENoZWNrIChxdWVzdGlvbjogQnJ1dGVmb3JjZVF1ZXN0aW9uKSB7XG4gICAgY29uc3QgcmVxdWlyZWRLZXlzID0gWydxdWFudGl0eScsICdzb2x2ZXInLCAna25vd25zJywgJ3Vua25vd25zJywgJ2lzQW5zd2VyRm4nLCAncHJpbnRGbiddXG4gICAgcmVxdWlyZWRLZXlzLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmICghKGtleSBpbiBxdWVzdGlvbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2tleX0gaXMgbm90IGZvdW5kIWApXG4gICAgICB9XG4gICAgfSlcbiAgICBpZiAoISgncmFuZG9tR2VuZXJhdG9yRm4nIGluIHF1ZXN0aW9uLnNvbHZlcikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncmFuZG9tR2VuZXJhdG9yRm4gaXMgbm90IGZvdW5kIScpXG4gICAgfVxuICAgIC8vIFRPRE86IENoZWNrIHRoZSB0eXBlcyBvZiBlYWNoIG9mIHRoZSB2YWx1ZXNcbiAgfVxuXG4gIHByaXZhdGUgX2dlbmVyYXRlUXVlc3Rpb25zIChxdWFudGl0eSk6IEdlbmVyYXRlZFF1ZXN0aW9uRGF0YVtdIHtcbiAgICBjb25zdCBnZXRSYW5kb20gPSB0aGlzLnF1ZXN0aW9uLnNvbHZlci5yYW5kb21HZW5lcmF0b3JGblxuICAgIGNvbnN0IGlzRXF1YWwgPSB0aGlzLnF1ZXN0aW9uLnNvbHZlci5pc0VxdWFsRm5cbiAgICBjb25zdCBrbm93bnMgPSB0aGlzLnF1ZXN0aW9uLmtub3duc1xuICAgIGNvbnN0IHVua25vd25zID0gdGhpcy5xdWVzdGlvbi51bmtub3duc1xuICAgIGNvbnN0IHRpbWVvdXQgPSB0aGlzLnF1ZXN0aW9uLnNvbHZlci50aW1lb3V0IHx8IDEwMDAgLy8gRGVmYXVsdCBleGVyY2lzZSBnZW5lcmF0aW9uIHRpbWVvdXRcbiAgICBjb25zdCBnZW5lcmF0ZWRTZXQ6IEdlbmVyYXRlZFF1ZXN0aW9uRGF0YVtdID0gW11cblxuICAgIC8vIFRpbWVvdXQgY2hlY2tlclxuICAgIGxldCB0czEgPSBVdGlsaXR5LmdldFRpbWVJbk1pbGxpcygpXG4gICAgd2hpbGUgKGdlbmVyYXRlZFNldC5sZW5ndGggPCBxdWFudGl0eSkge1xuICAgICAgaWYgKChVdGlsaXR5LmdldFRpbWVJbk1pbGxpcygpIC0gdHMxKSA+IHRpbWVvdXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaW1lb3V0IGxpbWl0IGV4Y2VlZGVkIScpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBHZW5lcmF0ZWQgcmFuZG9tIGtub3duc1xuICAgICAgICBsZXQgcmFuZG9tID0gZ2V0UmFuZG9tKClcbiAgICAgICAgLy8gTWFrZSBzdXJlIHdoYXQncyBnZW5lcmF0ZWQgaXMgY29ycmVjdFxuICAgICAgICBpZiAoISgna25vd25zJyBpbiByYW5kb20pIHx8ICEoJ3Vua25vd25zJyBpbiByYW5kb20pKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSYW5kb20gZ2VuZXJhdG9yIGZ1bmN0aW9uIGlzIG5vdCBjb3JyZWN0ISBFaXRoZXIga25vd25zIG9yIHVua25vd25zIGFyZSBub3QgZ2VuZXJhdGVkJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBrbm93bnMuZm9yRWFjaChrbm93biA9PiB7XG4gICAgICAgICAgICBpZiAoIShrbm93biBpbiByYW5kb20ua25vd25zKSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFJhbmRvbSBnZW5lcmF0b3IgZnVuY3Rpb24gaXMgbm90IGNvcnJlY3QhYClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIHVua25vd25zLmZvckVhY2godW5rbm93biA9PiB7XG4gICAgICAgICAgICBpZiAoISh1bmtub3duIGluIHJhbmRvbS51bmtub3ducykpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSYW5kb20gZ2VuZXJhdG9yIGZ1bmN0aW9uIGlzIG5vdCBjb3JyZWN0IWApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZ2VuZXJhdGVkU2V0LmZpbmQoZ2VuZXJhdGVkID0+IGlzRXF1YWwoZ2VuZXJhdGVkLCByYW5kb20pKSkge1xuICAgICAgICAgIGxvZy52ZXJib3NlKFRBRywgYF9nZW5lcmF0ZWRRdWVzdGlvbnMoKTogcmFuZG9tPSR7SlNPTi5zdHJpbmdpZnkocmFuZG9tKX1gKVxuICAgICAgICAgIGdlbmVyYXRlZFNldC5wdXNoKHJhbmRvbSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxvZy52ZXJib3NlKFRBRywgJ19nZW5lcmF0ZVF1ZXN0aW9ucygpOiBxdWVzdGlvbnMgZ2VuZXJhdGVkIGluOiAnICsgKFV0aWxpdHkuZ2V0VGltZUluTWlsbGlzKCkgLSB0czEpICsgJyBtaWxsaXNlY29uZHMnKVxuICAgIHJldHVybiBnZW5lcmF0ZWRTZXRcbiAgfVxuXG4gIC8vIEdlbmVyYXRlIHF1ZXN0aW9uIGZvciBzdWItdG9waWMgZXhlcmNpc2VcbiAgZ2VuZXJhdGVRdWVzdGlvbnMgKHF1YW50aXR5VmFyaWFibGVOYW1lOiBRdWFudGl0eVZhcmlhYmxlTmFtZSk6IEdlbmVyYXRlZFF1ZXN0aW9uRGF0YVtdIHtcbiAgICBjb25zdCBxdWFudGl0eSA9IHRoaXMucXVlc3Rpb25bcXVhbnRpdHlWYXJpYWJsZU5hbWVdIHx8IDBcbiAgICByZXR1cm4gdGhpcy5fZ2VuZXJhdGVRdWVzdGlvbnMocXVhbnRpdHkpXG4gIH1cbn1cbiJdfQ==
