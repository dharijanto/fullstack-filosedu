"use strict";Object.defineProperty(exports,"__esModule",{value:!0});let path=require("path"),log=require("npmlog"),_=require("lodash"),Utility=require(path.join(__dirname,"../../utils/utility"));const exercise_solver_1=require("./exercise-solver"),TAG="BruteforceSolver";class BruteforceSolver extends exercise_solver_1.default{structuralCheck(e){if(["quantity","solver","knowns","unknowns","isAnswerFn","printFn"].forEach(n=>{if(!(n in e))throw new Error(`${n} is not found!`)}),!("randomGeneratorFn"in e.solver))throw new Error("randomGeneratorFn is not found!")}_generateQuestions(e){const n=this.question.solver.randomGeneratorFn,r=this.question.solver.isEqualFn,t=this.question.knowns,o=this.question.unknowns,i=this.question.solver.timeout||1e3,s=[];let u=Utility.getTimeInMillis();for(;s.length<e;){if(Utility.getTimeInMillis()-u>i)throw new Error("Timeout limit exceeded!");{let e=n();if(!("knowns"in e&&"unknowns"in e))throw new Error("Random generator function is not correct! Either knowns or unknowns are not generated");t.forEach(n=>{if(!(n in e.knowns))throw new Error("Random generator function is not correct! Some knowns are not generated")}),o.forEach(n=>{if(!(n in e.unknowns))throw new Error("Random generator function is not correct! Some unknowns are not generated")}),s.find(n=>r(n,e))||(log.verbose(TAG,`_generatedQuestions(): random=${JSON.stringify(e)}`),s.push(e))}}return log.verbose(TAG,"_generateQuestions(): questions generated in: "+(Utility.getTimeInMillis()-u)+" milliseconds"),s}generateQuestions(){const e=this.question.quantity||0;return this._generateQuestions(e)}generateTopicQuestions(){const e=this.question.reviewQuantity||0;return this._generateQuestions(e)}}exports.BruteforceSolver=BruteforceSolver,module.exports={name:"bruteforce_solver",class:BruteforceSolver};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9saWIvZXhlcmNpc2VfZ2VuZXJhdG9yL2V4ZXJjaXNlX3NvbHZlcnMvYnJ1dGVmb3JjZTBzb2x2ZXIudHMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJsb2ciLCJfIiwiVXRpbGl0eSIsImpvaW4iLCJfX2Rpcm5hbWUiLCJleGVyY2lzZV9zb2x2ZXJfMSIsIlRBRyIsIkJydXRlZm9yY2VTb2x2ZXIiLCJkZWZhdWx0IiwiW29iamVjdCBPYmplY3RdIiwicXVlc3Rpb24iLCJmb3JFYWNoIiwia2V5IiwiRXJyb3IiLCJzb2x2ZXIiLCJxdWFudGl0eSIsImdldFJhbmRvbSIsInRoaXMiLCJyYW5kb21HZW5lcmF0b3JGbiIsImlzRXF1YWwiLCJpc0VxdWFsRm4iLCJrbm93bnMiLCJ1bmtub3ducyIsInRpbWVvdXQiLCJnZW5lcmF0ZWRTZXQiLCJ0czEiLCJnZXRUaW1lSW5NaWxsaXMiLCJsZW5ndGgiLCJyYW5kb20iLCJrbm93biIsInVua25vd24iLCJmaW5kIiwiZ2VuZXJhdGVkIiwidmVyYm9zZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJwdXNoIiwiX2dlbmVyYXRlUXVlc3Rpb25zIiwicmV2aWV3UXVhbnRpdHkiLCJleHBvcnRzIiwibW9kdWxlIiwibmFtZSIsImNsYXNzIl0sIm1hcHBpbmdzIjoib0VBQUEsSUFBSUEsS0FBT0MsUUFBUSxRQUNmQyxJQUFNRCxRQUFRLFVBQ2JFLEVBQUlGLFFBQVEsVUFFYkcsUUFBVUgsUUFBUUQsS0FBS0ssS0FBS0MsVUFBVyx3QkFDM0MsTUFBQUMsa0JBQUFOLFFBQUEscUJBRU1PLElBQU0seUJBbUJaQyx5QkFBc0NGLGtCQUFBRyxRQUVwQ0MsZ0JBQWlCQyxHQU9mLElBTnNCLFdBQVksU0FBVSxTQUFVLFdBQVksYUFBYyxXQUNuRUMsUUFBUUMsSUFDbkIsS0FBTUEsS0FBT0YsR0FDWCxNQUFNLElBQUlHLFNBQVNELHVCQUdqQixzQkFBdUJGLEVBQVNJLFFBQ3BDLE1BQU0sSUFBSUQsTUFBTSxtQ0FLWkosbUJBQW9CTSxHQUMxQixNQUFNQyxFQUFZQyxLQUFLUCxTQUFTSSxPQUFPSSxrQkFDakNDLEVBQVVGLEtBQUtQLFNBQVNJLE9BQU9NLFVBQy9CQyxFQUFTSixLQUFLUCxTQUFTVyxPQUN2QkMsRUFBV0wsS0FBS1AsU0FBU1ksU0FDekJDLEVBQVVOLEtBQUtQLFNBQVNJLE9BQU9TLFNBQVcsSUFDMUNDLEtBR04sSUFBSUMsRUFBTXZCLFFBQVF3QixrQkFDbEIsS0FBT0YsRUFBYUcsT0FBU1osR0FBVSxDQUNyQyxHQUFLYixRQUFRd0Isa0JBQW9CRCxFQUFPRixFQUN0QyxNQUFNLElBQUlWLE1BQU0sMkJBQ1gsQ0FFTCxJQUFJZSxFQUFTWixJQUViLEtBQU0sV0FBWVksR0FBYSxhQUFjQSxHQUMzQyxNQUFNLElBQUlmLE1BQU0seUZBRWhCUSxFQUFPVixRQUFRa0IsSUFDYixLQUFNQSxLQUFTRCxFQUFPUCxRQUNwQixNQUFNLElBQUlSLE1BQU0sNkVBR3BCUyxFQUFTWCxRQUFRbUIsSUFDZixLQUFNQSxLQUFXRixFQUFPTixVQUN0QixNQUFNLElBQUlULE1BQU0sK0VBS2pCVyxFQUFhTyxLQUFLQyxHQUFhYixFQUFRYSxFQUFXSixNQUNyRDVCLElBQUlpQyxRQUFRM0IscUNBQXNDNEIsS0FBS0MsVUFBVVAsTUFDakVKLEVBQWFZLEtBQUtSLEtBTXhCLE9BREE1QixJQUFJaUMsUUFBUTNCLElBQUssa0RBQW9ESixRQUFRd0Isa0JBQW9CRCxHQUFPLGlCQUNqR0QsRUFLVGYsb0JBQ0UsTUFBTU0sRUFBV0UsS0FBS1AsU0FBU0ssVUFBWSxFQUMzQyxPQUFPRSxLQUFLb0IsbUJBQW1CdEIsR0FHakNOLHlCQUNFLE1BQU1NLEVBQVdFLEtBQUtQLFNBQVM0QixnQkFBa0IsRUFDakQsT0FBT3JCLEtBQUtvQixtQkFBbUJ0QixJQW5FbkN3QixRQUFBaEMsaUJBQUFBLGlCQXVFQWlDLE9BQU9ELFNBQ0xFLEtBQU0sb0JBQ05DLE1BQU9uQyIsImZpbGUiOiJsaWIvZXhlcmNpc2VfZ2VuZXJhdG9yL2V4ZXJjaXNlX3NvbHZlcnMvYnJ1dGVmb3JjZTBzb2x2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxubGV0IGxvZyA9IHJlcXVpcmUoJ25wbWxvZycpXG5sZXQgIF8gPSByZXF1aXJlKCdsb2Rhc2gnKVxuXG5sZXQgVXRpbGl0eSA9IHJlcXVpcmUocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uL3V0aWxzL3V0aWxpdHknKSlcbmltcG9ydCBFeGVyY2lzZVNvbHZlciBmcm9tICcuL2V4ZXJjaXNlLXNvbHZlcidcblxuY29uc3QgVEFHID0gJ0JydXRlZm9yY2VTb2x2ZXInXG5cbmludGVyZmFjZSBCcnV0ZWZvcmNlUXVlc3Rpb24ge1xuICBxdWFudGl0eVxuICBpZGVhbFRpbWVQZXJRdWVzdGlvbj9cbiAgcmV2aWV3UXVhbnRpdHk/XG4gIGNvbXBldGVuY3lRdWFudGl0eT9cbiAgc29sdmVyOiB7XG4gICAgdHlwZTogJ2JydXRlZm9yY2Vfc29sdmVyJyxcbiAgICByYW5kb21HZW5lcmF0b3JGbixcbiAgICBpc0VxdWFsRm4sXG4gICAgdGltZW91dFxuICB9XG4gIGtub3duc1xuICB1bmtub3duc1xuICBpc0Fuc3dlckZuOiAoa25vd25zLCB1bmtub3ducykgPT4gYm9vbGVhblxuICBwcmludEZuOiAoa25vd25zKSA9PiBzdHJpbmcgfCBQcm9taXNlPHN0cmluZz5cbn1cblxuZXhwb3J0IGNsYXNzIEJydXRlZm9yY2VTb2x2ZXIgZXh0ZW5kcyBFeGVyY2lzZVNvbHZlciB7XG4gIC8vIENoZWNrIGlmIHRoZSBnaXZlbiBxdWVzdGlvbiByZWFsbHkgbWF0Y2hlcyB0aGUgY3JpdGVyaWFcbiAgc3RydWN0dXJhbENoZWNrIChxdWVzdGlvbjogQnJ1dGVmb3JjZVF1ZXN0aW9uKSB7XG4gICAgY29uc3QgcmVxdWlyZWRLZXlzID0gWydxdWFudGl0eScsICdzb2x2ZXInLCAna25vd25zJywgJ3Vua25vd25zJywgJ2lzQW5zd2VyRm4nLCAncHJpbnRGbiddXG4gICAgcmVxdWlyZWRLZXlzLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmICghKGtleSBpbiBxdWVzdGlvbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2tleX0gaXMgbm90IGZvdW5kIWApXG4gICAgICB9XG4gICAgfSlcbiAgICBpZiAoISgncmFuZG9tR2VuZXJhdG9yRm4nIGluIHF1ZXN0aW9uLnNvbHZlcikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncmFuZG9tR2VuZXJhdG9yRm4gaXMgbm90IGZvdW5kIScpXG4gICAgfVxuICAgIC8vIFRPRE86IENoZWNrIHRoZSB0eXBlcyBvZiBlYWNoIG9mIHRoZSB2YWx1ZXNcbiAgfVxuXG4gIHByaXZhdGUgX2dlbmVyYXRlUXVlc3Rpb25zIChxdWFudGl0eSkge1xuICAgIGNvbnN0IGdldFJhbmRvbSA9IHRoaXMucXVlc3Rpb24uc29sdmVyLnJhbmRvbUdlbmVyYXRvckZuXG4gICAgY29uc3QgaXNFcXVhbCA9IHRoaXMucXVlc3Rpb24uc29sdmVyLmlzRXF1YWxGblxuICAgIGNvbnN0IGtub3ducyA9IHRoaXMucXVlc3Rpb24ua25vd25zXG4gICAgY29uc3QgdW5rbm93bnMgPSB0aGlzLnF1ZXN0aW9uLnVua25vd25zXG4gICAgY29uc3QgdGltZW91dCA9IHRoaXMucXVlc3Rpb24uc29sdmVyLnRpbWVvdXQgfHwgMTAwMCAvLyBEZWZhdWx0IGV4ZXJjaXNlIGdlbmVyYXRpb24gdGltZW91dFxuICAgIGNvbnN0IGdlbmVyYXRlZFNldCA9IFtdXG5cbiAgICAvLyBUaW1lb3V0IGNoZWNrZXJcbiAgICBsZXQgdHMxID0gVXRpbGl0eS5nZXRUaW1lSW5NaWxsaXMoKVxuICAgIHdoaWxlIChnZW5lcmF0ZWRTZXQubGVuZ3RoIDwgcXVhbnRpdHkpIHtcbiAgICAgIGlmICgoVXRpbGl0eS5nZXRUaW1lSW5NaWxsaXMoKSAtIHRzMSkgPiB0aW1lb3V0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGltZW91dCBsaW1pdCBleGNlZWRlZCEnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gR2VuZXJhdGVkIHJhbmRvbSBrbm93bnNcbiAgICAgICAgbGV0IHJhbmRvbSA9IGdldFJhbmRvbSgpXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB3aGF0J3MgZ2VuZXJhdGVkIGlzIGNvcnJlY3RcbiAgICAgICAgaWYgKCEoJ2tub3ducycgaW4gcmFuZG9tKSB8fCAhKCd1bmtub3ducycgaW4gcmFuZG9tKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmFuZG9tIGdlbmVyYXRvciBmdW5jdGlvbiBpcyBub3QgY29ycmVjdCEgRWl0aGVyIGtub3ducyBvciB1bmtub3ducyBhcmUgbm90IGdlbmVyYXRlZCcpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAga25vd25zLmZvckVhY2goa25vd24gPT4ge1xuICAgICAgICAgICAgaWYgKCEoa25vd24gaW4gcmFuZG9tLmtub3ducykpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSYW5kb20gZ2VuZXJhdG9yIGZ1bmN0aW9uIGlzIG5vdCBjb3JyZWN0ISBTb21lIGtub3ducyBhcmUgbm90IGdlbmVyYXRlZGApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICB1bmtub3ducy5mb3JFYWNoKHVua25vd24gPT4ge1xuICAgICAgICAgICAgaWYgKCEodW5rbm93biBpbiByYW5kb20udW5rbm93bnMpKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUmFuZG9tIGdlbmVyYXRvciBmdW5jdGlvbiBpcyBub3QgY29ycmVjdCEgU29tZSB1bmtub3ducyBhcmUgbm90IGdlbmVyYXRlZGApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZ2VuZXJhdGVkU2V0LmZpbmQoZ2VuZXJhdGVkID0+IGlzRXF1YWwoZ2VuZXJhdGVkLCByYW5kb20pKSkge1xuICAgICAgICAgIGxvZy52ZXJib3NlKFRBRywgYF9nZW5lcmF0ZWRRdWVzdGlvbnMoKTogcmFuZG9tPSR7SlNPTi5zdHJpbmdpZnkocmFuZG9tKX1gKVxuICAgICAgICAgIGdlbmVyYXRlZFNldC5wdXNoKHJhbmRvbSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxvZy52ZXJib3NlKFRBRywgJ19nZW5lcmF0ZVF1ZXN0aW9ucygpOiBxdWVzdGlvbnMgZ2VuZXJhdGVkIGluOiAnICsgKFV0aWxpdHkuZ2V0VGltZUluTWlsbGlzKCkgLSB0czEpICsgJyBtaWxsaXNlY29uZHMnKVxuICAgIHJldHVybiBnZW5lcmF0ZWRTZXRcbiAgfVxuXG4gIC8vIFRPRE86XG4gIC8vIDEuIFRha2UgaW50byBhY2NvdW50IHRoZSB0aW1lb3V0IHNwZWNpZmllZCBpbiB0aGUgZmlsZVxuICBnZW5lcmF0ZVF1ZXN0aW9ucyAoKSB7XG4gICAgY29uc3QgcXVhbnRpdHkgPSB0aGlzLnF1ZXN0aW9uLnF1YW50aXR5IHx8IDBcbiAgICByZXR1cm4gdGhpcy5fZ2VuZXJhdGVRdWVzdGlvbnMocXVhbnRpdHkpXG4gIH1cblxuICBnZW5lcmF0ZVRvcGljUXVlc3Rpb25zICgpIHtcbiAgICBjb25zdCBxdWFudGl0eSA9IHRoaXMucXVlc3Rpb24ucmV2aWV3UXVhbnRpdHkgfHwgMFxuICAgIHJldHVybiB0aGlzLl9nZW5lcmF0ZVF1ZXN0aW9ucyhxdWFudGl0eSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbmFtZTogJ2JydXRlZm9yY2Vfc29sdmVyJyxcbiAgY2xhc3M6IEJydXRlZm9yY2VTb2x2ZXJcbn1cbiJdfQ==
