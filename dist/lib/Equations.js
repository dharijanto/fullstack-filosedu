const math=require("mathjs"),BT=require("./BinaryTree");class Equation{constructor(e,t){this._data=e,this.resolveType=t,this._validate()}_validate(){this._unimplemented()}resolve(){this._unimplemented()}getBuildingEquations(){return this}toString(){this._unimplemented()}isPrimitive(){return!0}_unimplemented(){throw new Error("Not implemented!")}}class Sum extends Equation{_validate(){if(2!==Object.keys(this._data).length)throw new Error("Sum should consists of 2 equations");if(!("eq1"in this._data&&"eq2"in this._data))throw new Error("Sum should have 'eq1' and 'eq2'!")}getBuildingEquations(){return new BT.Node(null,this._data.left,this._data.right)}isPrimitive(){return!1}resolve(){var e=this._data.eq1,t=this._data.eq2;return e.constructor.name===Real.name&&t.constructor.name===Real.name?(console.log("1"),new Real(e.getValue()+t.getValue()).resolve()):e.constructor.name===Fraction.name&&t.constructor.name===Fraction.name?(console.log("2"),new Fraction({num:e.getNum()*t.getDenom()+t.getNum()*e.getDenom(),denom:e.getDenom()*t.getDenom()}).resolve(Real.name)):e.constructor.name===Fraction.name&&t.constructor.name===Real.name?(console.log("3"),t=new Fraction({num:t.getValue(),denom:1}),new Sum(e,t).resolve()):e.constructor.name===Real.name&&t.constructor.name===Fraction.name?(console.log("4"),new Sum(t,e).resolve()):void 0}}class Real extends Equation{_validate(){if("number"!=typeof this._data)throw new Error("Real should consist of an integer")}getValue(){return this._data}toString(){return""+this._data}resolve(){return this._data}}class Fraction extends Equation{_validate(){if(2!==Object.keys(this._data).length)throw new Error("Sum should consist of 2 members");if(!("num"in this._data&&"denom"in this._data))throw new Error("Fraction should consist of 'num' and 'denom'")}getNum(){return this._data.num}getDenom(){return this._data.denom}toString(){return"("+this._data.num+"/"+this._data.denom+")"}resolve(e){return e&&e.name===Real.name?new Real(this._data.num/this._data.denom):this}simplify(){const e=math.gcd(this._data.num,this._data.denom);return new Fraction({num:this._data.num/e,denom:this._data.denom/e})}}module.exports.Equation=Equation,module.exports.Sum=Sum,module.exports.Real=Real,module.exports.Fraction=Fraction;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9saWIvRXF1YXRpb25zLmpzIl0sIm5hbWVzIjpbIm1hdGgiLCJyZXF1aXJlIiwiQlQiLCJFcXVhdGlvbiIsIltvYmplY3QgT2JqZWN0XSIsImRhdGEiLCJyZXNvbHZlVHlwZSIsInRoaXMiLCJfZGF0YSIsIl92YWxpZGF0ZSIsIl91bmltcGxlbWVudGVkIiwiRXJyb3IiLCJTdW0iLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiTm9kZSIsImxlZnQiLCJyaWdodCIsImVxMSIsImVxMiIsImNvbnN0cnVjdG9yIiwibmFtZSIsIlJlYWwiLCJjb25zb2xlIiwibG9nIiwiZ2V0VmFsdWUiLCJyZXNvbHZlIiwiRnJhY3Rpb24iLCJudW0iLCJnZXROdW0iLCJnZXREZW5vbSIsImRlbm9tIiwidHlwZSIsImdjZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEtBQU9DLFFBQVEsVUFDZkMsR0FBS0QsUUFBUSxzQkFPbkJFLFNBQ0VDLFlBQWFDLEVBQU1DLEdBQ2pCQyxLQUFLQyxNQUFRSCxFQUNiRSxLQUFLRCxZQUFjQSxFQUNuQkMsS0FBS0UsWUFHUEwsWUFDRUcsS0FBS0csaUJBR1BOLFVBQ0VHLEtBQUtHLGlCQUdQTix1QkFFRSxPQUFPRyxLQUdUSCxXQUNFRyxLQUFLRyxpQkFJUE4sY0FDRSxPQUFPLEVBR1RBLGlCQUNFLE1BQU0sSUFBSU8sTUFBTSwyQkFLcEJDLFlBQWtCVCxTQUNoQkMsWUFDRSxHQUF1QyxJQUFuQ1MsT0FBT0MsS0FBS1AsS0FBS0MsT0FBT08sT0FDMUIsTUFBTSxJQUFJSixNQUFNLHNDQUVsQixLQUFNLFFBQVNKLEtBQUtDLE9BQVksUUFBU0QsS0FBS0MsT0FDNUMsTUFBTSxJQUFJRyxNQUFNLG9DQUlwQlAsdUJBQ0UsT0FBTyxJQUFJRixHQUFHYyxLQUFLLEtBQU1ULEtBQUtDLE1BQU1TLEtBQU1WLEtBQUtDLE1BQU1VLE9BR3ZEZCxjQUNFLE9BQU8sRUFHVEEsVUFDRSxJQUFJZSxFQUFNWixLQUFLQyxNQUFNVyxJQUNqQkMsRUFBTWIsS0FBS0MsTUFBTVksSUFFckIsT0FBSUQsRUFBSUUsWUFBWUMsT0FBU0MsS0FBS0QsTUFBUUYsRUFBSUMsWUFBWUMsT0FBU0MsS0FBS0QsTUFDdEVFLFFBQVFDLElBQUksS0FDTCxJQUFLRixLQUFLSixFQUFJTyxXQUFhTixFQUFJTSxZQUFhQyxXQUMxQ1IsRUFBSUUsWUFBWUMsT0FBU00sU0FBU04sTUFBUUYsRUFBSUMsWUFBWUMsT0FBU00sU0FBU04sTUFDckZFLFFBQVFDLElBQUksS0FDTCxJQUFLRyxVQUNWQyxJQUFNVixFQUFJVyxTQUFXVixFQUFJVyxXQUFlWCxFQUFJVSxTQUFXWCxFQUFJWSxXQUMzREMsTUFBT2IsRUFBSVksV0FBYVgsRUFBSVcsYUFBY0osUUFBUUosS0FBS0QsT0FDaERILEVBQUlFLFlBQVlDLE9BQVNNLFNBQVNOLE1BQVFGLEVBQUlDLFlBQVlDLE9BQVNDLEtBQUtELE1BQ2pGRSxRQUFRQyxJQUFJLEtBQ1pMLEVBQU0sSUFBSVEsVUFBVUMsSUFBS1QsRUFBSU0sV0FBWU0sTUFBTyxJQUN6QyxJQUFLcEIsSUFBSU8sRUFBS0MsR0FBTU8sV0FDbEJSLEVBQUlFLFlBQVlDLE9BQVNDLEtBQUtELE1BQVFGLEVBQUlDLFlBQVlDLE9BQVNNLFNBQVNOLE1BQ2pGRSxRQUFRQyxJQUFJLEtBQ0wsSUFBS2IsSUFBSVEsRUFBS0QsR0FBTVEsZ0JBRnRCLFNBUVhKLGFBQW1CcEIsU0FDakJDLFlBQ0UsR0FBMEIsaUJBQWZHLEtBQUtDLE1BQ2QsTUFBTSxJQUFJRyxNQUFNLHFDQUtwQlAsV0FDRSxPQUFPRyxLQUFLQyxNQUdkSixXQUNFLE1BQU8sR0FBS0csS0FBS0MsTUFHbkJKLFVBQ0UsT0FBT0csS0FBS0MsYUFJaEJvQixpQkFBdUJ6QixTQUNyQkMsWUFDRSxHQUF1QyxJQUFuQ1MsT0FBT0MsS0FBS1AsS0FBS0MsT0FBT08sT0FDMUIsTUFBTSxJQUFJSixNQUFNLG1DQUVsQixLQUFNLFFBQVNKLEtBQUtDLE9BQVksVUFBV0QsS0FBS0MsT0FDOUMsTUFBTSxJQUFJRyxNQUFNLGdEQUlwQlAsU0FDRSxPQUFPRyxLQUFLQyxNQUFNcUIsSUFHcEJ6QixXQUNFLE9BQU9HLEtBQUtDLE1BQU13QixNQUdwQjVCLFdBQ0UsTUFBTyxJQUFNRyxLQUFLQyxNQUFNcUIsSUFBTSxJQUFNdEIsS0FBS0MsTUFBTXdCLE1BQVEsSUFHekQ1QixRQUFTNkIsR0FDUCxPQUFJQSxHQUFRQSxFQUFLWCxPQUFTQyxLQUFLRCxLQUN0QixJQUFJQyxLQUFLaEIsS0FBS0MsTUFBTXFCLElBQU10QixLQUFLQyxNQUFNd0IsT0FFckN6QixLQUlYSCxXQUNFLE1BQU04QixFQUFNbEMsS0FBS2tDLElBQUkzQixLQUFLQyxNQUFNcUIsSUFBS3RCLEtBQUtDLE1BQU13QixPQUNoRCxPQUFPLElBQUlKLFVBQVVDLElBQUt0QixLQUFLQyxNQUFNcUIsSUFBTUssRUFBS0YsTUFBT3pCLEtBQUtDLE1BQU13QixNQUFRRSxLQUk5RUMsT0FBT0MsUUFBUWpDLFNBQVdBLFNBQzFCZ0MsT0FBT0MsUUFBUXhCLElBQU1BLElBQ3JCdUIsT0FBT0MsUUFBUWIsS0FBT0EsS0FDdEJZLE9BQU9DLFFBQVFSLFNBQVdBIiwiZmlsZSI6ImxpYi9FcXVhdGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtYXRoID0gcmVxdWlyZSgnbWF0aGpzJylcbmNvbnN0IEJUID0gcmVxdWlyZSgnLi9CaW5hcnlUcmVlJylcblxuLypcblRPRE86XG4xLiBBZGQgZm9ybWF0dGluZyBsaWJyYXJ5OiB0b0Zvcm1hdHRlZFN0cmluZygpXG4qL1xuXG5jbGFzcyBFcXVhdGlvbiB7XG4gIGNvbnN0cnVjdG9yIChkYXRhLCByZXNvbHZlVHlwZSkge1xuICAgIHRoaXMuX2RhdGEgPSBkYXRhXG4gICAgdGhpcy5yZXNvbHZlVHlwZSA9IHJlc29sdmVUeXBlXG4gICAgdGhpcy5fdmFsaWRhdGUoKVxuICB9XG5cbiAgX3ZhbGlkYXRlICgpIHtcbiAgICB0aGlzLl91bmltcGxlbWVudGVkKClcbiAgfVxuXG4gIHJlc29sdmUgKCkge1xuICAgIHRoaXMuX3VuaW1wbGVtZW50ZWQoKVxuICB9XG5cbiAgZ2V0QnVpbGRpbmdFcXVhdGlvbnMgKCkge1xuICAgIC8vIFByaW1pdGl2ZSByZXR1cm5zIGl0c2VsZlxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICB0b1N0cmluZyAoKSB7XG4gICAgdGhpcy5fdW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvLyBXaGV0aGVyIHRoZSBlcXVhdGlvbiBpcyBwcmltaXRpdmVcbiAgaXNQcmltaXRpdmUgKCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBfdW5pbXBsZW1lbnRlZCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQhJylcbiAgfVxufVxuXG4vLyBuZXcgU3VtKHtlcTE6IG5ldyBSZWFsKDcpLCBlcTI6IG5ldyBGcmFjdGlvbig4KX0sIEZyYWN0aW9uKVxuY2xhc3MgU3VtIGV4dGVuZHMgRXF1YXRpb24ge1xuICBfdmFsaWRhdGUgKCkge1xuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLl9kYXRhKS5sZW5ndGggIT09IDIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3VtIHNob3VsZCBjb25zaXN0cyBvZiAyIGVxdWF0aW9ucycpXG4gICAgfVxuICAgIGlmICghKCdlcTEnIGluIHRoaXMuX2RhdGEpIHx8ICEoJ2VxMicgaW4gdGhpcy5fZGF0YSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlN1bSBzaG91bGQgaGF2ZSAnZXExJyBhbmQgJ2VxMichXCIpXG4gICAgfVxuICB9XG5cbiAgZ2V0QnVpbGRpbmdFcXVhdGlvbnMgKCkge1xuICAgIHJldHVybiBuZXcgQlQuTm9kZShudWxsLCB0aGlzLl9kYXRhLmxlZnQsIHRoaXMuX2RhdGEucmlnaHQpXG4gIH1cblxuICBpc1ByaW1pdGl2ZSAoKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXNvbHZlICgpIHtcbiAgICB2YXIgZXExID0gdGhpcy5fZGF0YS5lcTFcbiAgICB2YXIgZXEyID0gdGhpcy5fZGF0YS5lcTJcblxuICAgIGlmIChlcTEuY29uc3RydWN0b3IubmFtZSA9PT0gUmVhbC5uYW1lICYmIGVxMi5jb25zdHJ1Y3Rvci5uYW1lID09PSBSZWFsLm5hbWUpIHtcbiAgICAgIGNvbnNvbGUubG9nKCcxJylcbiAgICAgIHJldHVybiAobmV3IFJlYWwoZXExLmdldFZhbHVlKCkgKyBlcTIuZ2V0VmFsdWUoKSkpLnJlc29sdmUoKVxuICAgIH0gZWxzZSBpZiAoZXExLmNvbnN0cnVjdG9yLm5hbWUgPT09IEZyYWN0aW9uLm5hbWUgJiYgZXEyLmNvbnN0cnVjdG9yLm5hbWUgPT09IEZyYWN0aW9uLm5hbWUpIHtcbiAgICAgIGNvbnNvbGUubG9nKCcyJylcbiAgICAgIHJldHVybiAobmV3IEZyYWN0aW9uKHtcbiAgICAgICAgbnVtOiAoZXExLmdldE51bSgpICogZXEyLmdldERlbm9tKCkpICsgKGVxMi5nZXROdW0oKSAqIGVxMS5nZXREZW5vbSgpKSxcbiAgICAgICAgZGVub206IGVxMS5nZXREZW5vbSgpICogZXEyLmdldERlbm9tKCl9KSkucmVzb2x2ZShSZWFsLm5hbWUpXG4gICAgfSBlbHNlIGlmIChlcTEuY29uc3RydWN0b3IubmFtZSA9PT0gRnJhY3Rpb24ubmFtZSAmJiBlcTIuY29uc3RydWN0b3IubmFtZSA9PT0gUmVhbC5uYW1lKSB7XG4gICAgICBjb25zb2xlLmxvZygnMycpXG4gICAgICBlcTIgPSBuZXcgRnJhY3Rpb24oe251bTogZXEyLmdldFZhbHVlKCksIGRlbm9tOiAxfSlcbiAgICAgIHJldHVybiAobmV3IFN1bShlcTEsIGVxMikpLnJlc29sdmUoKVxuICAgIH0gZWxzZSBpZiAoZXExLmNvbnN0cnVjdG9yLm5hbWUgPT09IFJlYWwubmFtZSAmJiBlcTIuY29uc3RydWN0b3IubmFtZSA9PT0gRnJhY3Rpb24ubmFtZSkge1xuICAgICAgY29uc29sZS5sb2coJzQnKVxuICAgICAgcmV0dXJuIChuZXcgU3VtKGVxMiwgZXExKSkucmVzb2x2ZSgpXG4gICAgfVxuICB9XG59XG5cbi8vIG5ldyBSZWFsKDUpXG5jbGFzcyBSZWFsIGV4dGVuZHMgRXF1YXRpb24ge1xuICBfdmFsaWRhdGUgKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fZGF0YSAhPT0gJ251bWJlcicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVhbCBzaG91bGQgY29uc2lzdCBvZiBhbiBpbnRlZ2VyJylcbiAgICB9XG4gICAgLy8gVE9ETzogRW5zdXJlIGRhdGEgaXMgcmVhbGx5IHJlYWwgbnVtYmVyLCBiZWNhdXNlICdudW1iZXInIGNhbiBiZSBmbG9hdCBvciBpbnRlZ2VyXG4gIH1cblxuICBnZXRWYWx1ZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGFcbiAgfVxuXG4gIHRvU3RyaW5nICgpIHtcbiAgICByZXR1cm4gJycgKyB0aGlzLl9kYXRhXG4gIH1cblxuICByZXNvbHZlICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YVxuICB9XG59XG5cbmNsYXNzIEZyYWN0aW9uIGV4dGVuZHMgRXF1YXRpb24ge1xuICBfdmFsaWRhdGUgKCkge1xuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLl9kYXRhKS5sZW5ndGggIT09IDIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3VtIHNob3VsZCBjb25zaXN0IG9mIDIgbWVtYmVycycpXG4gICAgfVxuICAgIGlmICghKCdudW0nIGluIHRoaXMuX2RhdGEpIHx8ICEoJ2Rlbm9tJyBpbiB0aGlzLl9kYXRhKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRnJhY3Rpb24gc2hvdWxkIGNvbnNpc3Qgb2YgJ251bScgYW5kICdkZW5vbSdcIilcbiAgICB9XG4gIH1cblxuICBnZXROdW0gKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhLm51bVxuICB9XG5cbiAgZ2V0RGVub20gKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhLmRlbm9tXG4gIH1cblxuICB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuICcoJyArIHRoaXMuX2RhdGEubnVtICsgJy8nICsgdGhpcy5fZGF0YS5kZW5vbSArICcpJ1xuICB9XG5cbiAgcmVzb2x2ZSAodHlwZSkge1xuICAgIGlmICh0eXBlICYmIHR5cGUubmFtZSA9PT0gUmVhbC5uYW1lKSB7XG4gICAgICByZXR1cm4gbmV3IFJlYWwodGhpcy5fZGF0YS5udW0gLyB0aGlzLl9kYXRhLmRlbm9tKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgfVxuXG4gIHNpbXBsaWZ5ICgpIHtcbiAgICBjb25zdCBnY2QgPSBtYXRoLmdjZCh0aGlzLl9kYXRhLm51bSwgdGhpcy5fZGF0YS5kZW5vbSlcbiAgICByZXR1cm4gbmV3IEZyYWN0aW9uKHtudW06IHRoaXMuX2RhdGEubnVtIC8gZ2NkLCBkZW5vbTogdGhpcy5fZGF0YS5kZW5vbSAvIGdjZH0pXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMuRXF1YXRpb24gPSBFcXVhdGlvblxubW9kdWxlLmV4cG9ydHMuU3VtID0gU3VtXG5tb2R1bGUuZXhwb3J0cy5SZWFsID0gUmVhbFxubW9kdWxlLmV4cG9ydHMuRnJhY3Rpb24gPSBGcmFjdGlvbiJdfQ==
