var https=require("https"),fs=require("fs"),path=require("path");const Sequelize=require("sequelize");var Promise=require("bluebird"),AppConfig=require(path.join(__dirname,"../app-config")),VideoService=require(path.join(__dirname,"../services/video-service")),ImageService=require(path.join(__dirname,"../services/image-service")),createSequelizeModel=require(path.join(__dirname,"../db-structure")),sequelize=new Sequelize(AppConfig.SQL_DB,{logging:!1}),models=createSequelizeModel(sequelize,{});const videoService=new VideoService(sequelize,models),imageService=new ImageService(sequelize,models),CONCURRENT_DOWNLOAD=3;var download=function(e,o){return new Promise((r,i)=>(console.log("Downloading: url="+e),fs.access(o,fs.F_CONSTANT_OK,n=>{if(n){var s=fs.createWriteStream(o);https.get(e,function(e){e.pipe(s),s.on("finish",function(){s.close(()=>{r()})})}).on("error",e=>{fs.unlink(o,e=>{console.error(e)}),i(e)})}else console.log("download(): file="+o+" is already existed. Skipped..."),r()})))};function fetchVideoFromS3(){return videoService.getAllVideos().then(e=>{if(e.status){const o=e.data;return console.log(`There are ${o.length} number of videos to download...`),Promise.map(o,e=>download(JSON.parse(e.sourceLink).HD,AppConfig.VIDEO_PATH+"/"+e.filename),{concurrency:CONCURRENT_DOWNLOAD})}return Promise.resolve()}).catch(e=>{console.error(e)})}function fetchImageFromS3(){return imageService.getAllImages().then(e=>{if(e.status){const o=e.data;return console.log(`There are ${o.length} images to download...`),Promise.map(o,e=>download(e.sourceLink,AppConfig.IMAGE_PATH+"/"+e.filename),{concurrency:CONCURRENT_DOWNLOAD})}console.log("No Image Inside DB")}).catch(e=>{console.error(e)})}console.log("Downloading files...."),Promise.join(fetchVideoFromS3(),fetchImageFromS3()).then(e=>{console.log("Finished downloading videos and images!"),sequelize.close()}).catch(e=>{console.error(e)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zY3JpcHRzL3ZpZGVvLWFuZC1pbWFnZXMtc3luYy5qcyJdLCJuYW1lcyI6WyJodHRwcyIsInJlcXVpcmUiLCJmcyIsInBhdGgiLCJTZXF1ZWxpemUiLCJQcm9taXNlIiwiQXBwQ29uZmlnIiwiam9pbiIsIl9fZGlybmFtZSIsIlZpZGVvU2VydmljZSIsIkltYWdlU2VydmljZSIsImNyZWF0ZVNlcXVlbGl6ZU1vZGVsIiwic2VxdWVsaXplIiwiU1FMX0RCIiwibG9nZ2luZyIsIm1vZGVscyIsInZpZGVvU2VydmljZSIsImltYWdlU2VydmljZSIsIkNPTkNVUlJFTlRfRE9XTkxPQUQiLCJkb3dubG9hZCIsInVybCIsImRlc3QiLCJyZXNvbHZlIiwicmVqZWN0IiwiY29uc29sZSIsImxvZyIsImFjY2VzcyIsIkZfQ09OU1RBTlRfT0siLCJlcnIiLCJmaWxlIiwiY3JlYXRlV3JpdGVTdHJlYW0iLCJnZXQiLCJyZXNwb25zZSIsInBpcGUiLCJvbiIsImNsb3NlIiwidW5saW5rIiwiZXJyb3IiLCJmZXRjaFZpZGVvRnJvbVMzIiwiZ2V0QWxsVmlkZW9zIiwidGhlbiIsInJlc3AiLCJzdGF0dXMiLCJ2aWRlb3MiLCJkYXRhIiwibGVuZ3RoIiwibWFwIiwidmlkZW8iLCJKU09OIiwicGFyc2UiLCJzb3VyY2VMaW5rIiwiSEQiLCJWSURFT19QQVRIIiwiZmlsZW5hbWUiLCJjb25jdXJyZW5jeSIsImNhdGNoIiwiZmV0Y2hJbWFnZUZyb21TMyIsImdldEFsbEltYWdlcyIsImltYWdlcyIsImltYWdlIiwiSU1BR0VfUEFUSCJdLCJtYXBwaW5ncyI6IkFBYUEsSUFBSUEsTUFBUUMsUUFBUSxTQUNoQkMsR0FBS0QsUUFBUSxNQUNiRSxLQUFPRixRQUFRLFFBRW5CLE1BQU1HLFVBQVlILFFBQVEsYUFDMUIsSUFBSUksUUFBVUosUUFBUSxZQUVsQkssVUFBWUwsUUFBUUUsS0FBS0ksS0FBS0MsVUFBVyxrQkFDekNDLGFBQWVSLFFBQVFFLEtBQUtJLEtBQUtDLFVBQVcsOEJBQzVDRSxhQUFlVCxRQUFRRSxLQUFLSSxLQUFLQyxVQUFXLDhCQUU1Q0cscUJBQXVCVixRQUFRRSxLQUFLSSxLQUFLQyxVQUFXLG9CQUNwREksVUFBWSxJQUFJUixVQUFVRSxVQUFVTyxRQUFTQyxTQUFTLElBQ3REQyxPQUFTSixxQkFBcUJDLGNBRWxDLE1BQU1JLGFBQWUsSUFBSVAsYUFBYUcsVUFBV0csUUFDM0NFLGFBQWUsSUFBSVAsYUFBYUUsVUFBV0csUUFFM0NHLG9CQUFzQixFQUU1QixJQUFJQyxTQUFXLFNBQVVDLEVBQUtDLEdBQzVCLE9BQU8sSUFBSWhCLFFBQVEsQ0FBQ2lCLEVBQVNDLEtBQzNCQyxRQUFRQyxJQUFJLG9CQUFzQkwsR0FDM0JsQixHQUFHd0IsT0FBT0wsRUFBTW5CLEdBQUd5QixjQUFnQkMsSUFDeEMsR0FBSUEsRUFBSyxDQUNQLElBQUlDLEVBQU8zQixHQUFHNEIsa0JBQWtCVCxHQUNoQ3JCLE1BQU0rQixJQUFJWCxFQUFLLFNBQVVZLEdBQ3ZCQSxFQUFTQyxLQUFLSixHQUNkQSxFQUFLSyxHQUFHLFNBQVUsV0FDaEJMLEVBQUtNLE1BQU0sS0FDVGIsVUFHSFksR0FBRyxRQUFVTixJQUVkMUIsR0FBR2tDLE9BQU9mLEVBQU1PLElBQ2RKLFFBQVFhLE1BQU1ULEtBRWhCTCxFQUFPSyxVQUdUSixRQUFRQyxJQUFJLG9CQUFzQkosRUFBTyxtQ0FDekNDLFNBTVIsU0FBQWdCLG1CQUNFLE9BQU90QixhQUFhdUIsZUFBZUMsS0FBS0MsSUFDdEMsR0FBSUEsRUFBS0MsT0FBUSxDQUNmLE1BQU1DLEVBQVNGLEVBQUtHLEtBRXBCLE9BREFwQixRQUFRQyxpQkFBaUJrQixFQUFPRSwwQ0FDekJ4QyxRQUFReUMsSUFBSUgsRUFBUUksR0FDbEI1QixTQUNMNkIsS0FBS0MsTUFBTUYsRUFBTUcsWUFBWUMsR0FDN0I3QyxVQUFVOEMsV0FBYSxJQUFNTCxFQUFNTSxXQUNuQ0MsWUFBYXBDLHNCQUVqQixPQUFPYixRQUFRaUIsWUFFaEJpQyxNQUFNM0IsSUFDUEosUUFBUWEsTUFBTVQsS0FJbEIsU0FBQTRCLG1CQUNFLE9BQU92QyxhQUFhd0MsZUFBZWpCLEtBQUtDLElBQ3RDLEdBQUlBLEVBQUtDLE9BQVEsQ0FDZixNQUFNZ0IsRUFBU2pCLEVBQUtHLEtBRXBCLE9BREFwQixRQUFRQyxpQkFBaUJpQyxFQUFPYixnQ0FDekJ4QyxRQUFReUMsSUFBSVksRUFBUUMsR0FDbEJ4QyxTQUNMd0MsRUFBTVQsV0FDTjVDLFVBQVVzRCxXQUFhLElBQU1ELEVBQU1OLFdBQ25DQyxZQUFhcEMsc0JBRWpCTSxRQUFRQyxJQUFJLHdCQUViOEIsTUFBTTNCLElBQ1BKLFFBQVFhLE1BQU1ULEtBSWxCSixRQUFRQyxJQUFJLHlCQUNacEIsUUFBUUUsS0FDTitCLG1CQUNBa0Isb0JBQ0FoQixLQUFLQyxJQUNMakIsUUFBUUMsSUFBSSwyQ0FDWmIsVUFBVXVCLFVBQ1RvQixNQUFNM0IsSUFDUEosUUFBUWEsTUFBTVQiLCJmaWxlIjoic2NyaXB0cy92aWRlby1hbmQtaW1hZ2VzLXN5bmMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuVGhpcyBzY3JpcHQgaXMgdXNlZCB0byBzeW5jIGEgbG9jYWwgc2VydmVyJ3MgdmlkZW9zIGFuZCBpbWFnZXNcbndpdGggd2hhdCdzIHNwZWNpZmllZCBpbiB0aGUgZGF0YWJhc2UuIFRoZSBmaWxlcyBhcmUgZG93bmxvYWRlZFxuZnJvbSBTM1xuXG5JbnN0YWxsIGFuZCBjb25maWd1cmUgRmlsb3Mgb24gYSBsb2NhbCBzZXJ2ZXI6XG4xLiBEb3dubG9hZCBzb3VyY2UgY29kZVxuMi4gQ3JlYXRlIGFuZCBjb25maWd1cmUgYXBwLWNvbmZpZy5qcyBiYXNlIG9uIGFwcC1jb25maWdfdGVtcGxhdGUuanNcbjMuIFJlc3RvcmUgZGF0YWJhc2UgZnJvbSBmaWxvc2VkdS1iYWNrdXAgZ2l0XG40LiBSdW4gdGhpcyBzY3JpcHRcblxuKi9cblxudmFyIGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKVxudmFyIGZzID0gcmVxdWlyZSgnZnMnKVxudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJylcblxuY29uc3QgU2VxdWVsaXplID0gcmVxdWlyZSgnc2VxdWVsaXplJylcbnZhciBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKVxuXG52YXIgQXBwQ29uZmlnID0gcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vYXBwLWNvbmZpZycpKVxudmFyIFZpZGVvU2VydmljZSA9IHJlcXVpcmUocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL3NlcnZpY2VzL3ZpZGVvLXNlcnZpY2UnKSlcbnZhciBJbWFnZVNlcnZpY2UgPSByZXF1aXJlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9zZXJ2aWNlcy9pbWFnZS1zZXJ2aWNlJykpXG5cbnZhciBjcmVhdGVTZXF1ZWxpemVNb2RlbCA9IHJlcXVpcmUocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL2RiLXN0cnVjdHVyZScpKVxudmFyIHNlcXVlbGl6ZSA9IG5ldyBTZXF1ZWxpemUoQXBwQ29uZmlnLlNRTF9EQiwge2xvZ2dpbmc6IGZhbHNlfSlcbnZhciBtb2RlbHMgPSBjcmVhdGVTZXF1ZWxpemVNb2RlbChzZXF1ZWxpemUsIHt9KVxuXG5jb25zdCB2aWRlb1NlcnZpY2UgPSBuZXcgVmlkZW9TZXJ2aWNlKHNlcXVlbGl6ZSwgbW9kZWxzKVxuY29uc3QgaW1hZ2VTZXJ2aWNlID0gbmV3IEltYWdlU2VydmljZShzZXF1ZWxpemUsIG1vZGVscylcblxuY29uc3QgQ09OQ1VSUkVOVF9ET1dOTE9BRCA9IDNcblxudmFyIGRvd25sb2FkID0gZnVuY3Rpb24gKHVybCwgZGVzdCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdEb3dubG9hZGluZzogdXJsPScgKyB1cmwpXG4gICAgcmV0dXJuIGZzLmFjY2VzcyhkZXN0LCBmcy5GX0NPTlNUQU5UX09LLCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHZhciBmaWxlID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0oZGVzdClcbiAgICAgICAgaHR0cHMuZ2V0KHVybCwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgcmVzcG9uc2UucGlwZShmaWxlKVxuICAgICAgICAgIGZpbGUub24oJ2ZpbmlzaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZpbGUuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSkub24oJ2Vycm9yJywgKGVycikgPT4ge1xuICAgICAgICAgIC8vIElmIGVycm9yIGhhcHBlbiwgd2UgbmVlZCB0byBkZWxldGUgbG9jYWwgZmlsZVxuICAgICAgICAgIGZzLnVubGluayhkZXN0LCBlcnIgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpXG4gICAgICAgICAgfSlcbiAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2Rvd25sb2FkKCk6IGZpbGU9JyArIGRlc3QgKyAnIGlzIGFscmVhZHkgZXhpc3RlZC4gU2tpcHBlZC4uLicpXG4gICAgICAgIHJlc29sdmUoKVxuICAgICAgfVxuICAgIH0pXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGZldGNoVmlkZW9Gcm9tUzMgKCkge1xuICByZXR1cm4gdmlkZW9TZXJ2aWNlLmdldEFsbFZpZGVvcygpLnRoZW4ocmVzcCA9PiB7XG4gICAgaWYgKHJlc3Auc3RhdHVzKSB7XG4gICAgICBjb25zdCB2aWRlb3MgPSByZXNwLmRhdGFcbiAgICAgIGNvbnNvbGUubG9nKGBUaGVyZSBhcmUgJHt2aWRlb3MubGVuZ3RofSBudW1iZXIgb2YgdmlkZW9zIHRvIGRvd25sb2FkLi4uYClcbiAgICAgIHJldHVybiBQcm9taXNlLm1hcCh2aWRlb3MsIHZpZGVvID0+IHtcbiAgICAgICAgcmV0dXJuIGRvd25sb2FkKFxuICAgICAgICAgIEpTT04ucGFyc2UodmlkZW8uc291cmNlTGluaykuSEQsXG4gICAgICAgICAgQXBwQ29uZmlnLlZJREVPX1BBVEggKyAnLycgKyB2aWRlby5maWxlbmFtZSlcbiAgICAgIH0sIHtjb25jdXJyZW5jeTogQ09OQ1VSUkVOVF9ET1dOTE9BRH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgIH1cbiAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICBjb25zb2xlLmVycm9yKGVycilcbiAgfSlcbn1cblxuZnVuY3Rpb24gZmV0Y2hJbWFnZUZyb21TMyAoKSB7XG4gIHJldHVybiBpbWFnZVNlcnZpY2UuZ2V0QWxsSW1hZ2VzKCkudGhlbihyZXNwID0+IHtcbiAgICBpZiAocmVzcC5zdGF0dXMpIHtcbiAgICAgIGNvbnN0IGltYWdlcyA9IHJlc3AuZGF0YVxuICAgICAgY29uc29sZS5sb2coYFRoZXJlIGFyZSAke2ltYWdlcy5sZW5ndGh9IGltYWdlcyB0byBkb3dubG9hZC4uLmApXG4gICAgICByZXR1cm4gUHJvbWlzZS5tYXAoaW1hZ2VzLCBpbWFnZSA9PiB7XG4gICAgICAgIHJldHVybiBkb3dubG9hZChcbiAgICAgICAgICBpbWFnZS5zb3VyY2VMaW5rLFxuICAgICAgICAgIEFwcENvbmZpZy5JTUFHRV9QQVRIICsgJy8nICsgaW1hZ2UuZmlsZW5hbWUpXG4gICAgICB9LCB7Y29uY3VycmVuY3k6IENPTkNVUlJFTlRfRE9XTkxPQUR9KVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygnTm8gSW1hZ2UgSW5zaWRlIERCJylcbiAgICB9XG4gIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpXG4gIH0pXG59XG5cbmNvbnNvbGUubG9nKCdEb3dubG9hZGluZyBmaWxlcy4uLi4nKVxuUHJvbWlzZS5qb2luKFxuICBmZXRjaFZpZGVvRnJvbVMzKCksXG4gIGZldGNoSW1hZ2VGcm9tUzMoKVxuKS50aGVuKHJlc3AgPT4ge1xuICBjb25zb2xlLmxvZygnRmluaXNoZWQgZG93bmxvYWRpbmcgdmlkZW9zIGFuZCBpbWFnZXMhJylcbiAgc2VxdWVsaXplLmNsb3NlKClcbn0pLmNhdGNoKGVyciA9PiB7XG4gIGNvbnNvbGUuZXJyb3IoZXJyKVxufSlcbiJdfQ==
